##################################################
Linux+ LPIC Level 1 Exam 1
##################################################
##################################################
Introduction
##################################################
##################################################
About The Certification And How To Prepare
##################################################
##################################################
Choosing A Distribution
##################################################
centos when available
ubuntu


##################################################
Introduction To The Linux Server
##################################################
##################################################
Lecture: Basic User Management For Fresh Images/Server Installs
##################################################
userdel -r # will delete the user and the users home dir

groups <username>  #Print  group  memberships  for  each USERNAME or, if no USERNAME is specified, for the current process

usermod -a -G <groupname> <username>


##################################################
Lecture: A Look At VI And Nano Text Editors
##################################################
w! #saves the file without closing


nano
ctrl + k #deletes the whole line

##################################################
Lecture: Root User, Sudo Users And Setting Up Your User Account
##################################################
su # to become root

useradd <username>  #add a new user, this will add a entry for this user in the /etc/passwd file

passwd <username> #will give the user a passsword

#we need to edit the /etc/sudoers file

visudo

#you could do the below to give one user elevated privileges

## Allow root to run any commands anywhere
root    ALL=(ALL)       ALL
joe     ALL=(ALL)       ALL

#to give the user you added elevated privileges add them to the wheel group

## Allows people in group wheel to run all commands
%wheel  ALL=(ALL)       ALL

#uncomment this if you want members of the wheel group to access elevated privileges without a password

## Same thing without a password
%wheel  ALL=(ALL)       NOPASSWD: ALL

w  #this command will show you what users are logged into the system

usermod -a -G <group> <user> #to add a user to a group

groups <user> #to see what groups a user is in

userdel -r <user> #to delete a user, the -r removes their home dir

cat /etc/default/useradd  #this gives the info about what happens when a user is created

###############ON A DEBIAN SYSTEM #################
#if sudoers isnt installed
apt-get install sudo

visudo

#instead of adding to the wheel group you will add the user to the sudo group
#or you could add the wheel group
# Allow members of group sudo to execute any command
%sudo   ALL=(ALL:ALL) ALL
%wheel ALL=(ALL:ALL) ALL

#for no password

#includedir /etc/sudoers.d
<user> ALL=(ALL) NOPASSWD:ALL

#####

groupadd wheel


##################################################
Lecture: Navigating Linux & The File System
##################################################
pwd #pwd - print name of current/working directory

mkdir <dir_name> #mkdir - make directories

ls -al #ls - list directory contents -a, --all do not ignore entries starting with . -l     use a long listing format

. #are considered configuration files

#press tab for auto completion

mkdir mydir
cd mydir/
echo "mynew file" > myfile.txt
tail myfile.txt  #tail - output the last part of files default is last 10 lines
head myfile.txt  #head - output the first part of files default is the last 10 lines

cat #cat - concatenate files and print on the standard output

cat myfile.txt myfile2.txt > mynewfile3.txt #to concatenate files

cd #to take you to your current users home dir
cd /home/<user> #will also
cd ~ #will also

#rename a dir
mv dir/ newdir/

rmdir dir #this will only work if the dir is empty

rm -r dir #to delete dirs with files

cp file new-file #copy a file

cp -r dir/ new-dir #the -r is the recursive copy flag


##################################################
Logs & More File Management Tools
##################################################
tail -n 20 <filename> #last 20 lines

tail -f <logfile> #this will view file as new data is appended to them

cat <log> <log2> > <logfile> #combine logs across multiple log files

cat <logfile> | grep fail #this will filter through the log and only print the lines that contain the words fail

cat <logfile> | grep fail | grep authentication

tail -f <logfile> | grep fail | grep authentication

less <logfile> #allows us to navigate files, you can use the arrows e or y to navigate the file


##################################################
File Permissions
##################################################
touch #touch - change file timestamps

umask #The umask utility is used to control the file-creation mode mask, which determines the initial value of file permission bits for newly created files.

rwxrwxrwx #owner, group, everybody else or world permissions


##################################################
Lecture: Cron Jobs
##################################################
#if you have a cron job on your desktop and your labtop is turned off during the time the job is supposed to run the job will not run
#for a desktop you want to run anacron
http://www.tutorialspoint.com/unix_commands/anacron.htm

#cron permissions
cron.deny #any user listed here will not be able to setup a cron job

cron.allow #is this file exists all users by default are denied access unless they are explicitly named in the allow file

vim /etc/crontab

#if you cp a script to the .daily . monthy crons thats what those files will run

crontab -e #this is user cron

/car/spool/cron #these are our system crons, you will see the users crons here as well

/var/log/cron #this is where you cron files are located



##################################################
Lecture: Introduction To Linux Package Managers
##################################################
yum #redhat distros
apt #debian distros

cat /etc/issue #this will tell you your distro

cat /etc/yum.repos.d #this is where your repos are located

yum search http #this is to search for packages

yum install httpd

yum update #update packages

#the difference between yum and apt is apt actually caches package information on our system, yum contacts the repo

apt-get update #updates repo info into cache

apt-cache search <package> #this searches the local apt cache

apt-get install apache2 #this installs

apt-get upgrade #this will look for packages that are out of date and install new ones



##################################################
Lecture: A Look At System Resources With The Linux Top Command
##################################################
top  #top - display Linux processes


top - 04:00:20 up 39 min,  1 user,  load average: 0.00, 0.01, 0.05 #1 min load avg, 5 min load avg, 15 min load avg

shift+m #will resort by memory utilization
shift+p #will sort of cpu utilization

NI #nice value,# -20 to 19 # 19 is the lowest priority value
r #will allow to to renice
<pid> <nice_value>

k #to kill a process
<pid>

##################################################
Lecture: Finding Files In Linux
##################################################
which locate #this will show you where/if locate is installed
locate #locate - find files by name, uses a db
updatedb #updates the locate db, updatedb - update a database for mlocate


find #find - search for files in a directory hierarchy

##################################################
Exercise: Introduction To The Linux Server
##################################################

Note: This exercise can be completed on a LinuxAcademy.com lab server; however, some of the solutions are specific to Debian/Ubuntu servers and some are specific to RHEL/CentOS servers.
Part 1

1. Start your Linux Academy server and log in. Create two users, john and jeff. Set their passwords and log in as both.

useradd -m jeff && useradd -m john
passwd jeff && passwd john
(&& means only perform the following command if the first one completed successfully)

2.  Lock the user account added previously called john and log out and verify the account can no longer access the system. Then unlock john's account. Create two new groups called lagroup1 and lagroup2. Execute a command that will add the account jeff to both those groups. Use ONE command to add that account to both groups.

Open a new terminal/putty screen and connect to your server. Login as your user and then "su" into the root user. You will now have two terminals, one for your root user to perform actions and one to test locking users out.
From your root terminal type:
passwd -l john
From your other terminal attempt to login to the system with the user "john". You will notice it will not allow it. Now from your root terminal type:
passwd -u john
Try to login again. You will notice login is now allowed.
groupadd lagroup1 && groupadd lagroup2
usermod -aG lagroup1,lagroup2 jeff

3.  Add the user jeff to the appropriate place so that user has the ability to execute commands with superuser/root privileges. While logged in as the user jeff, create a small text file with any content in the /root directory.

As the root user edit /etc/sudoers. If /etc/sudoers does not exist you need to install sudo: apt-get install sudo or yum install sudo
You can use visudo to edit the /etc/sudoers file but for certification reasons you should know how to edit the file manually.
Add jeff to the sudoers file, you can do this one of two ways:
Add the user directly in the file:
jeff ALL=(ALL)       ALL
Make sure the "wheel", "admin" or "sudo" option is not commented out and exists. (This will vary depending on distribution):
%wheel ALL=(ALL) NOPASSWD: ALL
If the wheel option is available we would then add jeff to the wheel group (% represents "group") at the command line type:
usermod -aG wheel jeff
NOTE: Debian/Ubuntu users might notice "sudo" or "admin" and not "wheel" is the default group. You can use that in place of wheel.
Log out of the system then log back in as jeff. As the jeff user type:
sudo touch file /root/test
This will create a file in the /root directory which only root can do.

4.  Log in as root. Create a new directory in root's home directory called 'filemaintenance'. Change to that directory and create three "dummy files": file1, file2, and file3. Move back to the parent directory (root's home directory) and then copy the files located in filemaintenance to root's home directory.

cd; mkdir filemaintenance
Note: just executing the 'cd' command will change you to your home directory.
cd filemaintenance; touch file1; touch file2; touch file3
cd ..
cp filemaintenance/* .
NOTE: The . it is part of the statement and means "current directory." (This command will copy all the files, directories, and sub directories in /root/filemaintenance directory into your /root directory (the filemaintenance parent directory).

5.  Change back to root's home directory, /root. Move the new 'filemaintenance' directory and all its contents into another directory called 'movedfiles'.

cd
mkdir movedfiles
mv filemaintenance/ movedfiles/

6.  Lock the account john again. Log out of your system. Attempt to log into the system three times using the recently locked user account john. After the third failed attempt, log into your system as root and unlock the user. Then list the last 10 lines of the appropriate log file on the system that will show those failed login attempts.

Some systems use different auth logs. Depending on your distribution and version it will be one of the log files listed below
tail /var/log/auth.log OR tail /var/log/syslog  OR tail /var/log/secure

7.  Logged in as root, search the filesystem for a configuration file called 'ld.so.conf' and display its location and path. List the contents of that file redirected to a second file called 'ld.so.conf.out' in your home directory.

First we update the 'locate' database:
updatedb
Note:  If the command is not found then apt-get install locate or yum install locate
locate ld.so.conf
cat ld.so.conf > ~/ld.so.conf.out

8.  Copy the following files into root's home directory:
/etc/hosts
/var/log/dmesg
/usr/bin/whoami

Change the permissions of each file as follows:
hosts - only the owner user id can read/write/execute, no group or world access
dmesg - owner account can read/write, group and everyone can read/execute
whoami - everyone can execute, no other permissions

cp /etc/hosts ~/; cp /var/log/dmesg ~/; cp /usr/bin/whoami ~/;
cd ~/
chmod 700 hosts
chmod 655 dmesg
chmod 111 whoami

9.  Change the owner and group of all the files above to be owned by jeff.

chown jeff.jeff /root/hosts
chown jeff.jeff /root/whoami
chown jeff.jeff /root/dmesg
ls -al #to verify the changes have been made

10.  Log in as root to your system, if you haven't already. For the remainder of this exercise you will need to be root. Create a cron job that lists all users in the home directory every day at noon and redirects that listing to a file in your home directory called 'cronoutput.out'.

crontab -e
Enter the following entry:
0 12 * * * ls /home > ~/cronoutput.out

11. Create another cron job that runs the same process as the last one but at 15 minutes after every hour.

15 * * * * ls /home > ~/cronoutput.out

12. Create another cron job  that runs the same process as the last two but every 3 minutes between midnight and 1:00 AM the 1st day of the month.

*/3 0-1 1 * * ls /home > ~/cronoutput.out

13.  Execute the command to prepare your system for package installations using apt-get or yum. Search available packages and descriptions for any reference to the 'apache' web server. Redirect those results to a file named 'search.out' in root's home directory.

Ubuntu/Debian
apt-get update
apt-cache search apache > ~/search.out
RHEL/CentOS
yum makecache fast
yum search apache > ~/search.out

14.  Install all available system updates for your system. Once that is complete, using the information gathered in Lab 1, install the apache web server. When executing the installation, pass the appropriate parameter to the command line so you are not asked to confirm installation.

Ubuntu/Debian
apt-get upgrade
apt-get install apache2 -y
RHEL/CentOS
yum update
yum install httpd -y

If you wish to use the exercise grader, please check your work on part 1 before continuing on to part 2.

Part 2

Change the root password on your system to linuxtest. Log out and log back in as root. Remove the user john from the system, including the removal of /home/john.

Type su to change the user to root.
passwd
logout
Log back into the root user by typing su on the command line.
userdel -r john
Note: this will remove the user, john, and the user's home directory.



##################################################
Exercise: Root User, Sudo Users And Setting Up Your User Account
##################################################
1. Once logged into your system as a regular user, execute the command that will allow you to log into the root account.

su -
Password:
Last login: Wed Sep 16 14:17:13 UTC 2015 on pts/0

2. As the root user, create a user called testuser. Be sure that the home directory of /home/testuser is created during user creation. Follow up by setting a password for this account.

adduser -d /home/testuser -m testuser
ls -al /home
total 8
drwxr-xr-x.  4 root     root       32 Sep 16 14:29 .
drwxr-xr-x. 17 root     root     4096 Aug  6 19:28 ..
drwx------.  2 testuser testuser   59 Sep 16 14:29 testuser
drwx------. 11 user     user     4096 Sep 16 14:27 user
passwd testuser
Changing password for user testuser.
New password:
Retype new password:
passwd: all authentication tokens updated successfully.

3. Exit the root account, run the command to log in as the newly created user. Using the sudo command, attempt to edit the /etc/sudoers file and note the results.

su - testuser
Password:
sudo visudo /etc/sudoers
We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:
    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.
[sudo] password for testuser:
testuser is not in the sudoers file.  This incident will be reported.

4. Execute the command that will allow you to log back into the root account. Once root, edit the /etc/sudoers file. Be sure that any member of the wheel group is granted sudo privileges. Save and exit the file.

su -
Password:
Last login: Wed Sep 16 14:27:33 UTC 2015 on pts/0
visudo
visudo: /etc/sudoers.tmp unchanged
cat /etc/sudoers | grep wheel
## Allows people in group wheel to run all commands
%wheel  ALL=(ALL)       ALL
# %wheel        ALL=(ALL)       NOPASSWD: ALL

5. Add the testuser to the wheel group in the appropriate file. Exit the root user. Log back into the system as the testuser user. Again, attempt to edit the /etc/sudoers file using the sudo command and note the results.

vim /etc/group
cat /etc/group | grep wheel
wheel:x:10:centos,testuser
exit
sudo visudo
[sudo] password for testuser:
visudo: /etc/sudoers.tmp unchanged


##################################################
Exercise: Cron Jobs
##################################################
1. Create a directory in your home directory called 'myscripts'. Create an empty script in that directory called 'mycron.sh'.

mkdir myscripts
cd myscripts/
touch mycron.sh

2.  Edit the newly created mycron.sh file. Add the appropriate shell notification comment at the top that will identify it as a script. The script should do the following:
Echo the date and time to the terminal
Show all mounts and drive space
Echo the date and time to the terminal (second time)
List the free memory on the system

vim mycron.sh
cat mycron.sh
#!/bin/bash
date
df -h
date
free -m
chmod 755 mycron.sh
ll
total 4
-rwxr-xr-x. 1 user user 53 Sep 16 14:45 mycron.sh

3.  Make sure the script, once saved, is executable. Using the appropriate command to edit your user CRON, add a line that calls this script each hour of every day of the month.

crontab -e
no crontab for user - using an empty one
crontab: installing new crontab
crontab -l
0 * * * * /home/user/myscripts/mycron.sh

4. Comment out the job line from Step #3 in user's crontab.  Create a new job that executes the mycron.sh script at exactly 2:55 PM every day. Display the crontab file for the 'user' user with the new values.

crontab -e
crontab: installing new crontab
crontab -l
# 0 * * * * /home/user/myscripts/mycron.sh
55 14 * * * /home/user/myscripts/mycron.sh

5.  Comment out the job line from Step #4 in user's crontab.  Create a new job that executes the mycron.sh script at exactly 3:55 AM every day. This new job should also redirect standard output and errors to a file named cron.log located in the myscripts directory created in step #1.

crontab -e
crontab: installing new crontab
Wed Sep 16 15:04:05 UTC 2015
crontab -l
# 0 * * * * /home/user/myscripts/mycron.sh
# 55 14 * * * /home/user/myscripts/mycron.sh
55 3 * * * /home/user/myscripts/mycron.sh >> /home/user/myscripts/cron.log 2>&1




##################################################
Exercise: Linux Log Files
##################################################
NOTE: These exercises can be completed using Linux Academy Lab Server running the CentOS or Red Hat Enterprise Linux Distributions and either version 6 or 7. Although the examples provided apply to other Linux distributions, the specific log names and locations are particular to those distributions.
1. Become the root user on your system. Using the appropriate command, display the results of the last time the server was booted (this utility reads from the system log and is updated on system boot).

su -
Password:
dmesg
[    0.000000] Initializing cgroup subsys cpuset
[    0.000000] Initializing cgroup subsys cpu
[    0.000000] Initializing cgroup subsys cpuacct
[    0.000000] Linux version 3.10.0-229.14.1.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) #1 SMP Tue Sep 15 15:05:51 UTC 2015
[    0.000000] Command line: BOOT_IMAGE=/boot/vmlinuz-3.10.0-229.14.1.el7.x86_64 root=UUID=0f790447-ebef-4ca0-b229-d0aa1985d57f ro console=ttyS0,115200 console=tty0 console=ttyS0,115200n8 vconsole.font=latarcyrheb-sun16 crashkernel=auto vconsole.keymap=us LANG=en_US.UTF-8
[    0.000000] e820: BIOS-provided physical RAM map:
[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009dfff] usable
[    0.000000] BIOS-e820: [mem 0x000000000009e000-0x000000000009ffff] reserved
[    0.000000] BIOS-e820: [mem 0x00000000000e0000-0x00000000000fffff] reserved
[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x000000003fffffff] usable
[    0.000000] BIOS-e820: [mem 0x00000000fc000000-0x00000000ffffffff] reserved
(ONLY FIRST 15 LINES PRESENTED - YOUR OUTPUT WILL BE MUCH LONGER)

2.  Find and display the contents of the system log. Do the contents of the system log match the contents of the displayed information in Step #1?

cat /var/log/messages | grep "Sept 22"
Sep 22 19:32:24 tcox5 rsyslogd: [origin software="rsyslogd" swVersion="7.4.7" x-pid="580" x-info="http://www.rsyslog.com"] start
Sep 22 19:32:24 tcox5 rsyslogd-2307: warning: ~ action is deprecated, consider using the 'stop' statement instead [try http://www.rsyslog.com/e/2307 ]
Sep 22 19:32:21 tcox5 journal: Runtime journal is using 6.2M (max 49.6M, leaving 74.4M of free 489.8M, current limit 49.6M).
Sep 22 19:32:21 tcox5 kernel: Initializing cgroup subsys cpuset
Sep 22 19:32:21 tcox5 kernel: Initializing cgroup subsys cpu
Sep 22 19:32:21 tcox5 kernel: Initializing cgroup subsys cpuacct
Sep 22 19:32:21 tcox5 kernel: Linux version 3.10.0-229.14.1.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) #1 SMP Tue Sep 15 15:05:51 UTC 2015
Sep 22 19:32:21 tcox5 kernel: Command line: BOOT_IMAGE=/boot/vmlinuz-3.10.0-229.14.1.el7.x86_64 root=UUID=0f790447-ebef-4ca0-b229-d0aa1985d57f ro console=ttyS0,115200 console=tty0 console=ttyS0,115200n8 vconsole.font=latarcyrheb-sun16 crashkernel=auto vconsole.keymap=us LANG=en_US.UTF-8
Sep 22 19:32:21 tcox5 kernel: e820: BIOS-provided physical RAM map:
Sep 22 19:32:21 tcox5 kernel: BIOS-e820: [mem 0x0000000000000000-0x000000000009dfff] usable
Sep 22 19:32:21 tcox5 kernel: BIOS-e820: [mem 0x000000000009e000-0x000000000009ffff] reserved
(NOTE: YOUR DISPLAYED INFORMATION WILL CONTAIN ALL MESSAGES SINCE LAST LOG ROTATION)
ANSWER: Yes it contains the same information but also much more...

3.  Display the system user security activity log and show all security actions taken by the root user since log in during this session.

cat /var/log/secure | grep root
Sep 21 15:10:48 tcox5 sshd[2120]: pam_succeed_if(sshd:auth): requirement "uid >= 1000" not met by user "root"
Sep 21 21:32:19 tcox5 su: pam_unix(su-l:session): session opened for user root by user(uid=1001)
Sep 21 22:31:02 tcox5 su: pam_unix(su-l:session): session closed for user root
Sep 22 19:32:42 tcox5 su: pam_unix(su-l:session): session opened for user root by user(uid=1001)

4.  In a terminal and while logged into the user user, display and follow the security log from Step #3 above. Open another tab/terminal and starting as the user user, become the root user and then display the contents of the log now showing in the other tab/terminal.

tail -f /var/log/secure
Sep 22 19:32:29 tcox5 sshd[940]: Server listening on :: port 22.
Sep 22 19:32:32 tcox5 runuser: pam_unix(runuser-l:session): session closed for user user
Sep 22 19:32:33 tcox5 polkitd[1111]: Loading rules from directory /etc/polkit-1/rules.d
Sep 22 19:32:33 tcox5 polkitd[1111]: Loading rules from directory /usr/share/polkit-1/rules.d
Sep 22 19:32:33 tcox5 polkitd[1111]: Finished loading, compiling and executing 3 rules
Sep 22 19:32:33 tcox5 polkitd[1111]: Acquired the name org.freedesktop.PolicyKit1 on the system bus
Sep 22 19:32:35 tcox5 sshd[1048]: Accepted password for user from 216.46.60.98 port 50324 ssh2
Sep 22 19:32:35 tcox5 sshd[1048]: pam_unix(sshd:session): session opened for user user by (uid=0)
Sep 22 19:32:42 tcox5 su: pam_unix(su-l:session): session opened for user root by user(uid=1001)
Sep 22 19:33:00 tcox5 polkitd[1111]: Registered Authentication Agent for unix-session:c1 (system bus name :1.22 [/usr/bin/gnome-shell], object path /org/freedesktop/PolicyKit1/AuthenticationAgent, locale en_US.UTF-8)
Sep 22 19:41:32 tcox5 sshd[1451]: Accepted password for user from 216.46.60.98 port 50374 ssh2
Sep 22 19:41:32 tcox5 sshd[1451]: pam_unix(sshd:session): session opened for user user by (uid=0)
Sep 22 19:41:36 tcox5 su: pam_unix(su-l:session): session opened for user root by user(uid=1001)



##################################################
Exercise: Using FIND to Find and Manipulate Files
##################################################
1.  In user's home directory, create a text file with any content called testfile.txt. You may use any method you choose to create this file.

Possible Solutions:
echo "testing" > testfile.txt
touch testfile.txt

2.  Make a copy of the recently created testfile.txt into a file called mytest.txt using any method you would like. Using the appropriate privileges, move that file to the /etc directory.

Possible Solutions:
cp testfile.txt mytest.txt && sudo mv mytest.txt /etc
(NOTE: you can execute that command on one line or in subsequent lines)
sudo cp testfile.txt /etc/mytest.txt

3.  Make sure you are in your user home directory. Execute a find command to display the location of the testfile.txt text file created in Step #1. Execute the same command but specify that the search should begin with the /home directory and note the results.

find -name testfile.txt
testfile.txt
find /home -name testfile.txt
find: /home/testusers: Permission Denied (any accounts in /home not owned by user)
/home/user/testfile.txt

4.  As the user user, execute a find command with the appropriate options to display the location of the file called mytest.txt. Start the search from the root (i.e. /) directory. Re-execute that command as the root user or with sudo privileges and note the results.

find / -name mytest.txt
[Permission Denied messages], no file found
sudo find / -name mytest.txt
/etc/mytest.txt

5.  Using appropriate privileges, copy the /etc/mytest.txt file to /etc/myTesT.txt. Execute a find command on that name that will show the results of both files (i.e. ignore the case in the filenames).

sudo cp /etc/mytest.txt /etc/myTesT.txt
sudo find / -iname mytest.txt
/etc/myTesT.txt
/etc/mytest.txt

6.  As the root user or executing the command with sudo privileges, find all files on the system that end with .txt, paginate the results so you can scroll through them.

sudo find / -name "*.txt" | more
[A lot of results should appear as there are a lot of text files on any Linux system]

7.  Using the find command, change the permissions on the /etc/myTesT.txt file so that it is universal read/write/execute. This should be done in one line using the find command options only.

sudo find / -name myTesT.txt -exec chmod 777 {} \;
sudo ls -al /etc/myTest.txt
-rwxrwxrwx 1 root root 8 Aug  2 17:00 /etc/myTesT.txt

8.  With the find command, using root or sudo privileges, display all executable files in /usr directory.

sudo find /usr -perm /a=x
[A number of directories and files in /usr that should have executable permissions will list here]

9.  Run the updatedb command to update your filesystem name database using appropriate root or sudo privileges. Use the locate command to find all three files you created in Steps 1, 2 and 5.

updatedb
locate testfile.txt
/home/user/testfile.txt
locate mytest.txt
/etc/mytest.txt
locate myTesT.txt
/etc/myTesT.txt



##################################################
Debian Based Package Management
##################################################
##################################################
Lecture: Apt-Get Command Set
##################################################
apt-get #apt-get - APT package handling utility -- command-line interface

cd /etc/apt/souces.list #this is where your repos are located

#only add repos to your sources.list that are a trusted source

apt-get update #download the latest information from the repos

apt-cache search apache2  #to search for packages

apt-get install apache2 #to install a package

apt-get clean #clean clears out the local repository of retrieved package files. It removes everything but the lock file from /var/cache/apt/archives/ and /var/cache/apt/archives/partial/

apt-get autoclean  #Like clean, autoclean clears out the local repository of retrieved package files. The difference is that it only removes package files that can
           no longer be downloaded, and are largely useless. This allows a cache to be maintained over a long period without it growing out of control. The
           configuration option APT::Clean-Installed will prevent installed packages from being erased if it is set to off.


apt-get install -s php5 #-s, --simulate, --just-print, --dry-run, --recon, --no-act

apt-get install -y php5 #-y, --yes, --assume-yes    #-q, --quiet Quiet; produces output suitable for logging, omitting progress indicators.

apt-get source php5 #source causes apt-get to fetch source packages. APT will examine the available packages to decide which source package to fetch. It will then
           find and download into the current directory the newest available version of that source package while respecting the default release,

apt-get dist-upgrade #dist-upgrade in addition to performing the function of upgrade, also intelligently handles changing dependencies with new versions of packages;
           apt-get has a "smart" conflict resolution system, and it will attempt to upgrade the most important packages at the expense of less important
           ones if necessary.

apt-get doenload <package_name> #download will download the given binary package into the current directory.


##################################################
Lecture: Apt-Cache Package Management
##################################################
apt-cache #apt-cache - query the APT cache, query the metadata about the repos

apt-cache stats #stats displays some statistics about the cache. No further arguments are expecte
###############
root@joeywagner-gmail-com2:~/phpsource# apt-cache stats
Total package names: 46385 (928 k)
Total package structures: 46385 (2598 k)
  Normal packages: 35003
  Pure virtual packages: 509
  Single virtual packages: 4072
  Mixed virtual packages: 1078
  Missing: 5723
Total distinct versions: 37727 (2716 k)
Total distinct descriptions: 72375 (1737 k)
Total dependencies: 224718 (6292 k)
Total ver/file relations: 39222 (941 k)
Total Desc/File relations: 72375 (1737 k)
Total Provides mappings: 7800 (156 k)
Total globbed strings: 74 (577 )
Total dependency version space: 927 k
Total slack space: 39.2 k
Total space accounted for: 12.7 M
###############


apt-cache depends <package_name> #depends pkg...  shows a listing of each dependency a package has and all the possible other packages that can fulfill that dependency

apt-cache pkgnames  #pkgnames This command prints the name of each package APT knows

apt-cache unmet #unmet displays a summary of all unmet dependencies in the package cache.

##################################################
Lecture: DPKG Command Set
##################################################
less /etc/issue #get your distro

uname -a #get your architecture

use wget to download the package
wget --no-check-certificate https://www.dropbox.com/download?dl=packages/debian/dropbox_1.6.0_amd64.deb

dpkg -i <package> #this will fail because you need dependancies

apt-get update

apt-get -f upgrade #the dependencies that failed from dpkg registered with the system ad the -f will install them


which <package>#this will show you that the package is installed

dpkg --get-selections #--get-selections [package-name-pattern...] Get list of package selections, and write it to stdout.

dpkg -L # -L, --listfiles package-name... List files installed to your system from package-name.


dpkg-reconfigure <package_name> #reconfigure an already installed package

dpkg --remove <package_name> #-r, --remove, -P, --purge package...|-a|--pending
              Remove an installed package. -r or --remove remove everything except conffiles. This may avoid having to reconfigure the package if it  is  rein‐
              stalled  later.  (Conffiles  are  configuration  files  that  are listed in the DEBIAN/conffiles control file). -P or --purge removes everything,
              including conffiles
dpkg --purge <package_name>


##################################################
Lecture: Summary & Overview of aptitude
##################################################
aptitude is similar to apt but more flexible

aptitude #aptitude - high-level interface to the package manager

aptitude search #search - Searches for packages matching one of the patterns supplied on the command line. All packages which match any of the given patterns will be displayed;

aptitude install <package>

aptitude #this will pull up an interface

? #will show you all the available options

aptitude update #update Updates the list of available packages from the apt sources (this is equivalent to “apt-get update”)


##################################################
Lecture: A Look At dselect
##################################################
apt-get install dselect

deselect #dselect - Debian package management frontend, older application thats not really used any more

Update #will update repos like apt-get update

Install #Install and upgrade wanted packages.




##################################################
Exercise: Exercise: Debian/Ubuntu Package Management
##################################################
1. Running the appropriate command as 'sudo', list all of the packages currently installed on the system using the appropriate package management command and options.
user@linuxacademy:~$ sudo dpkg -l
(Output)
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                                                 Version                                    Architecture Description
+++-====================================================-==========================================-============-========================================================
=======================
ii  account-plugin-aim                                   3.12.9-1ubuntu1.1                          amd64        Messaging account plugin for AIM
ii  account-plugin-facebook                              0.12+15.04.20150415.1-0ubuntu2             all          GNOME Control Center account plugin for single signon -
facebook
(Output) NOTE: Your output will differ based on the packages installed on your system

2. The package called 'linux-headers-generic' will be installed on your system. Using the appropriate package management command and options, list the files and directories that are installed with that package.
user@linuxacademy:~$ sudo dpkg -L linux-headers-generic
(Output)
/.
/usr
/usr/share
/usr/share/doc
/usr/share/doc/linux-headers
/usr/share/doc/linux-
headers
/copyright
/usr/share/doc/linux-headers/changelog.gz
(Output) NOTE: Your output may be slightly different depending on kernel version and distribution

 3. Using the standard Debian/Ubuntu based "advanced packaging tool", install and then remove the package called 'nano' and note the results.
user@linuxacademy:~$ sudo apt-get install nano
(Output)
Reading package lists... Done
Building dependency tree
Reading state information... Done
Suggested packages:
  spell
The following NEW packages will be installed:
  nano
0 upgraded, 1 newly installed, 0 to remove and 30 not upgraded.
Need to get 173 kB of archives.
(Output) NOTE: Package installation will proceed with more output, this is the first 10 lines...
user@linuxacademy:~$ sudo apt-get remove --purge nano
(Output)
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following packages will be REMOVED:
  nano*
0 upgraded, 0 newly installed, 1 to remove and 30 not upgraded.
After this operation, 610 kB disk space will be freed.
Do you want to continue? [Y/n] y
(Output) NOTE: Package removal will continue with more output, this is the first 10 lines

4.  Using the tool from Step #3, execute the command with the appropriate options to DOWNLOAD (but not install) the 'nano' package. Once downloaded, use the standard package management command as in Steps #1 and #2 to install the downloaded package.
user@linuxacademy:~$ sudo apt-get download nano
user@linuxacademy:~$ ls -al nano*
(Output) -rw-r--r-- 1 root root 172710 Jul 16  2014 nano_2.2.6-3_amd64.deb
user@linuxacademy:~$ sudo dpkg -i nano_2.2.6-3_amd64.deb
(Output)
Preparing to unpack nano_2.2.6-3_amd64.deb ...
Unpacking nano (2.2.6-3) ...
Setting up nano (2.2.6-3) ...
update-alternatives: using /bin/nano to provide /usr/bin/editor (editor) in auto mode
update-alternatives: using /bin/nano to provide /usr/bin/pico (pico) in auto mode
Processing triggers for install-info (5.2.0.dfsg.1-6) ...
Processing triggers for doc-base (0.10.6) ...
Processing 2 added doc-base files...
Registering documents with scrollkeeper...
Processing triggers for man-db (2.7.0.2-5) ...
(Output) NOTE: Your version and output may differ depending on the distribution and version used

 5. Using the advanced package tool (from Steps #3 and #4), completely remove the 'nano' package. Use the appropriate options to remove the package and all configuration files that may have been added or changed.
user@linuxacademy:~$ sudo apt-get remove --purge nano
(Output)
The following packages will be REMOVED:
  nano*
0 upgraded, 0 newly installed, 1 to remove and 30 not upgraded.
After this operation, 610 kB disk space will be freed.
Do you want to continue? [Y/n] y
(Output) NOTE: Your output will continue, these are just the initial lines to expect

6. Clean up your workspace by issuing the appropriate options to the advanced configuration tool (will remove downloaded package files).
user@linuxacademy:~$ sudo apt-get clean
(Output) No output unless there are errors


##################################################
Exercise: Debian Based Package Management
##################################################
Video One - apt-get Command Set
1. Find the 'sources.list' file on your distribution. Edit the file to contain a mirror to the UK repository:
deb http://ftp.uk.debian.org/debian wheezy-updates main contrib non-free
deb-src http://ftp.uk.debian.org/debian wheezy-updates main contrib non-free
Copy the sources.list file into your home directory, create a directory called 'coursethree' and place the file and all output files for this set of videos there.
Make sure you are running the "debian" distribution in the server lab
Add the source files to the end of the /etc/apt/sources.list file
apt-get update
mkdir ~/coursethree && cp /etc/apt/sources.list ~/coursethree
After executing a repository update, complete a upgrade to your existing packages.
apt-get upgrade
2. Obtain a count of the packages that are needed to install a full apache2 install (package name 'apache2'). Simulate the full installation, with the appropriate switch for logging, pipe the output to ~/file.out and then place the file in the directory above.
sudo apt-cache showpkg apache2 >> file.out
sudo apt-get install -s apache2 >> file.out (output will show you the names and number of total packages and dependencies needing to be installed)

Video Two - DPKG Command Set
Obtain a package from any third party site (recommendations - dropbox) in .DEB format. Download using 'wget' from the command line.
Install the package you downloaded above, using dpkg with the appropriate command line options.  Resolve any missing dependencies using the associated 'apt-get' command, also pasting that command and resulting output in a file.
dpkg -i nano_2.2.6-1+b1_amd64.deb
apt-get -f upgrade (if there are dependency issues)



##################################################
RPM Package Management
##################################################
wget http://www.nano-editor.org/dist/v2.2/RPMS/nano-2.2.6-1.x86_64.rpm

rpm #rpm - RPM Package Manager

#rpm will not let us install nano because there is already nano package installed, the package name must be unique to the system

rpm -i nano-2.2.6-1.x86_64.rpm #-i This installs a new package.

rpm -e nano #-e this is the erase flag

<package_name>-<version>-<build_number>.<cpu_architecture>.rpm
nano-2.2.6-1.x86_64.rpm

#now you can install
rpm -ihv nano-2.2.6-1.x86_64.rpm #-h, --hash Print 50 hash marks as the package archive is unpacked.  Use with -v|--verbose for a nicer display.   -v     Print verbose information - normally routine progress messages will be displayed.

whereis nano
nano: /usr/bin/nano /usr/share/nano /usr/share/man/man1/nano.1.gz

rpm -q nano #rpm {-q|--query}

rpm -qi nano #the qi will query install information   -i, --info Display package information, including name, version, and description.  This uses the --queryformat if one was specified.

rpm -q --list nano #list all the files that were installed with a package

rpm -qR nano #-R, --requires List capabilities on which this package depends.

rpm -u  #rpm {-U|--upgrade} [install-options] PACKAGE_FILE ...   This upgrades or installs the package currently installed to a newer version.  This is the same as install, except all other version(s) of  the  package are removed after the new package is installed.

rpm -F  #rpm {-F|--freshen} [install-options] PACKAGE_FILE ..  This will upgrade packages, but only ones for which an earlier version is installed.

rpm --rebuilddb  #if youre doing a bunch or removing and installing you will want to do this

rpm -qi #also gives us a way to verify that a package has been installed

#rpm configuration file
/usr/lib/rpm/rpmrc  #youre not going to mess with it

#log
/var/log/rpmpkgs



##################################################
Lecture: YUM Software Management
##################################################
yum #yum - Yellowdog Updater Modified,  yum  is  an interactive, rpm based, package manager. It can automatically perform system updates, including dependency analysis and obsolete processing based on
       "repository" metadata. It can also perform installation of new packages, removal of old packages and perform queries on the installed and/or available  packages
       among many other commands/services (see below). yum is similar to other high level package managers like apt-get and smart

vim /etc/yum.conf #yum configuration file  #this is where you want to add additional repo file locations

/etc/yum.repos.d #files where repo locations are located

yum update #update If run without any packages, update will update every currently installed package.

yum check-update #Implemented so you could know if your machine had any updates that needed to be applied without running it interactively. Returns exit
              value of 100 if there are packages available for an update. Also returns a list of the packages to be updated in list format.  Returns
              0 if no packages are available for update. Returns 1 if an error occurred.  Running in verbose mode also shows obsoletes.

yum search http

yum install httpd

whereis httpd

yum check-update httpd

yum upgrade #upgrade Is the same as the update command with the --obsoletes flag set. See update for more details.

yum remove httpd #remove or erase Are  used to remove the specified packages from the system as well as removing any packages which depend on the package being removed.
              remove operates on groups, files, provides and filelists just like the "install" command.(See Specifying package names for more infor‐
              mation)

yum list #Is used to list various information about available packages; more complete details are available in the List Options section below.

yum info httpd #info   Is  used  to list a description and summary information about available packages;

yum deplist #deplist Produces  a  list  of  all  dependencies and what packages provide those dependencies for the given packages.

yum clean packages  #yum clean packages Eliminate any cached packages from the system.  Note that packages are not automatically deleted after they are downloaded.


##################################################
Lecture: yumdownloader & rpm2cpio
##################################################
yumdownloader - download RPM packages from Yum repositories

yumdownloader httpd

yumdownloader --resolve httpd #--resolve When downloading RPMs, resolve dependencies and also download the required packages


rpm2cpio #rpm2cpio - Extract cpio archive from RPM Package Manager (RPM) package

rpm2cpio httpd-2.4.6-45.el7.centos.x86_64.rpm

rpm2cpio httpd-2.4.6-45.el7.centos.x86_64.rpm > httpd.cpio #redirect the output to the httpd.cpio file

rpm2cpio httpd-2.4.6-45.el7.centos.x86_64.rpm | cpio -t #piping the output to cpio


##################################################
Exercise: Working With RPM
##################################################
1. Create and launch a CentOS distribution image in your server lab section.
2. Download the Lynx RPM using yumdownloader to root's home directory.
[root@localhost]# yumdownloader lynx
3. Determine if the package already exists on the system.
[root@localhost]# rpm -q lynx
(if exists, will show something like; lynx-2.8.6-27.el6.x86_64)
4. Install the package on the system using RPM and the required flags.
[root@localhost]# rpm -i lynx-2.xxx.rpm
If you get a message on a dependency requirement, run the below line
[root@localhost]# yum install -y [dependency name]
5. Use RPM to list all the files inside of the RPM package.
[root@localhost]# rpm -qpl lynx-2.xxx.rpm
6. Remove the package from the system.
[root@localhost]# rpm -e lynx
7. Attempt the same install using 'yum' rather than 'rpm'.
[root@localhost]# yum install lynx
8. Remove the package using yum.
[root@localhost]# yum remove lynx
When you remove a package it is considered "erasing" you can also use the below option to remove the package
[root@localhost]# yum erase lynx


##################################################
Exercise: Exercise: Yum and RPM Package Management
##################################################

1. Running the appropriate command as 'sudo', list all of the packages currently installed on the system using the appropriate package management command and options.
user@linuxacademy:~$ sudo yum list installed
(Output)
Loaded plugins: fastestmirror, langpacks
Loading mirror speeds from cached hostfile
 * base: repos.dfw.quadranet.com
 * epel: mirror.compevo.com
 * extras: repos.dfw.quadranet.com
 * updates: repos.dfw.quadranet.com
Installed Packages
GConf2.x86_64                                                                3.2.6-8.el7                                                      @base/$releasever
GeoIP.x86_64                                                                 1.5.0-9.el7                                                      @base
ModemManager-glib.x86_64                                                     1.1.0-6.git20130913.el7                                          @base/$releasever

NetworkManager.x86_64                                                        1:1.0.0-14.git20150121.b4ea599c.el7                              @base/$releasever
(Output) NOTE: Your output will differ based on the packages installed on your system

2. The package called 'nano' will be installed on your system. Using the appropriate package management command and options, list the files and directories that are installed with that package.
user@linuxacademy:~$ sudo rpm -ql nano
(Output)
/etc/nanorc
/usr/bin/nano
/usr/bin/rnano
/usr/share/doc/nano-2.3.1
.....


 3. Using the standard Red Hat/CentOS based "update manager", install and then remove the package called 'nano' and note the results. Install the utilities package for the 'update manager' as discussed in the course so we can download packages.

user@linuxacademy:~$ sudo yum install nano
(Output)
Reading package lists... Done
Building dependency tree
Reading state information... Done
Suggested packages:
  spell
The following NEW packages will be installed:
  nano
0 upgraded, 1 newly installed, 0 to remove and 30 not upgraded.
Need to get 173 kB of archives.
(Output) NOTE: Package installation will proceed with more output, this is the first 10 lines...
user@linuxacademy:~$ sudo yum autoremove nano
(Output)
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following packages will be REMOVED:
  nano*
0 upgraded, 0 newly installed, 1 to remove and 30 not upgraded.
After this operation, 610 kB disk space will be freed.
Do you want to continue? [Y/n] y
(Output) NOTE: Package removal will continue with more output, this is the first 10 lines
user@linuxacademy:~$ sudo yum install yum-utils
4.  Using the tool from Step #3, execute the command with the appropriate options to DOWNLOAD (but not install) the 'nano' package. Once downloaded, use the standard package management command as in Steps #1 and #2 to install the downloaded package.
user@linuxacademy:~$ sudo yumdownloader nano
user@linuxacademy:~$ ls -al nano*
(Output) -rw-r--r-- 1 root root 172710 Jul 16  2014 nano_2.2.6-3_amd64.rpm
user@linuxacademy:~$ sudo rpm -ivh nano_2.2.6-3_amd64.rpm
(Output)
Preparing to unpack nano_2.2.6-3_amd64.deb ...
Unpacking nano (2.2.6-3) ...
Setting up nano (2.2.6-3) ...
update-alternatives: using /bin/nano to provide /usr/bin/editor (editor) in auto mode
update-alternatives: using /bin/nano to provide /usr/bin/pico (pico) in auto mode
Processing triggers for install-info (5.2.0.dfsg.1-6) ...
Processing triggers for doc-base (0.10.6) ...
Processing 2 added doc-base files...
Registering documents with scrollkeeper...
Processing triggers for man-db (2.7.0.2-5) ...
(Output) NOTE: Your version and output may differ depending on the distribution and version used

 5. Using the 'update management' tool (from Steps #3 and #4), completely remove the 'nano' package. Use the appropriate options to remove the package and all configuration files that may have been added or changed.
user@linuxacademy:~$ sudo yum autoremove nano
(Output)
The following packages will be REMOVED:
  nano*
0 upgraded, 0 newly installed, 1 to remove and 30 not upgraded.
After this operation, 610 kB disk space will be freed.
Do you want to continue? [Y/n] y
(Output) NOTE: Your output will continue, these are just the initial lines to expect

6. Clean up your workspace by issuing the appropriate options to the 'update management' tool (will remove downloaded package files).
user@linuxacademy:~$ sudo yum clean all
(Output) No output unless there are errors


##################################################
Vi - The Linux Text Editor
##################################################
##################################################
Lecture: Vi Modes & The importance of Vi
##################################################
#very light weight and can be installed on a recovery disk

command mode

ex mode  #Start in Ex mode.  Go to Normal mode with the ":vi" command.  Can also be done with the "-e" argument

insert mode  #allows us to edit the file

shift+L #will take you to the last line on the terminal, no the last line of the file

shift+H #will take you to the first screen on the terminal

shift+G #takes you to the last line in the file

1+shift+G #takes you to the first line

20+shift+G #this will take you to the 20th line in the file

yy #will copy the line that you are on, yank

p #paste paste the contents after the cursor

P #will paste it on the line before the cursor

:u #will undo

5yy #will yank 5 lines

/pattern #search, n will search for the next occurrence of that search pattern

dd #delete line

5dd #delete 5 lines below your curser

esc and i #will put us into insert mode

cc #will delete line of text

cw #will delete word

R #will replace text as we are inserting

:%s/Hostkey/wahoo/ #find and replace, this will replace the first occurrence on a line

:%s/termtoreplace/replaceterm/g #this will search and replace every occurrence or a string

:r /etc/passwd #load the contents of passwd into a file that we are in

:! ls #run commands


##################################################
Exercise: Vi - The Linux Text Editor
##################################################
Lab One
In your home directory create a file called "myfile.txt". Open myfile.txt using vi. Using insert mode insert the following lines of information on a new line for each.
"hello world!"
"learning linux is fun"
"i like to learn linux"
"linux academy is helping me learn linux"
"labs are as fun as videos"
Using command mode, move to the last line of the file using the correct key shortcut. Yank the last line of the file and place it in front of the very first line in the file. Now yank the first line and the three lines after it, move to the end of the file, and paste those three lines. Undo all changes until you're back at your starting point. Move to the top of the file and insert a new line (it can be anything) after the first line of the file. Move to the first line of the file and replace the word "hello" with "howdy" using the proper key shortcuts. Once completed, move to the top of the file and search for the term Linux, move up and down through the search results.
Shift + g
yy
shift + h (or gg)
shift + p
4yy
shift + g
p
uu two times to get back to the beginning
shift + h or  gg
o (will create a new line beneath your current one and put you into insert mode)
type the text for that new line then hit esc to go back into command mode
shift + h or gg
Move over till your cursor is on the "h" part of hello
in command mode type cw, type howdy then hit esc to go back to command mode
shift + h or gg
/linux (will search for all linux from top down)
?linux (will search for all linux from bottom up)

Lab Two
Enter ex mode and save the changes we've made to the file. Do this without quitting. Now replace all occurrences of the word "linux" to  "opensource". Once completed use the command sequence to save and exit immediately. Once exited reopen the vi file and perform an ls command from within the vi file on your home directory.
:  (entering this key will put you into Ex/line mode.)
%s/linux/opensource/g (/g means replace all occurrences. If you wanted to just replace one line you would put the line number there)
:!ls /home/user

##################################################
Use Streams, Pipes, Redirects, Grep and Cut!
##################################################
##################################################
Lecture: wc, split, cat, and diff commands
##################################################
wc #wc - print newline, word, and byte counts for each file

wc out put is, lines words bytes

wc -l <file> #-l counts the total number of lines

cat #cat - concatenate files and print on the standard output

cat file1 file2 #this will printout both files

split # split - split a file into pieces

split -l <numberoflines> <filename> #-l, --lines=NUMBER put NUMBER lines per output file

split will make new files xaa xab xac ......


diff <file1> <file2> #diff - compare files line by line
diff -y file1 file2
-y, --side-by-side output in two columns


##################################################
Lecture: Streams (stdin, stdout, stderr) and Redirects
##################################################
#a stream is what is displayed across your linux screen

Standard input is anything that you can type into your terminal

EXAMPLE OF STANDARD OUTPUT
ls
file1  file2  file3  mydir  test

EXAMPLE OF STANDARD ERROR
ls dirthatdoesntexist
ls: cannot access dirthatdoesntexist: No such file or directory

cat * #to get the out put from all files
cat * > newfile #all the content from the files will get redirected into a new file
the >  means redirect

>> is append
> is over write

#standard error
ls hghf 2> <file_name> #to get the standard error

ls dirthatdoesntexist 2> error
cat error
ls: cannot access dirthatdoesntexist: No such file or directory

ls dirdiesntexist 2>> /dev/null

/dev/null  #this is nothing

#redirect stdout and stderr
cat file filefile > stdoutfile 2> stderrfile

cat file filefile > stdoutfile 2>&1

set #this will print all shell variables
set [--abefhkmnptuvxBCEHPT] [-o option-name] [arg ...]
       set [+abefhkmnptuvxBCEHPT] [+o option-name] [arg ...]
              Without options, the name and value of each shell variable are displayed in a format that can  be  reused
              as  input for setting or resetting the currently-set variables

set -o noclobber #this will stop you from overwriting files if they already exist
set -o #this will chow you the available arguments

set -o noclobber
echo "mynew line" > file2
-bash: file2: cannot overwrite existing file

set +o noclobber #this removes the noclobber option

some other commands have have a noclobber attribute too

##################################################
Lecture: Pipes
##################################################
ls /etc/ | grep cron

ls /etc/ | grep cron | grep daily > grep.txt

ls /etc | sort -f #-f, --ignore-case
              fold lower case to upper case characters

ls /etc/ | sort -f > sorted.txt


##################################################
Lecture: grep, egrep, and fgrep
##################################################
http://www.thegeekstuff.com/2011/10/grep-or-and-not-operators
global regular expressions print
grep is a command-line utility for searching plain-text data sets for lines matching a regular expression.
Its name comes from the ed command g/re/p (globally search a regular expression and print).



 #starts with
$ #ends with

grep -f filewithpattern searchlocation #you put the pattern you want to search for and put it in the first file

grep -lr <patternt> /searchdirectory #this is for file names, the -l the -r is for recursive

grep ^="" #this is starts with equals

grep -c <pattern> #-c, --count
              Suppress normal output; instead print a count of matching lines  for  each  input  file.   With  the  -v,
              --invert-match option (see below), count non-matching lines.  (-c is specified by POSIX.)

grep [fghsfdg] <file> #this will filter for lines with those characters
grep ^[fghsfdg] <file> #starts with on of the bracketed characters
grep [a-g] <file> #find all characters a through g



#extended global regular expressions print
egrep 'hello.*world' filename #search for all of the lines that contain hello and world

egrep 'hello:world' filename #search for only lines that contain hello or world

-v #with is a inverse search, lines that do not contain hello or world

egrep 'hello|world' | grep -v jeff #lines that do not contain the pattern jeff


#fixed global regular expressions print
fgrep hello$ filename #this will not interpret, this will search for exactly hello$, the special character is ignored.

##################################################
Lecture: Cut Command
##################################################
cut - remove sections from each line of files

#the passwd file as a example

cut -f1 -d: filename #this will cut the first field and use the : as the delineator

cut -f7 -d: filename


##################################################
Lecture: sed Stream Editor
##################################################
sed - stream editor for filtering and transforming text

sed 's/stringtofind/stringtoreplace' filetoread #the s means substitute

sed 's/stringtofind/stringtoreplace/w filetowriteto' filetoread

sed '/stringtomatch/w filetowriteto' filetoread

sed '0,/firstocurancofstring/s/stringtosubstitue/newstring' filetoread

sed 's/<[^>]*>//' filetoread #anything that begins with < and isnt followed bay a >, has anything before > and it replaces it with nothing

##################################################
Lecture: tee command
##################################################
The tee utility copies standard input to standard output, making a copy in zero or more files.  The output is unbuffered.
tee - read from standard input and write to standard output and files

command | tee filename.txt

command | tee -a file.txt
-a, --append
              append to the given FILEs, do not overwrite

##################################################
Exercise: Use Streams, Pipes, Redirects and Grep
##################################################
Lab One
Copy the contents of /etc/passwd file into ~/myfile.txt.
Display into standard output only the user names in the file, the first column.
Count the number of lines/users that are in the file.
Count the number of words in the file.
Use the split command to generate 256 byte split files of ~/myfile.txt.
Show the differences in the first two files generated using the appropriate command
cat /etc/passwd > myfile.txt
cut -f1 -d: myfile.txt
cat myfile.txt | wc -l
cat myfile.txt |wc -w
split -b 256 myfile.txt
diff xaa xab
Lab Two
On the command line instruct the shell to read from the current input until "stop" is inputted.
Replace all instances of "root" in myfile.txt with "linuxroot" using sed the stream editor.
Using grep for all for all words that start with an r have two wild card characters following and end with t.
Grep all lines that have numbers between 5-9.
cat << stop - enter in any command three times then enter stop.
sed 's/root/linuxroot/g' myfile.txt (s is for replace and g means every occurrence [globally])
grep r..t myfile.txt
cat myfile.txt | grep [5-9]



##################################################
Exercise: Exercise: wc, split, cat, and diff commands
##################################################
1. Using the appropriate command for these exercises (see the title), display the number of files and directories within the /var filesystem (the number only).
root@tcox1:~# ls -al /var
total 52
drwxr-xr-x 13 root root   4096 Aug 22 23:21 .
drwxr-xr-x 23 root root   4096 Sep 28 17:35 ..
drwxr-xr-x  2 root root   4096 Apr 10  2014 backups
drwxr-xr-x 17 root root   4096 Sep  7 15:55 cache
drwxrwxrwt  2 root root   4096 Aug  6 15:31 crash
drwxr-xr-x 57 root root   4096 Sep  7 15:55 lib
drwxrwsr-x  2 root staff  4096 Apr 10  2014 local
lrwxrwxrwx  1 root root      9 Sep 27  2014 lock -> /run/lock
drwxrwxr-x 12 root syslog 4096 Sep 28 17:35 log
drwxrwsr-x  2 root mail   4096 Sep 27  2014 mail
drwxr-xr-x  2 root root   4096 Sep 27  2014 opt
lrwxrwxrwx  1 root root      4 Sep 27  2014 run -> /run
drwxr-xr-x  7 root root   4096 Aug  6 15:52 spool
drwxrwxrwt  2 root root   4096 Sep 28 17:36 tmp
drwxr-xr-x  3 root root   4096 Aug 22 23:21 www
root@tcox1:~# ls -a /var | wc -l
15

2. Display the contents of the /var/log/dmesg (or syslog depending on your distribution) and pipe that to the appropriate command to count the number of lines in the file. Repeat the command only display the number of characters in the same file.
root@tcox1:~# cat /var/log/syslog | wc -l
15666
root@tcox1:~# cat /var/log/syslog | wc -m
1600027

3. Create a directory called 'tmp' in root's home directory. Change to that directory and copy the /etc/fstab file to it. Using the appropriate command, list any differences between that file and the original. Edit the file and append some text to the end and rerun the command, listing and differences between the file in this directory and the original file.
root@tcox1:~# mkdir tmp
root@tcox1:~# cd tmp
root@tcox1:~/tmp# cp /etc/fstab .
root@tcox1:~/tmp# diff fstab /etc/fstab
root@tcox1:~/tmp# echo "Some Text" >> fstab
root@tcox1:~/tmp# diff fstab /etc/fstab
2d1
< Some Text

4. Add a number of new lines to the file in the ~/tmp directory created in Step #3 above. Run a command to list the differences in the original file and pipe that to the command to count the number of changed lines.
root@tcox1:~/tmp# echo "Some Text2" >> fstab
root@tcox1:~/tmp# echo "Some Text32" >> fstab
root@tcox1:~/tmp# echo "Some Text432" >> fstab
root@tcox1:~/tmp# echo "Some Text5432" >> fstab
root@tcox1:~/tmp# diff fstab /etc/fstab
2,6d1
< Some Text
< Some Text2
< Some Text32
< Some Text432
< Some Text5432
root@tcox1:~/tmp# diff fstab /etc/fstab | wc -l
6

5. Using the log file from Step #2 above, create new files from that file, each one 100 bytes in length that start with the word 'bytes'.
Finally, create new files from the log file in Step #2, each one 100 lines in length that start with the word 'lines'.

 root@tcox1:~/tmp# split -l 100 /var/log/syslog lines
root@tcox1:~/tmp# split -b 100 /var/log/syslog bytes
(OUTPUT WILL DIFFER BASED ON SIZE OF LOG - SAMPLE LISTING CONCATENATED FOR SPACE)
-rw-r--r-- 1 root root    100 Sep 28 17:42 byteszwse
-rw-r--r-- 1 root root    100 Sep 28 17:42 byteszwsf
-rw-r--r-- 1 root root    100 Sep 28 17:42 byteszwsg
-rw-r--r-- 1 root root    100 Sep 28 17:42 byteszwsh
-rw-r--r-- 1 root root    100 Sep 28 17:42 byteszwsi
-rw-r--r-- 1 root root    100 Sep 28 17:42 byteszwsj
-rw-r--r-- 1 root root     27 Sep 28 17:42 byteszwsk
-rw-r--r-- 1 root root    111 Sep 28 17:40 fstab
-rw-r--r-- 1 root root  10407 Sep 28 17:43 linesaa
-rw-r--r-- 1 root root  10487 Sep 28 17:43 linesab
-rw-r--r-- 1 root root   9860 Sep 28 17:43 linesac
-rw-r--r-- 1 root root  10113 Sep 28 17:43 linesad
-rw-r--r-- 1 root root  14033 Sep 28 17:43 linesae
-rw-r--r-- 1 root root  10009 Sep 28 17:43 linesaf
-rw-r--r-- 1 root root  10075 Sep 28 17:43 linesag
-rw-r--r-- 1 root root   9785 Sep 28 17:43 linesah
-rw-r--r-- 1 root root  10025 Sep 28 17:43 linesai
-rw-r--r-- 1 root root  14089 Sep 28 17:43 linesaj
(END CONCATENATED OUTPUT)


##################################################
Exercise: Exercise: The Cut Command
##################################################
1. Create a file called 'test.txt' in /root/tmp containing at least five sentences of varying lengths, each sentence on its own line. List the file.
       root@tcox1:~/# mkdir tmp

       root@tcox1:~/# cd tmp/

root@tcox1:~/tmp# vim test.txt
root@tcox1:~/tmp# cat test.txt
Now is the time for all good men to come to the aid of their country
Sally Sell Sea Shells by the Sea Shore
How Many Would a Wood Chuck Chuck if a Wood Chuck Could Chuck Wood
Lorem Ipsum Salt
HULK SMASH!

2. Using the 'cut' command, display only those letters in the 2nd column of that file.
root@tcox1:~/tmp# cut -c2 test.txt
o
a
o
o
U

3. With the appropriate options, display the 3rd through 6th characters of each line (range).
root@tcox1:~/tmp# cut -c3-6 test.txt
w is
lly
w Ma
rem
LK S

4. Extract and display JUST the first eight characters from the beginning of each line.
root@tcox1:~/tmp# cut -c-8 test.txt
Now is t
Sally Se
How Many
Lorem Ip
HULK SMA

5. Using the '/etc/passwd' file, display only the first full field value (username) of each line by indicating which column to cut and identifying the field delimiter in the file.
root@tcox1:~/tmp# cut -d':' -f1 /etc/passwd
root
daemon
bin
sys
sync
games
man
lp
(NOTE: YOUR OUTPUT MAY DIFFER)



##################################################
Exercise: Exercise: The Tee Command
##################################################
1. Make a directory in root's home directory called 'tmp'. Change to that directory. List the contents of the /etc directory such that it displays on the console AND creates a file called 'sysdirs' at the same time.
root@tcox1:~# mkdir tmp
root@tcox1:~# cd tmp
root@tcox1:~/tmp# ls -al /etc | tee sysdirs
total 1064
drwxr-xr-x 126 root root   12288 Sep 28 17:36 .
drwxr-xr-x  23 root root    4096 Sep 28 17:35 ..
drwxr-xr-x   3 root root    4096 Sep 27  2014 acpi
-rw-r--r--   1 root root    2981 Sep 27  2014 adduser.conf
-rw-r--r--   1 root root      10 Sep 27  2014 adjtime
drwxr-xr-x   2 root root    4096 Aug 26 15:49 alternatives
drwxr-xr-x   8 root root    4096 Sep 28 17:35 apache2
-rw-r--r--   1 root root     112 Jan 10  2014 apg.conf
drwxr-xr-x   3 root root    4096 Sep 27  2014 apm
drwxr-xr-x   3 root root    4096 Aug 15 14:54 apparmor
drwxr-xr-x   8 root root    4096 Sep 28 17:35 apparmor.d
drwxr-xr-x   5 root root    4096 Sep 28 17:35 apport
drwxr-xr-x   6 root root    4096 Sep 10 18:44 apt
-rw-r-----   1 root daemon   144 Oct 21  2013 at.deny
(NOTE OUTPUT CONCATENATED FOR SPACE)
root@tcox1:~/tmp# ll
total 24
drwxr-xr-x 2 root root  4096 Sep 28 18:06 ./
drwx------ 8 root root  4096 Sep 28 18:06 ../
-rw-r--r-- 1 root root 12809 Sep 28 18:06 sysdirs

2. Using the 'tee' command, list the contents of the '/var' directory and make sure those are appended to the 'sysdirs' file from Step #1.
root@tcox1:~/tmp# ls -al /var | tee -a sysdirs
total 52
drwxr-xr-x 13 root root   4096 Aug 22 23:21 .
drwxr-xr-x 23 root root   4096 Sep 28 17:35 ..
drwxr-xr-x  2 root root   4096 Apr 10  2014 backups
drwxr-xr-x 17 root root   4096 Sep  7 15:55 cache
drwxrwxrwt  2 root root   4096 Aug  6 15:31 crash
drwxr-xr-x 57 root root   4096 Sep  7 15:55 lib
drwxrwsr-x  2 root staff  4096 Apr 10  2014 local
lrwxrwxrwx  1 root root      9 Sep 27  2014 lock -> /run/lock
drwxrwxr-x 12 root syslog 4096 Sep 28 17:35 log
drwxrwsr-x  2 root mail   4096 Sep 27  2014 mail
drwxr-xr-x  2 root root   4096 Sep 27  2014 opt
lrwxrwxrwx  1 root root      4 Sep 27  2014 run -> /run
drwxr-xr-x  7 root root   4096 Aug  6 15:52 spool
drwxrwxrwt  2 root root   4096 Sep 28 17:36 tmp
drwxr-xr-x  3 root root   4096 Aug 22 23:21 www
root@tcox1:~/tmp# ll
total 24
drwxr-xr-x 2 root root  4096 Sep 28 18:06 ./
drwx------ 8 root root  4096 Sep 28 18:06 ../
-rw-r--r-- 1 root root 13570 Sep 28 18:08 sysdirs

3. List the contents of the '/var/log' directory and making sure that the 'tee' command is used to create three copies of it called 'copy1', 'copy2' and 'copy3' in the same command.
root@tcox1:~/tmp# ls -al /var/log | tee copy1 copy2 copy3
total 52
drwxr-xr-x 13 root root   4096 Aug 22 23:21 .
drwxr-xr-x 23 root root   4096 Sep 28 17:35 ..
drwxr-xr-x  2 root root   4096 Apr 10  2014 backups
drwxr-xr-x 17 root root   4096 Sep  7 15:55 cache
drwxrwxrwt  2 root root   4096 Aug  6 15:31 crash
drwxr-xr-x 57 root root   4096 Sep  7 15:55 lib
drwxrwsr-x  2 root staff  4096 Apr 10  2014 local
lrwxrwxrwx  1 root root      9 Sep 27  2014 lock -> /run/lock
drwxrwxr-x 12 root syslog 4096 Sep 28 17:35 log
drwxrwsr-x  2 root mail   4096 Sep 27  2014 mail
drwxr-xr-x  2 root root   4096 Sep 27  2014 opt
lrwxrwxrwx  1 root root      4 Sep 27  2014 run -> /run
drwxr-xr-x  7 root root   4096 Aug  6 15:52 spool
drwxrwxrwt  2 root root   4096 Sep 28 17:36 tmp
drwxr-xr-x  3 root root   4096 Aug 22 23:21 www
root@tcox1:~/tmp# ll
total 36
drwxr-xr-x 2 root root  4096 Sep 28 18:08 ./
drwx------ 8 root root  4096 Sep 28 18:06 ../
-rw-r--r-- 1 root root   761 Sep 28 18:08 copy1
-rw-r--r-- 1 root root   761 Sep 28 18:08 copy2
-rw-r--r-- 1 root root   761 Sep 28 18:08 copy3
-rw-r--r-- 1 root root 13570 Sep 28 18:08 sysdirs

4. Display the directory structure we have just created in 'tmp' and use 'tee' to write that to a file called 'final.exercise' at the same time.
root@tcox1:~/tmp# ls -al | tee final.exercise
total 36
drwxr-xr-x 2 root root  4096 Sep 28 18:19 .
drwx------ 8 root root  4096 Sep 28 18:06 ..
-rw-r--r-- 1 root root   761 Sep 28 18:08 copy1
-rw-r--r-- 1 root root   761 Sep 28 18:08 copy2
-rw-r--r-- 1 root root   761 Sep 28 18:08 copy3
-rw-r--r-- 1 root root     0 Sep 28 18:19 final.exercise
-rw-r--r-- 1 root root 13570 Sep 28 18:08 sysdirs
root@tcox1:~/tmp# cat final.exercise
total 36
drwxr-xr-x 2 root root  4096 Sep 28 18:19 .
drwx------ 8 root root  4096 Sep 28 18:06 ..
-rw-r--r-- 1 root root   761 Sep 28 18:08 copy1
-rw-r--r-- 1 root root   761 Sep 28 18:08 copy2
-rw-r--r-- 1 root root   761 Sep 28 18:08 copy3
-rw-r--r-- 1 root root     0 Sep 28 18:19 final.exercise
-rw-r--r-- 1 root root 13570 Sep 28 18:08 sysdirs



##################################################
Exercise: Exercise: File Streams and Redirects
##################################################

1. Create a new directory in user's home directory called 'redirection'. Change to that directory. Issue a directory listing command for the /etc directory and redirect that to a file called 'etc.list' in such a way that the file content would be overwritten if it existed.
[user@tcox3 ~]$ mkdir redirection
[user@tcox3 ~]$ cd redirection
[user@tcox3 redirection]$ ls /etc > etc.list
[user@tcox3 redirection]$ cat etc.list
adjtime
aliases
alternatives
anacrontab
ansible
asound.conf
at.deny
at-spi2
audisp
audit
avahi
bash_completion.d
bashrc
binfmt.d
bluetooth
bonobo-activation
centos-release
(NOTE: Sample Output - Actual output should be longer)

2. Issue a full directory listing command (with all file and directory attributes) for the /etc directory. Redirect the output to a file called 'etc.full' that would append the contents if it existed. Issue another command to list the /etc/ssh directory contents, redirecting to the same file. Ensure that the contents are appended and not overwritten.
[user@tcox3 redirection]$ ls -al /etc >> etc.full
[user@tcox3 redirection]$ cat etc.full
total 1424
drwxr-xr-x. 118 root root     8192 Sep 24 09:56 .
dr-xr-xr-x.  18 root root     4096 Jun  3 13:08 ..
-rw-r--r--.   1 root root       16 Jun  3 10:03 adjtime
-rw-r--r--.   1 root root     1518 Jun  7  2013 aliases
drwxr-xr-x.   2 root root     4096 Sep 21 12:26 alternatives
-rw-------.   1 root root      541 Jul 30  2014 anacrontab
drwxr-xr-x    3 root root       48 Sep 21 12:23 ansible
-rw-r--r--.   1 root root       55 Mar  5  2015 asound.conf
-rw-r--r--.   1 root root        1 Oct  7  2014 at.deny
drwxr-xr-x.   2 root root       31 Mar 31 03:52 at-spi2
drwxr-x---.   3 root root       41 Mar 31 03:51 audisp
drwxr-x---.   3 root root       79 Jun  3 10:07 audit
(NOTE: Actual output will be longer, truncated for space purposes)
[user@tcox3 redirection]$ ls -al /etc/ssh >> etc.full
[user@tcox3 redirection]$ tail etc.full
-rw-r--r--.  1 root root     242153 Mar 21  2016 moduli
-rw-r--r--.  1 root root       2208 Mar 21  2016 ssh_config
-rw-r--r--.  1 root root       4760 Nov  5 18:24 sshd_config
-rw-------.  1 root root       4361 May 12  2015 sshd_config.rpmnew
-rw-r-----.  1 root ssh_keys    227 Dec 19  2014 ssh_host_ecdsa_key
-rw-r--r--.  1 root root        162 Dec 19  2014 ssh_host_ecdsa_key.pub
-rw-r-----.  1 root ssh_keys    387 Aug  6  2015 ssh_host_ed25519_key
-rw-r--r--.  1 root root         82 Aug  6  2015 ssh_host_ed25519_key.pub
-rw-r-----.  1 root ssh_keys   1675 Dec 19  2014 ssh_host_rsa_key
-rw-r--r--.  1 root root        382 Dec 19  2014 ssh_host_rsa_key.pub


##################################################
Exercise: Exercise: Manipulating Text at the Command Line
##################################################
1.From your user's home directory, create a directory called 'exercises'. Change to that directory. Using any of the commands from our videos on the subject, create two '0' byte files called 'test1.txt' and 'test2.txt'. List them with all attributes.
user@linuxacademy:~$ mkdir exercises
user@linuxacademy:~$ cd exercises
user@linuxacademy:~/exercises$ touch test1.txt test2.txt
OR
user@linuxacademy:~/exercises$ echo "" > test1.txt (and then test2.txt)
user@linuxacademy:~/exercises$ ls -al
(Output)
total 8
drwxrwxr-x  2 user user 4096 Aug  8 18:10 .
drwxr-xr-x 36 user user 4096 Aug  8 18:10 ..
-rw-rw-r--  1 user user    0 Aug  8 18:10 test1.txt
-rw-rw-r--  1 user user    0 Aug  8 18:10 test2.txt
(Output) NOTE: Your output may differ slightly

2. Using redirection, list the contents of the current directory and redirect that output into the test1.txt file.
user@linuxacademy:~/exercises$ ls -al > test1.txt

3. Using redirection, add the command line output message "Hello World" to the file 'test2.txt'.
user@linuxacademy:~/exercises$ echo "Hello World" > test2.txt

4. Concatenate the contents of the two files 'test1.txt' and 'test2.txt' into a single file called 'test3.txt'.
user@linuxacademy:~/exercises$ cat test1.txt test2.txt > test3.txt

5. List the contents of the resulting directory and take that output and append it to the 'test3.txt' file.
user@linuxacademy:~/exercises$ ls -al >> test3.txt
user@linuxacademy:~/exercises$ cat test3.txt
(Output)
total 8
drwxrwxr-x  2 user user 4096 Aug  8 18:10 .
drwxr-xr-x 36 user user 4096 Aug  8 18:10 ..
-rw-rw-r--  1 user user    0 Aug  8 18:10 test1.txt
-rw-rw-r--  1 user user    0 Aug  8 18:10 test2.txt
Hello World
drwxrwxr-x  2 user user 4096 Aug  8 18:10 .
drwxr-xr-x 36 user user 4096 Aug  8 18:10 ..
-rw-rw-r--  1 user user    0 Aug  8 18:10 test1.txt
-rw-rw-r--  1 user user    0 Aug  8 18:10 test2.txt
-rw-rw-r--  1 user user    0 Aug  8 18:10 test3.txt
(Output)


##################################################
Exercise: Exercise: Using SED for Text Substitution
##################################################
1. Using any method of creation you choose, create a text file called 'test.txt' with the following contents:
Now is the time for all good men to come to the aid of their country
1
11
111
11
1
World at war
World peace
World domination
user@linuxacademy:~$ vim test.txt
>> In CMD Mode, press 'i' to insert
>> Type or copy/paste the above text into the file
>> Press 'ESC', then ':wq' to save and exit the file

2. Using the one of the commands from our video tutorials, display the contents of this file so that the numbers in the middle will display in order from lowest number to highest number.
user@linuxacademy:~$ cat test.txt | sort -n
(Output)
Now is the time for all good men to come to the aid of their country
World at war
World domination
World peace
1
1
11
11
111
(Output)

3. Using the same command from #2, add an additional command that will take the output and remove any lines that are repeated.
user@linuxacademy:~$ cat test.txt | sort -n | uniq
(Output)
Now is the time for all good men to come to the aid of their country
World at war
World domination
World peace
1
11
111
(Output)

4. Display the contents of the 'test.txt' file to the console, but replace all occurences of the word "World" with the word "Global".
user@linuxacademy:~$ sed 's/World/Global/g' test.txt
(Output)
Now is the time for all good men to come to the aid of their country
1
11
111
11
1
Global at war
Global peace
Global domination
(Output)

5. Manipulate the content of the 'test.txt' file so that all occurences of the letter 'o' are capitalized. Using redirection, take the result of that command and create a new file called 'mytest.txt'. Display that file and verify the change in case to the letters.
user@linuxacademy:~$ sed 's/[oO]/O/g' test.txt > mytest.txt && cat mytest.txt
NOTE: You can use two lines to accomplish the same thing (i.e. 'cat' on a separate line)
(Output)
NOw is the time fOr all gOOd men tO cOme tO the aid Of their cOuntry
1
11
111
11
1
WOrld at war
WOrld peace
WOrld dOminatiOn
(Output)


##################################################
Exercise: Exercise: Grep, Egrep and Fgrep
##################################################
1. Logged in as user, obtain a full listing of all processes running on the system and filter the results so that only processes that contain the keyword 'ssh' are included in the output results.
[user@tcox3 redirection]$ ps aux | grep ssh
root       621  0.0  0.0  82508  3600 ?        Ss   09:56   0:00 /usr/sbin/sshd -D
user      2452  0.0  0.0  52836   576 ?        Ss   09:56   0:00 /usr/bin/ssh-agent /bin/sh -c exec -l /bin/bash -c "env GNOME_SHELL_SESSION_MODE=classic gnome-session --session gnome-classic"
user      3190  0.0  0.0 112640   960 pts/0    R+   10:08   0:00 grep --color=auto ssh

2. Noticing that the actual command run to display those processes is one of the results, rerun the command from Step #1, but pipe it to another command to filter out the grep command itself.
[user@tcox3 redirection]$ ps aux | grep ssh | grep -v grep
root       621  0.0  0.0  82508  3600 ?        Ss   09:56   0:00 /usr/sbin/sshd -D
user      2452  0.0  0.0  52836   576 ?        Ss   09:56   0:00 /usr/bin/ssh-agent /bin/sh -c exec -l /bin/bash -c "env GNOME_SHELL_SESSION_MODE=classic gnome-session --session gnome-classic"

3. Run a command to list all processes, piping the results in order to display only processes that have a '[' (open square bracket character). You want to save cpu cycles so make sure you are not using a regular expression.
[user@tcox3 redirection]$ ps aux | fgrep [
root         2  0.0  0.0      0     0 ?        S    12:07   0:00
[
kthreadd]

root         3  0.0  0.0      0     0 ?        S    12:07   0:00
[
ksoftirqd/0]

root         5  0.0  0.0      0     0 ?        S<   12:07   0:00
[
kworker/0:0H]

root         6  0.0  0.0      0     0 ?        S    12:07   0:00
[
kworker/u30:0]

root         7  0.0  0.0      0     0 ?        S    12:07   0:00
[
migration/0]

root         8  0.0  0.0      0     0 ?        S    12:07   0:00
[
rcu_bh]

root         9  0.0  0.0      0     0 ?        S    12:07   0:00
[
rcuob/0]

root        10  0.0  0.0      0     0 ?        S    12:07   0:00
[
rcuob/1]

root        11  0.0  0.0      0     0 ?        S    12:07   0:00
[
rcuob/2]

root        12  0.0  0.0      0     0 ?        S    12:07   0:00
[
rcuob/3]

...


4. Once again, run a command listing all processes, but use a command that allows extended regular expressions to display all processes running that contain two consecutive 's' characters in them.
[user@tcox3 redirection]$ ps aux | egrep ss
dbus       492  0.0  0.0  29764  2840 ?        Ss   09:56   0:00 /bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation
root       621  0.0  0.0  82508  3600 ?        Ss   09:56   0:00 /usr/sbin/sshd -D
root      2259  0.0  0.1 373980  5468 ?        Sl   09:56   0:00 gdm-session-worker [pam/gdm-password]
user      2267  0.0  0.3 860364 13240 ?        Ssl  09:56   0:00 gnome-session --session gnome-classic
user      2275  0.0  0.0  13944   608 ?        S    09:56   0:00 dbus-launch --sh-syntax --exit-with-session
user      2276  0.0  0.0  29732  1788 ?        Ss   09:56   0:00 /bin/dbus-daemon --fork --print-pid 4 --print-address 6 --session
user      2436  0.0  0.0 143760   284 ?        S    09:56   0:00 /usr/bin/VBoxClient --seamless
user      2437  0.0  0.0 209960  1036 ?        Sl   09:56   0:00 /usr/bin/VBoxClient --seamless
user      2452  0.0  0.0  52836   576 ?        Ss   09:56   0:00 /usr/bin/ssh-agent /bin/sh -c exec -l /bin/bash -c "env GNOME_SHELL_SESSION_MODE=classic gnome-session --session gnome-classic"
user      2471  0.0  0.0  28644  1568 ?        S    09:56   0:00 /bin/dbus-daemon --config-file=/etc/at-spi2/accessibility.conf --nofork --print-address 3
user      2475  0.0  0.0 129656  3340 ?        Sl   09:56   0:00 /usr/libexec/at-spi2-registryd --use-gnome-session
user      2707  0.0  0.3 893084 12992 ?        Sl   09:56   0:00 /usr/libexec/evolution-addressbook-factory
user      3248  0.0  0.0 112640   960 pts/0    R+   10:11   0:00 grep -E --color=auto ss

5. Try the other two methods of obtaining the same results in Step #3.
 [user@tcox3 redirection]$ ps aux | egrep s{2}
dbus       492  0.0  0.0  29764  2840 ?        Ss   09:56   0:00 /bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation
root       621  0.0  0.0  82508  3600 ?        Ss   09:56   0:00 /usr/sbin/sshd -D
root      2259  0.0  0.1 373980  5468 ?        Sl   09:56   0:00 gdm-session-worker [pam/gdm-password]
user      2267  0.0  0.3 860364 13240 ?        Ssl  09:56   0:00 gnome-session --session gnome-classic
user      2275  0.0  0.0  13944   608 ?        S    09:56   0:00 dbus-launch --sh-syntax --exit-with-session
user      2276  0.0  0.0  29732  1788 ?        Ss   09:56   0:00 /bin/dbus-daemon --fork --print-pid 4 --print-address 6 --session
user      2436  0.0  0.0 143760   284 ?        S    09:56   0:00 /usr/bin/VBoxClient --seamless
user      2437  0.0  0.0 209960  1036 ?        Sl   09:56   0:00 /usr/bin/VBoxClient --seamless
user      2452  0.0  0.0  52836   576 ?        Ss   09:56   0:00 /usr/bin/ssh-agent /bin/sh -c exec -l /bin/bash -c "env GNOME_SHELL_SESSION_MODE=classic gnome-session --session gnome-classic"
user      2471  0.0  0.0  28644  1568 ?        S    09:56   0:00 /bin/dbus-daemon --config-file=/etc/at-spi2/accessibility.conf --nofork --print-address 3
user      2475  0.0  0.0 129656  3340 ?        Sl   09:56   0:00 /usr/libexec/at-spi2-registryd --use-gnome-session
user      2707  0.0  0.3 893084 12992 ?        Sl   09:56   0:00 /usr/libexec/evolution-addressbook-factory
user      3248  0.0  0.0 112640   960 pts/0    R+   10:11   0:00 grep -E --color=auto ss
[user@tcox3 redirection]$ ps aux | grep -E ss
dbus       492  0.0  0.0  29764  2840 ?        Ss   09:56   0:00 /bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation
root       621  0.0  0.0  82508  3600 ?        Ss   09:56   0:00 /usr/sbin/sshd -D
root      2259  0.0  0.1 373980  5468 ?        Sl   09:56   0:00 gdm-session-worker [pam/gdm-password]
user      2267  0.0  0.3 860364 13240 ?        Ssl  09:56   0:00 gnome-session --session gnome-classic
user      2275  0.0  0.0  13944   608 ?        S    09:56   0:00 dbus-launch --sh-syntax --exit-with-session
user      2276  0.0  0.0  29732  1788 ?        Ss   09:56   0:00 /bin/dbus-daemon --fork --print-pid 4 --print-address 6 --session
user      2436  0.0  0.0 143760   284 ?        S    09:56   0:00 /usr/bin/VBoxClient --seamless
user      2437  0.0  0.0 209960  1036 ?        Sl   09:56   0:00 /usr/bin/VBoxClient --seamless
user      2452  0.0  0.0  52836   576 ?        Ss   09:56   0:00 /usr/bin/ssh-agent /bin/sh -c exec -l /bin/bash -c "env GNOME_SHELL_SESSION_MODE=classic gnome-session --session gnome-classic"
user      2471  0.0  0.0  28644  1568 ?        S    09:56   0:00 /bin/dbus-daemon --config-file=/etc/at-spi2/accessibility.conf --nofork --print-address 3
user      2475  0.0  0.0 129656  3340 ?        Sl   09:56   0:00 /usr/libexec/at-spi2-registryd --use-gnome-session
user      2707  0.0  0.3 893084 12992 ?        Sl   09:56   0:00 /usr/libexec/evolution-addressbook-factory
user      3248  0.0  0.0 112640   960 pts/0    R+   10:11   0:00 grep -E --color=auto ss



##################################################
Linux System Management and Architecture Topics
##################################################
##################################################
Lecture: /sys, /proc, /dev and /var
##################################################
/sys
Systemwide device directory. Contains information and statistics about device and device names. This is newly added to Linux with the 2.6.X kernels.
maintains configuration information about our devices



/proc
Process directory. Contains information and statistics about running processes and kernel parameters.
/proc/<pid>  #this is where the running process informations is saved

/proc/modules #is a file that contains all are loaded devices, like lsmod

/proc is very special in that it is also a virtual filesystem.
It's sometimes referred to as a process information pseudo-file system. It doesn't contain 'real' files but runtime system information (e.g. system memory, devices mounted, hardware configuration, etc).
For this reason it can be regarded as a control and information centre for the kernel. In fact, quite a lot of system utilities are simply calls to files in this directory. For example, 'lsmod' is the same as 'cat /proc/modules' while 'lspci' is a synonym for 'cat /proc/pci'. By altering files located in this directory you can even read/change kernel parameters (sysctl) while the system is running.




/dev
Device directory. Entries (but not mount points) for physical and virtual devices.

#you can cat a file directly to a device file in proc, an example is a file to a printer

entrapie and uram



/var
Variable (changeable) system files. This is a catchall "scratchpad" directory for data generated while a Linux/UNIX machine is running.

/var/log
Systemwide log files.

dmessage

inside of var you will seee some files and dirs that are owned by whoopsi,
In Ubuntu, whoopsie is a daemon that is responsible for collecting error reports from apport and then sending that report to Canonical if the user agrees to this in the apport confirmation dialog.

/var/cache #the most common thing you will find in here is repo caches
/var/cache is intended for cached data from applications. Such data is locally generated as a result of time-consuming I/O or calculation. The application must be able to regenerate or restore the data. Unlike /var/spool, the cached files can be deleted without data loss.
#on rpm based systems its the /var/cache/yum dir

#bleachbit it a good tool that removes unnecessary files
sudo apt-get install bleachbit

/var/lib #Variable state information, This hierarchy holds state information pertaining to an application or the system. State information is data that programs modify while they run, and that pertains to one specific host. Users must never need to modify files in /var/lib to configure a package's operation.
contains all of our libraries

htop

##################################################
Lecture: lsmod
##################################################
lsmod - Show the status of modules in the Linux Kernel

lsmod is a trivial program which nicely formats the contents of the /proc/modules, showing what kernel
      modules are currently loaded.

/proc/modules #this is where lsmod gets its info, it nicely formats this file


##################################################
Lecture: lspci and lsusb
##################################################
lspci - list all PCI devices

lspci  is  a  utility  for  displaying information about PCI buses in the system and devices connected to them.

lspci -v #-v is verbose

lspci -vv #more verbose

lspci -vvv #and even more

lspci -t #tree view

/usr/share/misc/pci.ids  # A list of all known PCI ID's (vendors, devices, classes and subclasses). Maintained at http://pci‐
              ids.sourceforge.net/, use the update-pciids utility to download the most recent version.


lsusb - list USB devices

lsusb  is a utility for displaying information about USB buses in the system and the devices connected to them.

/var/lib/usbutils/usb.ids
              A list of all known USB ID's (vendors, products, classes, subclasses and protocols).

lsusb -t #tree


##################################################
Lecture: modprobe and insmod
##################################################
modprobe - Add and remove modules from the Linux Kernel

lsmod #is taking over for modprobe -l

all tools for listing are going to ls, lspci, lsusb ...

modprobe -r floppy #-r, --remove Remove modules instead of inserting, we dont need to pass a location because it will only look for inserted nodules but to add we need a path

insmod - Simple program to insert a module into the Linux Kernel

insmod is a trivial program to insert a module into the kernel. Most users will want to use modprobe(8) instead, which is more clever
       and can handle module dependencies.

insmod /lib/modules/4.4.0-62-generic/kernel/drivers/block/floppy.ko  #to insert a module


##################################################
Lecture: Grub Boot loader
##################################################
its the default bootloader for linux

GRUB(the grand unified bootloader) is a bootloder designed to boot multiple systems across a wide swath of hardware platforms and operating systems

bootloaders in general are small pieces of executable code which provide just enough functionality to call another bootloader or to hand control of the CPU to the operating system

bootloaders allow us to make changes to the system environment prior to the operating system being loaded

bootloaders can be installed on disks, partitions, loopback devices -anything from which a pc might boot

adding boot parameters: GRUB2
changes to GRUBs configuration should be made in one of the following files:
-/etc/sysconfig/grub #how your menuing system is built
-/etc/grub.d/  #this is how your system users grub

the configuration does not take effect until the /etc/grub2.cfg (for BIOS systems) or /etc/grub2-efi.cfg (for EFI systems) has been updated

the GRUB2 configuration can be updated using the "grub2-mkconfig" command.
the file can also be edited manually

be sure to take a look at the GRUB2 manual
https://www.gnu.org/software/grub/manual/grub.html

vim /etc/default/grub
#GRUB_HIDDEN_TIMEOUT=0
#GRUB_HIDDEN_TIMEOUT_QUIET=true
#to get your grub menu to pop up on your system we just need to comment these 2 things out

/etc/grub.d  #where youre list information is located

#to add a custom menu option you can copy a menu item  and place it between one of the other numbers

vim 15_thefileyoumade
below set -e

echo "adding my comment here" >&2

:wq

sudo update-grub


##################################################
Lecture: Differentiate and Optimize Storage and Input
##################################################
#just to be able to to tell where and what storage is available to us

cd /dev

df -h

cat /etc/fstab

blkid  #blkid - locate/print block device attributes

The  blkid  program  is the command-line interface to working with the libblkid(3) library.  It can determine the type of content (e.g.
       filesystem or swap) that a block device holds, and also the attributes (tokens, NAME=value pairs) from the content metadata (e.g. LABEL
       or UUID fields).

       It  is  recommended  to use lsblk(8) command to get information about block devices rather than blkid.  lsblk(8) provides more informa‐
       tion, better control on output formatting and it does not require root permissions to get actual information.

The  standard  location  of  the  /etc/blkid.conf  config file can be overridden by the environment variable BLKID_CONF.


cat /dev/disk/by-uuid #the entries in this directory will be the uuids of the storage on your system


##################################################
Lecture: Differentiate and Demonstrate Hot and Cold Plug Devices
##################################################
Cold plugging refers to the situation where a computer must be powered down in order to add or remove a component or to allow a device to synchronize data with the computer.
examples:
cpu
memory
pci
non-usb storage

Hotplug lets you plug in new devices and use them immediately
USB hard drive
usb memory stick
some firewire devices
printers

HAL is responsible for picking these devices up


##################################################
Lecture: Determine Hardware Device Resources
##################################################
the /proc files system looks like a normal file system, but thats how linux deals with everything, everything is a file or a folder

/proc/mount #mounted device information

/proc/cpu #cpu

/proc/iomem #memory


##################################################
Lecture: Filesystem Hierarchy Standard
##################################################
FHS #file system hierarchy standard, a standard layout of the files system structure and are standard across distros
https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard

/bin #Essential command binaries that need to be available in single user mode; for all users, e.g., cat, ls, cp.

/boot #Boot loader files, e.g., kernels, initrd.

/dev #Essential device files, e.g., /dev/null.

/etc #Host-specific system-wide configuration files
There has been controversy over the meaning of the name itself.
In early versions of the UNIX Implementation Document from Bell labs, /etc is referred to as the etcetera directory,[3] as this directory historically held everything that did not belong elsewhere (however, the FHS restricts /etc to static configuration files and may not contain binaries).[4]
Since the publication of early documentation, the directory name has been re-explained in various ways.
Recent interpretations include backronyms such as "Editable Text Configuration" or "Extended Tool Chest".[5]

/home #Users' home directories, containing saved files, personal settings, etc.


/lib #Libraries essential for the binaries in /bin/ and /sbin/.

/media #Mount points for removable media such as CD-ROMs (appeared in FHS-2.3).

/mnt #Temporarily mounted filesystems.

/opt #Optional application software packages.[6]

/proc #Virtual filesystem providing process and kernel information as files. In Linux, corresponds to a procfs mount.

/root #Home directory for the root user.

/sbin #Essential system binaries, e.g., fsck, init, route.

/srv #Site-specific data served by this system, such as data and scripts for web servers, data offered by FTP servers, and repositories for version control systems.

/tmp #Temporary files (see also /var/tmp). Often not preserved between system reboots, and may be severely size restricted.

/usr #Secondary hierarchy for read-only user data; contains the majority of (multi-)user utilities and applications.[7]

/usr/local #Tertiary hierarchy for local data, specific to this host. Typically has further subdirectories, e.g., bin/, lib/, share/.[8]

/usr/sbin #Non-essential system binaries, e.g., daemons for various network-services.

/usr/share #Architecture-independent (shared) data.

/usr/src #Source code, e.g., the kernel source code with its header files.

/var #Variable files—files whose content is expected to continually change during normal operation of the system—such as logs, spool files, and temporary e-mail files.


##################################################
Lecture: System Boot Process
##################################################
/var/log/messages #boot logs

#Linux boot process
1.BIOS(Basic Input/Output System)
      2.MBR(Master Boot Record)
      3.LILO or GRUB ##sector zero
          LILO:-LInux LOader
          GRUB:-GRand Unified Bootloader
      4.Kernel
      5.init #user space, process id 1, its the parent process for all other processes
     6.Run Levels








what are irqs and  dmas



##################################################
Lecture: Init and Telinit
##################################################
systemd, init - systemd system and service manager
In Unix-based computer operating systems, init (short for initialization) is the first process started during booting of the computer system. Init is a daemon process that continues running until the system is shut down.

Run Level	Mode	Action
0	Halt	Shuts down system
1	Single-User Mode	Does not configure network interfaces, start daemons, or allow non-root logins
2	Multi-User Mode	Does not configure network interfaces or start daemons.
3	Multi-User Mode with Networking	Starts the system normally.
4	Undefined	Not used/User-definable
5	X11	As runlevel 3 + display manager(X)
6	Reboot	Reboots the system

it used to be that telinit was a link to init

the correct way to change run levels is to use telinit

telinit # telinit may be used to change the SysV system runlevel. Since the concept of SysV runlevels is obsolete the runlevel requests will be
       transparently translated into systemd unit activation requests.


ll *nit /sbin



##################################################
Exercise: Linux System Management and Architecture Topics
##################################################
LAB ONE

1.  Find the log file, that corresponds to the output of the command dmesg and copy it into an output file named 'file.out' in user's home directory.
sudo cat /var/log/syslog >> /home/user/file.out
sudo cat /var/log/dmesg >> /home/user/file.out

NOTE: In some distributions the location of the log file that dmesg uses is the syslog and in others it is the /var/log/dmesg.
2.
Write a command that obtains the PID of any process owned by 'user'. Use that PID to look up the current envrionment variables of the process as listed in one of the special directories in this lesson.

ps aux | grep processname
sudo cat /proc/PID/environ >> file.out

3. From a command line, list all currently enabled modules on the system.
Determine if your system has a module enabled for the network filesystem. If yes, what is the name?
lsmod >> file.out
lsmod | grep nfs
lsmod | grep nfs >> file.out
4. Use the
lspci
 command to list all the devices on your system, in verbose mode and containing all IRQ or address information.

lspci -v -x
5. Use the default
pci.ids
 file for vendor/device ID lookups and create your own version. Rewrite some of the information in that new file, passing it into the
lspci
 command and display the output.

cp /usr/share/hwdata/pci.ids /home/username/my.ids
lspci -x -i /home/username/my.ids | grep MODULECHANGED

LAB TWO

1. Using some of the commands we have learned thus far, find a filesystem module that is LOADED but you know is NOT in use. Identify its module name below:
lsmod | grep "0 $"

NOTE: We can use grep to search for a 0 and a space at the end of the line, signifying that a module is not in use

lsmod | grep "0 $" | grep fs

NOTE: We can use grep again to look for lines that have "fs" in them.


echo isofs >> file.out

2. Now unload that module and verify it is no longer loaded in the kernel. List the steps to unload the module and how you verified it was no longer loaded.
sudo modprobe -r (or --remove or rmmod) isofs
lsmod | grep isofs
3. Without using
modprobe
, reload and verify that recently removed module. List the steps to load the module and how you verified it was now loaded.

sudo insmod /usr/lib/modules/`uname -r`/kernel/fs/isofs/isofs.ko

lsmod | grep isofs

NOTE: `uname -r` is a handy shortcut to lookup the version number of the kernel and insert it into the path. If you know the correct path already,


##################################################
Managing Files in Linux
##################################################
##################################################
Lecture: File Naming Basics And A Look At File Commands
##################################################
mkdir fileext
cd fileext
nano test.txt
nano test.TXT
nano TEST.TXT

#create a file with a space
nano file\ has\ spaces

#the file name length depends on what files system you are using
ext3 the max length is 255 char limit
ext4

#files that begin with a .
vim .test.txt

. files are used for storing common configuration files
ls excludes . files

ls -a #-a, --all
              do not ignore entries starting with .

? #wildcard that stands for a single character

* #wildcard an number of characters

l[obc][obs]k #file globbing

l[a-z][a-z]k #this will find anything from a-z

ls -F # -F, --classify
              append indicator (one of */=>@|) to entries

/ directory
@ symbolic link
= socket
| is just a pipe


ls -R # -R, --recursive list subdirectories recursively

cp file file2

cp -p #-p same as --preserve=mode,ownership,timestamps

cp -a #-a, --archive same as -dR --preserve=all #preserves ownership and permissions and is recursive


cp -R #-R, -r, --recursive copy directories recursively

cp -i #-i, --interactive prompt before overwrite (overrides a previous -n option)

cp -u #-u, --update copy only when the SOURCE file is newer than the destination file or when the destination file is missing


##################################################
Lecture: File Archiving & The RM, MV Commands
##################################################
most of the flags for cp and mv are the same
mv # mv - move (rename) files

if you move on a different partition it rewrites the file on the new partition then deletes the original
if you are moving in the same partition it rewrites the directory entries for that partition

rm #this removes files

rm -R and rm -r #do the same thing, its recursive

tar #file archiving, Tar stores and extracts files from a tape or disk archive.

-c #-c, --create create a new archive

-A #-A, --catenate, --concatenate append tar files to an archive

-r #-r, --append append files to the end of an archive

-u #-u, --update only append files newer than copy in archive

-d #-d, --diff, --compare find differences between archive and file system

-t #list contents

-x #-x, --extract, --get extract files from an archive

-v #verbose

tar -cvfz

tar xvfx tar -C /dir #to extract the tar inro another directory



tar #a linux utility that archives things. it does not compress or compact files. it just sticks all your files together into one file
traditionally tar was used to create tape backups.  we used it to archive data on a tape backup drives.  tar actually stands for "tape archive"

7zip will work on linux

tar
tar -cf = create file
tar -xf = extract file

tar -cf <directoryname.tar>  # to create a file

tar -xf <directoryname.tar>  # to extract a file

tar -cf <files.tar> file.txt file2.txt #this is how to add individual files to a tar

##################################################
Lecture: The gunzip Command
##################################################
3 primary ways to compress
compress   uncompress
gzip = gunzip
bzip2 = bunzip
zip = unzip

zip zipfile.zip file.txt
unzip zipfile.zip

zip -r zipdirectory.zip directory
unzip zipdirectory.zip

these are the prefered methods to compress files in linux
tar -cf directory.tar directory

gzip directory.tar

gunzip directory.tar.gz #we will get the tar file

tar -xvf directory.tar #the v is for verbose, the order of operations matters with tar

bzip
bzip2 directory.tar.bz2

bunzip2 directory.tar.bz2

we can also call on the compression algorithm types when using the tar utility with option flags
tar -zcf file.tar.gz  file.tgz
tar -jcf file.tar.bz2 or file.tb2


##################################################
Lecture: The gunzip Command
##################################################
gzip <directory> #gzip -- compression/decompression tool using Lempel-Ziv coding (LZ77)


gunzip <gzip> #no need to ad the .gz as gunzip will recognize it

          <what you want your tar named>
tar -cvzf homedir.tar.gz  home

gunzip homedir.tar.gz, this will become homedir.tar

we can now compress the tar with gzip


##################################################
Lecture: Linux Links
##################################################
Hard Link acts like a mirror copy of the original file. These links share the same inodes.
Changes made to the original or hard linked file will reflect in the other.
When you delete Hard Link nothing will happen to the other file. Hard links can't cross file systems.

What are Hard Links

1. Hard Links have same inodes number.
2. ls -l command shows all the links with the link column showing the number of links.
3. Links have actual file contents
4. Removing any link, just reduces the link count but doesn't affect the other links.
5. You cannot create a Hard Link for a directory.
6. Even if the original file is removed, the link will still show you the contents of the file.

ln sample1 sample2

ln [options] source linkfile

hardlinks are default

hardlinks are faster

cant create hard links across file systems

Display inodes for both files using ‘I’ argument of the ls command.
$ ls -il sample1 sample2

Soft Link is actual link to the original file. These Links will have a different Inodes value.
Soft link points to the original file so if original file is deleted then the soft link fails.
If you delete the Soft Link, nothing will happen to file. The reason for this is, the actual file or directory’s inode is different from the "soft link" created file's inodes.
Soft links can cross file systems.

What are Soft Links

1. Soft Links have different inodes numbers.
2. ls -l command shows all links with second column value 1 and the link points to original file.
3. Soft Link contains the path for original file and not the contents.
4. Removing soft link doesn't affect anything but when the original file is removed, the link becomes a 'dangling' link that points to nonexistent file.
5. A Soft Link can link to a directory.

ln -s sample2 sample3

Display inodes for both using i argument of ls command.

$ ls -il sample2 sample3

Now remove the original file:

$ rm sample2

And then check the Test directory:

$ ls

It will still display symbolic link sample3 but if you try to list the contents, it will tell you that there is no such file or directory.

$ cat sample3

Now Remove the original sample1

$ rm sample1

After removing Hard Link just have a look at the content of the "link" sample2.

$ cat sample2

You will still be able to see the contents of the file.

unlink <linkfile> #unlink - call the unlink function to remove the specified file

##################################################
Lecture: Linking Vs. Copying Files
##################################################
for obvious reasons you want your system to be as efficient as possible.  this means taking advantage of the options and utilities it has to offer under the right conditions.
file linking vs copying is one of those opportunities, as long as you keep a few things in mind.

when disk space is at a premium (probably more so on a server class system than your home machine), linking is a good option when you need to reference
the same file in multiple locations without needing to pass in a full path.   But whether you use hard links or soft links vs making a copy depends on your need

use all the tools and utilities at your disposal to avoid wasting system resources.

soft links are completely different files, we can tell because they have different inodes, an inodes is a reference to the data structure that contents the contents of a file

a hard link builds a hardlink count into the file inode reference

deleting the original hard linked file does not delete the inode it simply reduces the link count.


##################################################
Lecture: Basic Directory & Group Commands
##################################################
mkdir #mkdir - make directories, Create the DIRECTORY(ies), if they do not already exist.

mkdir -p #-p, --parents no error if existing, make parent directories as needed

rmdir  #rmdir - remove empty directories, Remove the DIRECTORY(ies), if they are empty.

rmdir -p testt/text/best/buy

chgrp <group> <file> #chgrp - change group ownership, Change the group of each FILE to GROUP.  With --reference, change the group of each FILE to that of RFILE.



##################################################
Lecture: Special Permission Bits
##################################################
mkdir /home/root
cd /home/root
vim program.sh
echo "write this line to a file" >> /etc/myfile.txt
:wq

sh program.sh  #sh is dash

suid #set user id, this will set a file to run with the permissions of the user that owns the file not the user that is running the file
The setuid permission set on a directory is ignored on UNIX and Linux systems


chmod u+s program.sh

sh

whereis sh
sh: /bin/sh /bin/sh.distrib /usr/share/man/man1/sh.1.gz

chmod u+s /bin/sh

chmod g+s #run the file with the same permissions of the group that owns the file

we would also need to do the same thing for sh

sticky bit is a directory level permission

chmod o+t

chmod o-t #remove sticky bit


special directories and files
previous lessons we learned about directories like /etc, /lib and /usr/lib

other special directories and file
/var #contains files that change often such as mail, logs, etc.

/var/tmp  contains files that get deleted on reboot

/tmp  contains files that do get deleted on reboot
every user on a linux system can write and delete in the /tmp

the problem with temporary folders that have permissions of 777

the caveat:

other users on the system could delete the other users files and vice versa


sticky bit to the rescue
we can add a sticky bit to a folder which makes it so that only users that create their own files and folders can delete theirs and not others, even if the folder has 777

chmod o+t file . txt or dir  #the t means sticky bit


remove the sticky bit
chmod 0777 /dir #the new 4th place holder removes the stickbit, either a 1 or a 0


chmod o-t /dir #this will remove the stickybit


##################################################
Lecture: Default Permissions umask, newgrp, and chattr
##################################################
newgrp #The newgrp command is used to change the current group ID during a login session. If the optional - flag is given, the user's environment will be
       reinitialized as though the user had logged in, otherwise the current environment, including current working directory, remains unchanged.

cant set a file or forler as new group unless you are a member of that group

umask #umask - set file mode creation mask

bit wise subtraction

file starting point is 666

directory starting point is 777

chattr #chattr - change file attributes on a Linux file system, chattr changes the file attributes on a Linux file system.

chattr -a #A file with the 'a' attribute set can only be open in append mode for writing.

chattr -i #A file with the 'i' attribute cannot be modified: it cannot be deleted or renamed, no link can be created to this file and no data can be written to
       the file.  Only the superuser or a process possessing the CAP_LINUX_IMMUTABLE capability can set or clear this attribute.
chattr +i #will add immutable to it, -i will remove the imutable attribute

chattr -s #When  a file with the 's' attribute set is deleted, its blocks are zeroed and written back to the disk.  Note: please make sure to read the bugs and
       limitations section at the end of this document.


chattr -A # When a file with the 'A' attribute set is accessed, its atime record is not modified.  This avoids a certain amount of disk I/O for laptop systems.

lsattr #lsattr - list file attributes on a Linux second extended file system


##################################################
Lecture: Linux Core Directories & What They Are Used For
##################################################
FHS #file system hierarchy standard, a standard layout of the files system structure and are standard across distros
https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard

/bin #Essential command binaries that need to be available in single user mode; for all users, e.g., cat, ls, cp.

/boot #Boot loader files, e.g., kernels, initrd.

/dev #Essential device files, e.g., /dev/null.

/etc #Host-specific system-wide configuration files
There has been controversy over the meaning of the name itself.
In early versions of the UNIX Implementation Document from Bell labs, /etc is referred to as the etcetera directory,[3] as this directory historically held everything that did not belong elsewhere (however, the FHS restricts /etc to static configuration files and may not contain binaries).[4]
Since the publication of early documentation, the directory name has been re-explained in various ways.
Recent interpretations include backronyms such as "Editable Text Configuration" or "Extended Tool Chest".[5]

/home #Users' home directories, containing saved files, personal settings, etc.


/lib #Libraries essential for the binaries in /bin/ and /sbin/.

/media #Mount points for removable media such as CD-ROMs (appeared in FHS-2.3).

/mnt #Temporarily mounted filesystems.

/opt #Optional application software packages.[6]

/proc #Virtual filesystem providing process and kernel information as files. In Linux, corresponds to a procfs mount.

/root #Home directory for the root user.

/sbin #Essential system binaries, e.g., fsck, init, route.

/srv #Site-specific data served by this system, such as data and scripts for web servers, data offered by FTP servers, and repositories for version control systems.

/tmp #Temporary files (see also /var/tmp). Often not preserved between system reboots, and may be severely size restricted.

/usr #Secondary hierarchy for read-only user data; contains the majority of (multi-)user utilities and applications.[7]

/usr/local #Tertiary hierarchy for local data, specific to this host. Typically has further subdirectories, e.g., bin/, lib/, share/.[8]

/usr/sbin #Non-essential system binaries, e.g., daemons for various network-services.

/usr/share #Architecture-independent (shared) data.

/usr/src #Source code, e.g., the kernel source code with its header files.

/var #Variable files—files whose content is expected to continually change during normal operation of the system—such as logs, spool files, and temporary e-mail files.



##################################################
Lecture: Finding Files In Linux Using Find, Locate, Whereis, Which and Type
##################################################
find # find - search for files in a directory hierarchy

find will only search for files and directories that we have permission to see

find . -name= 'cron*' #searching the dir that you are in for anything that starts with cron

find . -type f  #find files, thats what the f means

find . -type d #this will find directories

find . -perm 777 #find files with the 777 permissions

find . -perm 777 -exec chmod 555 {}\;

find / -mtime +1 #find all files that were built within the last day

find / -a +1 #find the last accessed time

find / -group <group_name>

find / -size 512c #find a file by 512 bytes

find . -name 'file*' -exec rm {} \;

find / -maxdepth 1 #find files only 1 dir down

find / - user <user_name>

locate #locate - find files by name
some ditros do not come with locate

locate is a database, thats why its fast searching

updatedb #this will update the locate db


whereis #whereis - locate the binary, source, and manual page files for a command

which #which - locate a command


type #type - Display information about command type.


##################################################
Lecture: updatedb.conf configuration file
##################################################
vim /etc/updatedb.conf

a bind mount

prunefs #this is the files that locate will not scan


##################################################
Lecture: Using The dd Command
##################################################
dd #dd - convert and copy a file

#will not copy directories it backups devices

wipe a hard disk securely

create empty files of arbitrary size

benchmark drive performance

dd if=/dev/zero of=file.iso bs=1024 count=1   #bs is in bytes default bs is 512

dd if=/dev/zero of=file.iso bs=1024 count=1024 #to create a file that is 1M in size

#backup the MBR
df -h

#we are looking for the dev that / is in

dd if=/dev/mapper/ubuntu--vg-root of=mbr.bak bs=512 count=1

we know have a backup of the mbr


vi myfile

dd if=myfile conv=ucase #this will convert the file to upper case

dd if=/dev/urandom of=myfile bs=512 count=1



#backup root
mkfs -t ext4 <device>


##################################################
Lecture: The touch Command
##################################################
touch #touch - change file timestamps

touch -a #-a     change only the access time

touch -m #-m     change only the modification time

touch -r #-r, --reference=FILE
              use this file's times instead of current time

touch -c #-c, --no-create do not create any files

stat <file> #stat - display file or file system status



##################################################
Exercise: Exercise: The GUNZIP Command
##################################################
1. Create a directory in your home directory called 'exercises' and change to that directory. Execute a command to do a complete copy (including subdirectories) of the sytem '/etc' directory to this new location.
[root@tcox5 ~]# mkdir exercises
[root@tcox5 ~]# cd exercises/
[root@tcox5 exercises]# cp -rf /etc/* .

2. Using the appropriate 'gzip' command and options, create a compressed file called 'myetc.gz' from the files copied in Step #1. Show the newly created file and it's attributes.
[root@tcox5 exercises]# gzip -c * > myetc.gz
gzip: alternatives is a directory -- ignored
gzip: ansible is a directory -- ignored
gzip: at-spi2 is a directory -- ignored
gzip: audisp is a directory -- ignored
gzip: audit is a directory -- ignored
gzip: avahi is a directory -- ignored
gzip: bash_completion.d is a directory -- ignored
gzip: binfmt.d is a directory -- ignored
gzip: bluetooth is a directory -- ignored
gzip: chkconfig.d is a directory -- ignored
(NOTE: OUTPUT CONCATENATED FOR SPACE)
[root@tcox5 exercises]# ls -al myetc.gz
-rw-r--r--. 1 root root 272828 Sep 29 18:53 myetc.gz

3. Create a new file called 'myfile.txt' and put some text in it during creation. Add that file to the existing archive file from Step #2 above.
 [root@tcox5 exercises]# gzip -c myfile.txt >> myetc.gz

4. Using the appropriate command, list the compression ratio achieved in the archive file created in Steps #2 and #3.
[root@tcox5 exercises]# gzip -l myetc.gz
         compressed        uncompressed  ratio uncompressed_name
             272918                  69 -395395.7% myetc

5. Create a directory called 'restore' and change to that directory. Unzip the archive file and cat the results to a new file called 'unarchived.txt'.
[root@tcox5]# mkdir restore && cd restore
[root@tcox5 restore]# gunzip ../myetc.gz && cat ../myetc >> unarchived.txt
[root@tcox5 restore]# cat unarchived.txt
(NOTE: Since /etc is mostly text/configuration files, you will see a LOT of output here, just the text of all that content concatenated in one place)



##################################################
Exercise: Exercise: Using TAR for Archiving
##################################################
1. Create a directory in your home directory called 'exercises' and change to that directory.
[root@tcox5 ~]# mkdir exercises && cd exercises

2. Create a tar archive, with verbose output during creation, called 'etc.tar' containing all files and directories from '/etc'.
[root@tcox5 exercises]# tar cvf etc.tar /etc
tar: Removing leading `/' from member names
/etc/
/etc/fonts/
/etc/fonts/conf.d/
/etc/fonts/conf.d/10-scale-bitmap-fonts.conf
/etc/fonts/conf.d/20-unhint-small-vera.conf
/etc/fonts/conf.d/25-no-bitmap-fedora.conf
/etc/fonts/conf.d/25-unhint-nonlatin.conf
/etc/fonts/conf.d/30-metric-aliases.conf
/etc/fonts/conf.d/30-urw-aliases.conf
/etc/fonts/conf.d/40-nonlatin.conf
(NOTE: Your output will be much larger, concatenated for space)

3. Display the contents of the file created in Step #2 above and pipe that output to a file called 'dirlist.txt'. Add that file to the archive created in Step #2 above. Display and look for that file within the archive.
[root@tcox5 exercises]# tar tvf etc.tar > dirlist.txt
[root@tcox5 exercises]# tar rvf etc.tar dirlist.txt
dirlist.txt
[root@tcox5 exercises]# tar tvf etc.tar | grep dirlist
-rw-r--r-- root/root    120370 2015-09-29 19:16 dirlist.txt

4. Create a new directory called 'verify' inside the 'exercises' directory and change to that directory. Restore the contents of the archive file from Step #2 above here and make sure the new directory listing file created in Step #3 is present.
[root@tcox5 exercises]# mkdir verify && cd verify
[root@tcox5 verify]# tar xvf ../etc.tar
etc/
etc/fonts/
etc/fonts/conf.d/
etc/fonts/conf.d/10-scale-bitmap-fonts.conf
etc/fonts/conf.d/20-unhint-small-vera.conf
etc/fonts/conf.d/25-no-bitmap-fedora.conf
etc/fonts/conf.d/25-unhint-nonlatin.conf
etc/fonts/conf.d/30-metric-aliases.conf
etc/fonts/conf.d/30-urw-aliases.conf
etc/fonts/conf.d/40-nonlatin.conf
etc/fonts/conf.d/45-latin.conf
etc/fonts/conf.d/49-sansserif.conf
(NOTE: Output concatenated for space)
[root@tcox5 verify]# ll
total 132
-rw-r--r--.  1 root root 120370 Sep 29 19:16 dirlist.txt
drwxr-xr-x. 98 root root   8192 Sep 29 18:43 etc

5. Delete the 'dirlist.txt' from this directory. Using the appropriate command, from the archive file created in Step #2, extract ONLY the 'dirlist.txt' from the archive to this directory.
[root@tcox5 verify]# rm dirlist.txt
rm: remove regular file ‘dirlist.txt’? y
[root@tcox5 verify]# tar xvf ../etc.tar dirlist.txt
dirlist.txt
[root@tcox5 verify]# ll
total 132
-rw-r--r--.  1 root root 120370 Sep 29 19:16 dirlist.txt
drwxr-xr-x. 98 root root   8192 Sep 29 18:43 etc



##################################################
Exercise: Managing Files In Linux
##################################################
Note: This lab can be performed on any LinuxAcademy.com lab server. Please complete the following tasks as 'user' starting in user's home directory. If using a Debian/Ubuntu based distribution, use the 'sudo' group instead of 'wheel' for the tasks below.
1. On one line create three files and list the directory output. The file names should be file1, file2, and file 3.
touch file1; touch file2; touch file3; ls
2. Write the output of a command to list ALL files in the home directory of your user to a file called "directory.out".
ls -a > directory.out
You can also list the files using a wild card since the first part of each file we created was "file". Do so by ls file* > directory.out
3. List all the three files you've created above. Then move those files into a new directory called "myfiles"
ls file*; mkdir myfiles; mv file* myfiles/
4. Create a compressed archive of your 'myfiles" directory. Then using the tar command and gzip compression option, create a compressed archive of myfiles/. Once done, verify the contents of the file by listing the contents to the console.
tar -cvzf myfiles.tar.gz myfiles/
tar -ztvf myfiles.tar.gz
5. Create a soft link of the file '/etc/ld.so.conf' in your home directory. Type ls -al to view the link has been created. Then delete the link. Verify whether the original file was deleted or not.
ln -s /etc/ld.so.conf ld.so.conf
ls -al
rm ld.so.conf
ls /etc/ | grep ld.so.conf
6. Create a file called "testhardlink.txt". Create a hard link to that file called "testhardlinkupdate.txt" and then update the contents of that file. Display the contents of the original file and indicate whether they match or not.
touch testhardlink.txt
ln testhardlink.txt testhardlinkupdate.txt
echo "random text" > testhardlinkupdate.txt
cat testhardlink.txt (Should show your "random text)"
7. Create a new directory in your home directory called "course3_video4". In one command, create the following path:
course3_video4/my/new/directory/appeared/like/magic
mkdir course3_video4
mkdir -p course3_video4/my/new/directory/appeared/like/magic
ls -R course3_video4 This will show us what just happened.
8. Change to the 'magic' directory as created above and create a text file called "myfile.txt" with some text content in it. Change the group ownership of the file you just created, assign the group 'wheel'. Remove the entire directory tree we just created.
cd course3_video4/my/new/directory/appeared/like/magic
echo "some text" > myfile.txt
chown user.wheel myfile.txt
cd ~/
rm -rf course3_video4
9. Create a file called "myfile.sh". Give it world readable read, write and execute permissions. Assign the 'wheel' group as the default group for that file. Protect the file from being deleted by anyone not a member of the wheel group WITHOUT changing the default attributes of the file (using one of the special permission bits from the video).
touch myfile.sh
chmod 777 myfile.sh
chown user.wheel myfile.sh
chmod 1777 myfile.sh (or chmod +t)
10. Use the 'chmod' command to change the attribute of the script above to run using the same GROUP permissions as the group owner.
chmod 3777 myfile.sh (or chmod g+s)
Note: 3 in '3777' incorporates both the setgid bit (2), and the sticky bit (1).
11. Create a new group called 'linuxacademy' on your server. Change the default group that all files created by your user will be owned by to this new group. Create a new file that demonstrates the ownership is changed to the 'linuxacademy' group upon creation.
sudo groupadd linuxacademy
sudo usermod -g linuxacademy user
logout of the system and log back in
touch test
ls -al
12. Display the default 'umask' permissions on your system. Change the default umask so that files have world read/write/ and folders have world read/write/execute only. Create a new file that demonstrates that change. Change the attribute of that file so that the time it is modified is never updated.
umask
umask 000 (666-000) = 666 which is read/write for files and (777-000) = 777 which is read/write/execute for dir
touch newfile
chattr -A newfile
13. Using one of the special directories from the video, output the following information to your lab file:

Kernel version and kernel compilation
Number of CPUs in the system
A listing of supported filesystems
Running processes

sudo cat /proc/version
sudo cat /proc/cpuinfo or sudo ls -al /sys/devices/system/cpu
sudo cat /proc/filesystems
sudo ls -al /proc

14. Finding Files In Linux Using Find, Locate, Whereis, Which and Type
Using two different methods, find the following files or directories:
/etc
ld.so.conf
bash
/sbin
Mount

locate /etc
locate ld.so.conf  or find / -name 'ld.so.conf'
which bash
locate /sbin
whereis mount  or type mount



##################################################
Managing Linux Libraries & Software Processes
##################################################
##################################################
Lecture: Software Libraries
##################################################
#library config
vim  /etc/ld.so.conf

man ldconfig  #ldconfig - configure dynamic linker run-time bindings

ldconfig  creates the necessary links and cache to the most recent shared libraries found in the directories specified on the command
       line, in the file /etc/ld.so.conf, and in the trusted directories, /lib and /usr/lib (on some 64-bit architectures  such  as  x86-64,
       lib and /usr/lib are the trusted directories for 32-bit libraries, while /lib64 and /usr/lib64 are used for 64-bit libraries).

if a file ends in a .so its a library



export LD_LIBRARY_PATH=/usr/lib/mylibrary


if we create a library variable we dont have to run the ldconfig update

##################################################
Lecture: Using ps To Manage Processes
##################################################
ps #ps - report a snapshot of the current processes.

ps w > alldata.txt #this will redirect all data to a text file

ps -e # -e     Select all processes.  Identical to -A.

ps -U <user> #list processes running by a user

ps aux #


##################################################
Lecture: Using TOP
##################################################
top - display Linux processes

top is updated  every 3 seconds

top k #this will let you kill processes


top #is just an interactive version of ps
top sorts its display by cpu use
h or ? #this will display tops help information
k #you can kill a process
r #you can renice, chage the processs priority
p #sorts by cpu usage, this is the default display
m #will sort by memory usage

top will also provide load average by applications

load average can reach the number of CPUs or cores before competing for CPU time even begins

a program can consume too much memory if it has a memory leak


##################################################
Lecture: Using nice To Change Linux Process Priorities
##################################################
nice #nice - run a program with modified scheduling priority

Run  COMMAND  with an adjusted niceness, which affects process scheduling.  With no COMMAND, print the current niceness.  Nice‐
       ness values range from -20 (most favorable to the process) to 19 (least favorable to the process).

default nice priority is 10

nice -10 program
nice -n 10 program
nice program
all 3 of the above commands are the same because default is 10

nice -n -20 top #run to at -20 # -20 is the highest priority



renice #renice - alter priority of running processes

renice  alters  the scheduling priority of one or more running processes.  The first argument is the priority value to be used.
       The other arguments are interpreted as process IDs (by default), process group IDs, user IDs,  or  user  names.   renice'ing  a
       process  group  causes  all processes in the process group to have their scheduling priority altered.  renice'ing a user causes
       all processes owned by the user to have their scheduling priority altered.


pgrep #pgrep, pkill - look up or signal processes based on name and other attributes

renice -n -20 -p 11111 #11111 is the PID

renice -n -20 -u -20 root #-u, --user Interpret the succeeding arguments as usernames or UIDs.


##################################################
Lecture: Killing Processes In Linux
##################################################
kill #kill - send a signal to a process

kill -9 PID#

kill -1 PID #is the process is a deamon it will be restarted

kill -15 #will try to do a proper shutdown

killall # killall - kill processes by name

nohup #nohup - run a command immune to hangups, with output to a non-tty


##################################################
Lecture: Using The uname Command To Query System Information
##################################################
uname #uname - print system information

Print certain system information.  With no OPTION, same as -s.

      -a, --all
             print all information, in the following order, except omit -p and -i if unknown:

      -s, --kernel-name
             print the kernel name

      -n, --nodename
             print the network node hostname

      -r, --kernel-release
             print the kernel release

      -v, --kernel-version
             print the kernel version

      -m, --machine
             print the machine hardware name

      -p, --processor
             print the processor type (non-portable)

      -i, --hardware-platform
             print the hardware platform (non-portable)

      -o, --operating-system
             print the operating system


cat /etc/issue
Ubuntu 16.04.2 LTS \n \l


##################################################
Lecture: Understanding Background VS Foreground processes
##################################################
ctrl + z will put a process into the foreground

jobs #will list the programs in the background

fg number #this will bring the program to the foreground

bg #to goto the background

./test & #the & tell the process to run in the background



##################################################
Lecture: The nohup Command
##################################################
nohup <command> #nohup - run a command immune to hangups, with output to a non-tty

nohup ping -c 5000 &


##################################################
Lecture: The free Command
##################################################
free #free - Display amount of free and used memory in the system

free -s, --seconds seconds
              Continuously display the result delay seconds apart.  You may actually specify any floating point number for  delay,  usleep(3)
              is used for microsecond resolution delay times.

free -m #meg


##################################################
Exercise: Managing Linux Libraries and Software Processes
##################################################
Lab One

Create a file called MyLab.out. Append the currently running processes (including process IDs) on the system to that file.
Using the appropriate process command, obtain the number of running processes on the system and append that value to your file created above.
Display the top command on your terminal but add the appropriate command parameter that will cause it to update 10 times and then exit.

ps aux > MyLab.out
ps aux | wc -l >> MyLab.out
top -n 10
Lab Two

Create a directory (in your home directory) called mylibrary. Change the rights on that new directory so that everyone has read and execute access
Add that directory to the system wide library path /etc/ld.so.conf and save the file
Execute the command that will cause the system library path to update, now containing your new directory in its search path
Append the contents of your new ld.so.conf file to the MyLab.out file created in Lab One
Append the environment variable for your user called LD_LIBRARY_PATH to that same file
Finally, append the system type, kernel version, hostname and Linux distribution type to the file above using the appropriate command and parameter(s)
cd ~ && mkdir mylibrary && chmod 755 mylibrary -R
sudo vi /etc/ld.so.conf (add line "/home/username/mylibrary" and save/exit)
sudo ldconfig
sudo cat /etc/ld.so.conf >> MyLab.out
echo $LD_LIBRARY_PATH >> MyLab.out
uname -a >> MyLab.out


##################################################
Exercise: Exercise: Using TOP To Manage Processes
##################################################
1. Using the 'top' command, display the current processes on the system to the console and exit the program.
user@tcox1:~$ top
top - 16:50:32 up 10 min,  2 users,  load average: 0.00, 0.05, 0.06
Tasks: 131 total,   1 running, 130 sleeping,   0 stopped,   0 zombie
%Cpu(s):  3.3 us,  1.2 sy,  0.0 ni, 90.9 id,  0.8 wa,  0.0 hi,  0.0 si,  3.8 st
KiB Mem:   1016256 total,   677492 used,   338764 free,    30180 buffers
KiB Swap:        0 total,        0 used,        0 free.   407284 cached Mem

  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND
    1 root      20   0   33740   3088   1500 S  0.0  0.3   0:01.32 init
    2 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kthreadd
    3 root      20   0       0      0      0 S  0.0  0.0   0:00.00 ksoftirqd/0
    5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H
    6 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kworker/u30:0
    7 root      20   0       0      0      0 S  0.0  0.0   0:00.13 rcu_sched

2. Using the 'top' command with the appropriate option, list ONLY the current processes running as the user id 'user'.
user@tcox1:~$ top -u user
top - 16:52:12 up 12 min,  2 users,  load average: 0.00, 0.04, 0.05
Tasks: 131 total,   1 running, 130 sleeping,   0 stopped,   0 zombie
%Cpu(s):  2.9 us,  1.0 sy,  0.0 ni, 92.1 id,  0.7 wa,  0.0 hi,  0.0 si,  3.3 st
KiB Mem:   1016256 total,   677420 used,   338836 free,    30188 buffers
KiB Swap:        0 total,        0 used,        0 free.   407280 cached Mem

  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND
 4046 user      20   0  109784   2440   1400 S  0.0  0.2   0:00.00 sshd
 4047 user      20   0   21496   3924   1740 S  0.0  0.4   0:00.04 bash
 4116 user      20   0  109784   2032   1040 S  0.0  0.2   0:00.00 sshd
 4117 user      20   0   12820    928    756 S  0.0  0.1   0:00.00 sftp-server
 4122 user      20   0   23688   1604   1088 R  0.0  0.2   0:00.00 top

3. Find the current Process ID of the bash shell your user is logged in as. Display JUST that PID in the top command in the console and then exit the program.
user@tcox1:~$ ps aux | grep bash
user      4047  0.0  0.3  21496  3924 pts/1    Ss   16:43   0:00 -bash
user      4124  0.0  0.0  10460   928 pts/1    S+   16:52   0:00 grep --color=auto bash
user@tcox1:~$ top -p 21496
top - 16:52:55 up 13 min,  2 users,  load average: 0.00, 0.03, 0.05
Tasks:   0 total,   0 running,   0 sleeping,   0 stopped,   0 zombie
%Cpu(s):  2.7 us,  1.0 sy,  0.0 ni, 92.5 id,  0.7 wa,  0.0 hi,  0.0 si,  3.1 st
KiB Mem:   1016256 total,   677408 used,   338848 free,    30196 buffers
KiB Swap:        0 total,        0 used,        0 free.   407372 cached Mem

4. Using 'top' in batch mode, have it display the current processes for the user 'user' twice to the console and then stop.
user@tcox1:~$ top -u user -b -n 2
top - 16:55:02 up 15 min,  2 users,  load average: 0.00, 0.02, 0.05
Tasks: 131 total,   1 running, 130 sleeping,   0 stopped,   0 zombie
%Cpu(s):  2.4 us,  0.8 sy,  0.0 ni, 93.5 id,  0.6 wa,  0.0 hi,  0.0 si,  2.7 st
KiB Mem:   1016256 total,   677440 used,   338816 free,    30208 buffers
KiB Swap:        0 total,        0 used,        0 free.   407376 cached Mem

  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND
 4046 user      20   0  109784   2440   1400 S  0.0  0.2   0:00.01 sshd
 4047 user      20   0   21496   3924   1740 S  0.0  0.4   0:00.04 bash
 4116 user      20   0  109784   2032   1040 S  0.0  0.2   0:00.00 sshd
 4117 user      20   0   12820    928    756 S  0.0  0.1   0:00.00 sftp-server
 4127 user      20   0   23528   1460   1068 R  0.0  0.1   0:00.00 top

top - 16:55:05 up 15 min,  2 users,  load average: 0.00, 0.02, 0.05
Tasks: 131 total,   1 running, 130 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem:   1016256 total,   677564 used,   338692 free,    30208 buffers
KiB Swap:        0 total,        0 used,        0 free.   407384 cached Mem

  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND
 4046 user      20   0  109784   2440   1400 S  0.0  0.2   0:00.01 sshd
 4047 user      20   0   21496   3924   1740 S  0.0  0.4   0:00.04 bash
 4116 user      20   0  109784   2032   1040 S  0.0  0.2   0:00.00 sshd
 4117 user      20   0   12820    928    756 S  0.0  0.1   0:00.00 sftp-server
 4127 user      20   0   23536   1588   1172 R  0.0  0.2   0:00.00 top

5. Now that you have the PID of the bash shell for your login, use 'top' with the proper options to display ONLY that PID, in batch mode, repeating three times and redirected to a file called 'mybash.log' in your home directory.
user@tcox1:~$ top -p 21496 -b -n 3 > mybash.log

6. Display the file created in Step #5.
user@tcox1:~$ cat mybash.log
top - 16:55:58 up 16 min,  2 users,  load average: 0.00, 0.02, 0.05
Tasks:   0 total,   0 running,   0 sleeping,   0 stopped,   0 zombie
%Cpu(s):  2.2 us,  0.8 sy,  0.0 ni, 93.9 id,  0.6 wa,  0.0 hi,  0.0 si,  2.5 st
KiB Mem:   1016256 total,   677588 used,   338668 free,    30216 buffers
KiB Swap:        0 total,        0 used,        0 free.   407384 cached Mem

  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND

top - 16:56:01 up 16 min,  2 users,  load average: 0.00, 0.02, 0.05
Tasks:   0 total,   0 running,   0 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem:   1016256 total,   677588 used,   338668 free,    30216 buffers
KiB Swap:        0 total,        0 used,        0 free.   407388 cached Mem

  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND

top - 16:56:04 up 16 min,  2 users,  load average: 0.00, 0.01, 0.05
Tasks:   0 total,   0 running,   0 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem:   1016256 total,   677588 used,   338668 free,    30224 buffers
KiB Swap:        0 total,        0 used,        0 free.   407388 cached Mem



##################################################
Finding Files In Linux
##################################################
##################################################
Lecture: Which and Whereis
##################################################
which #which returns the pathnames of the files (or links) which would be executed in the current environment, had its
       arguments been given as commands in a strictly POSIX-conformant shell.  It does this by searching the PATH  for
       executable files matching the names of the arguments. It does not follow symbolic links.

when a command is put into your $PATH thats where the system will look for programs or a file name that can be executed


whereis #whereis  locates  the  binary, source and manual files for the specified command names.  The supplied names are
       first stripped of leading pathname components and any (single) trailing extension of the form .ext  (for  exam‐
       ple:  .c) Prefixes of s.  resulting from use of source code control are also dealt with.  whereis then attempts
       to locate the desired program in the standard Linux places, and in the places specified by $PATH and $MANPATH.

where is allows us to located the binary the source and the manual pages for a command

##################################################
Lecture: Finding Files With Locate
##################################################
not all distributions come with the locate command, if you enter "which locate" you can see if your distro has it.

locate # locate  reads  one or more databases prepared by updatedb(8) and writes file names matching at least one of the PATTERNs to standard output, one per line.

locate pwd
locate will retuen all commands with pwd in it
locate is fast searching
uses a database

to update the locate db run "updatedb"

updatedb #updatedb - update a database for mlocate, updatedb  creates  or updates a database used by locate(1).  If the database already exists, its data is reused
       to avoid rereading directories that have not changed.

##################################################
Lecture: The Powerful Find Command
##################################################
find #find - search for files in a directory hierarchy

find . #search your current dir and anything in those dirs

find . -name= 'cron*' #searching the dir that you are in for anything that starts with cron

find . -type f  #find files, thats what the f means

find . -type d #this will find directories

find . -perm 777 #find files with the 777 permissions

find . -perm 777 -exec chmod 555 {}\;

find / -mtime +1 #find all files that were built within the last day

find / -a +1 #find the last accessed time

find /- -group <group_name>

find / -size 512c #find a file by 512 bytes

find . -name 'file*' -exec rm {} \;

find -xdev #-xdev  Don't descend directories on other filesystems.


##################################################
Exercise: Finding Files in Linux
##################################################
Lab One

Using the which command, find out where the binary file called iptables is installed.
Using the whereis command, repeat the above exercise being sure to tell your command to only search for binary files.
Build your local file cache DB by running the updatedb command, keep in mind this may take a few minutes.
Using the locate command, find all binary files on the system containing the string table, in any position in the file.
which iptables
whereis -b iptables
updatedb
locate table
Lab 2

Use find to find all files named passwd in the /etc directory.
Use find to find all files that have been modified in the last three days.
In your home directory create three files that end with .txt. Now use find to find all files that end with .txt in your home directory and then delete them as part of the same command using -exec.
find /etc -name "passwd"
find / -mtime -3
touch file1.txt; touch file2.txt; touch file3.txt
find . -name '*.txt' -exec rm {} \;


##################################################
Control mounting and unmounting of filesystems
##################################################
##################################################
Lecture: How To Create A Linux Academy Disk Volume
##################################################
mount server disk > create volume > it will give you the location of the mount

##################################################
Lecture: Creating And Mounting A Disk Partition
##################################################
view mounted devices
cd /dev
we were told that the device is xvdf

mount # All files accessible in a Unix system are arranged in one big tree, the file hierarchy, rooted at /.  These files can be spread out over several
       devices. The mount command serves to attach the filesystem found on some device to the big file tree. Conversely,  the  umount(8)  command  will
       detach it again

#mount the device
sudo mount /dev/xvdf /mnt/xvdf

mkfs -t ext3 /dev/xvdf -m 25 #-t mean the type of file system, the -m flag is reserved space, default is 5%, -c flag is to check for bad sectors

mount /dev/xvdf /mnt/xdvf/

df -h

umount /mnt/xdvf

#The  umount  command detaches the file system(s) mentioned from the file hierarchy.  A file system is specified by giving the directory where it
       has been mounted.  Giving the special device on which the file system lives may also work, but is obsolete, mainly because it will fail in  case
       this device was mounted on more than one directory.


##################################################
Lecture: Using fdisk, Creating A File System, and Configuring Mount Entry With /etc/fstab
##################################################
fsck -A #will check all file system in fstab

fdisk /dev/xvdf #fdisk - manipulate disk partition table

#create a partition
fdisk /dev/xvdf

m
n
p
1
<enter>
<enter>
w


q #this will quit without saving

#make a file system
mkfs -t ext4 xvdf1

#mount the device
mount /dev/xvdf1 /home/joe/mount/

df -m #the -m flag in megabytes

umount /home/joe/mount

vim /etc/fstab

/dev/xvdf1                               /home/joe/mount          ext4    defaults         0 0  #instead of ext4 you can use auto and it will attempt to detect the file system

#once a device is in fstab we can use mount -a and umount -a


##################################################
Lecture: Working With Linux Swap
##################################################
free -m #we can see how much swap we have

#create a swap file full ov zeros
dd if=/dev/zero of=~/swap.swp bs=1024 count=800k

mkswap #mkswap - set up a Linux swap area
mkswap sets up a Linux swap area on a device or in a file.

       The  device  argument  will  usually  be  a disk partition (something like /dev/sdb7) but can also be a file.  The Linux kernel does not look at partition IDs, but many
       installation scripts will assume that partitions of hex type 82 (LINUX_SWAP) are meant to be swap partitions.  (Warning: Solaris also uses this type.  Be careful not to
       kill your Solaris partitions.)

mkswap <swap_file>

swapon <swap_file> #swapon, swapoff - enable/disable devices and files for paging and swapping, swapon is used to specify devices on which paging and swapping are to take place.

#edit the /etc/fstab
vim /etc/fstab
/root/swap.swp    /  swap default
:wq

#to test
swapoff -a  #swapon, swapoff - enable/disable devices and files for paging and swapping

swapon -a #this will mount everything maked as swap in fstab


#to mount a volume to use as swap
mkswap xvdf

swapon xvdf

vim /etc/fstab
/dev/xvdf  / swap default

swapoff -a
free -m

swapon -a
free -m

##################################################
Lecture: /media mount point
##################################################
/mnt #this is where people mount external file systems

/media #this is for media files, usb, cd, dvd, #it is exactly like any other dir that you want to mount to

cd /media
sudo mkdir usbkey
sodo mount /dev/sda3 usbkey/

##################################################
Exercise: Control Mounting and Unmounting of Filesystems
##################################################
Using the 'server lab' dialog "mount" a disk to your system. The mount will display on your system as either /dev/xvdf or /dev/xvdj. Navigate to the /dev directory and verify the mount is there.
Click the "Play" button under the "mount" heading on the LinuxAcademy server lab dialog.
Next partition the disk using fdisk and create a single disk partition with all the default values. Remember DOS type partition tables only allow 4 primary disk partitions but you only need to create 1. Changes on fdisk are only saved if you explicitly tell fdisk to write the changes.
fdisk /dev/xvdf (or /dev/xvdj)
m key inside of fdisk to display the available options. Select n for a new partition.
Select p for primary.
1 for partition number
Select defaults for the rest of the options
Write changes to disk  w. Remember if you do not do this your partition changes will not be written to the disk.
Make an ext4 file system on your new partition.
mkfs -t ext4 /dev/xvdf1 (or /dev/xvdj1)
Create a new directory located at /backups. Manually mount that partition, make sure it shows up in the command df –h
mkdir /backups; mount -t ext4 /dev/xvdf1 /backups or /dev/xvdj1 if that is your partition.
Verify it is mounted:
df -h
Add the partition to /etc/fstab so that it is automatically mounted. Once completed unmount all partitions and then remount all partitions with a single command. This verifies that it is entered correctly in /etc/fstab.
vi /etc/fstab
At the end of the file add /dev/xvdj1 /backups ext4 defaults 0 0  if it is required to use /xvdf1 use that.
:wq! (save and exit)
umount -a - This unmounts all partitions it can that are listed in the fstab file (/ wont be unmounted)
mount -a - This mounts all partitions listed in the fstab file
df -h - Verifies that it is mounted again. The fstab file is run when the system is loaded. All items listed in the fstab file will be automatically mounted during the boot process and unmounted during the shut down process.




##################################################
Exercise: Exercise: Creating and Mounting a Filesystem
##################################################

1. Using the fdisk utility, check to be sure there is an available drive on your lab server with no partitions currently. If not, be sure to use the mount 'play' button on your lab server tab to create one.
root@tcox1:~# fdisk -l

Disk /dev/xvda: 16.1 GB, 16106127360 bytes
255 heads, 63 sectors/track, 1958 cylinders, total 31457280 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000

    Device Boot      Start         End      Blocks   Id  System
/dev/xvda1   *       16065    31455269    15719602+  83  Linux

Disk /dev/xvdf: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders, total 2097152 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000

Disk /dev/xvdf doesn't contain a valid partition table

2.  Use the 'gdisk' utility to create a new Linux partition on the drive you find in Step #2 above. Print out the partition table and be sure to write it to disk before exiting 'gdisk'.
root@tcox1:~# gdisk /dev/xvdf
GPT fdisk (gdisk) version 0.8.8

Partition table scan:
  MBR: not present
  BSD: not present
  APM: not present
  GPT: not present

Creating new GPT entries.

Command (? for help): p
Disk /dev/xvdf: 2097152 sectors, 1024.0 MiB
Logical sector size: 512 bytes
Disk identifier (GUID): AE372F98-80BF-4F9F-84BB-B9D0F087124E
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 2097118
Partitions will be aligned on 2048-sector boundaries
Total free space is 2097085 sectors (1024.0 MiB)

Number  Start (sector)    End (sector)  Size       Code  Name

Command (? for help): n
Partition number (1-128, default 1): 1
First sector (34-2097118, default = 2048) or {+-}size{KMGTP}:
Last sector (2048-2097118, default = 2097118) or {+-}size{KMGTP}:
Current type is 'Linux filesystem'
Hex code or GUID (L to show codes, Enter = 8300):
Changed type of partition to 'Linux filesystem'

Command (? for help): w

Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING
PARTITIONS!!

Do you want to proceed? (Y/N): y
OK; writing new GUID partition table (GPT) to /dev/xvdf.

The operation has completed successfully.

3. Format the partition as an 'ext3' filesystem. Give it a volume label of 'testpart'. Verify that a UUID has been created for it once it has been formatted.
root@tcox1:~# mke2fs -t ext3 -L testpart /dev/xvdf1
mke2fs 1.42.9 (4-Feb-2014)
Filesystem label=testpart
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
65536 inodes, 261883 blocks
13094 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=268435456
8 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks:
32768, 98304, 163840, 229376

Allocating group tables: done
Writing inode tables: done
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done

root@tcox1:~# ls -al /dev/disk/by-uuid/
total 0
drwxr-xr-x 2 root root  80 Sep  7 16:27
.
drwxr-xr-x 6 root root 120 Sep  7 16:25
..
lrwxrwxrwx 1 root root  11 Sep  7 16:27
09f1cbe8-2a81-4d2f-b7c1-5181a506c6b4
 ->
../../xvdf1

lrwxrwxrwx 1 root root  11 Sep  7 15:52
a09befc1-cf11-45ac-b1f4-52736ff06125
 ->
../../xvda1

4. Mount the drive using a directory called std' in the '/mnt' directory using the drive created in Step #3 above. Create a file called 'test.txt' in the newly mount partition and display it.
root@tcox1:~# cd /mnt
root@tcox1:/mnt# mkdir std
root@tcox1:/mnt# mount -t ext3 /dev/xvdf1 /mnt/std
root@tcox1:/mnt# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1       15G  2.4G   12G  17% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
udev            492M   12K  492M   1% /dev
tmpfs           100M  804K   99M   1% /run
none            5.0M     0  5.0M   0% /run/lock
none            497M   80K  497M   1% /run/shm
none            100M   16K  100M   1% /run/user
/dev/xvdf1      991M  1.3M  939M   1% /mnt/std
root@tcox1:/mnt# echo "Hello World" >> /mnt/std/test.txt
root@tcox1:/mnt# cat /mnt/std/test.txt
Hello World

5. Unmount the partition. Verify that the drive is no longer mounted and that the file created in Step #4 is no longer there.
root@tcox1:/mnt# umount std
root@tcox1:/mnt# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1       15G  2.4G   12G  17% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
udev            492M   12K  492M   1% /dev
tmpfs           100M  804K   99M   1% /run
none            5.0M     0  5.0M   0% /run/lock
none            497M   80K  497M   1% /run/shm
none            100M   16K  100M   1% /run/user
root@tcox1:/mnt# ls -al /mnt/std
total 8
drwxr-xr-x 2 root root 4096 Sep  7 16:28
.


##################################################
Filesystem Integrity and Maintenance
##################################################
##################################################
Lecture: du, df and mount
##################################################
du #du - estimate file space usage
Summarize disk usage of each FILE, recursively for directories.

du -h #-h, --human-readable print sizes in human readable format (e.g., 1K 234M 2G)

du -sh #-s, --summarize display only a total for each argument

#cant do a -as, all summary, at the same time

df #df - report file system disk space usage
This  manual  page  documents  the GNU version of df.  df displays the amount of disk space available on the file system containing each file name argument.  If no file
       name is given, the space available on all currently mounted file systems is shown.  Disk space is shown in  1K  blocks  by  default,  unless  the  environment  variable
       POSIXLY_CORRECT is set, in which case 512-byte blocks are used

df -h #human readable



mount #mount - mount a filesystem
All files accessible in a Unix system are arranged in one big tree, the file hierarchy, rooted at /.  These files can be spread out over several devices. The mount com‐
       mand serves to attach the filesystem found on some device to the big file tree. Conversely, the umount(8) command will detach it again.



##################################################
Lecture: fsck and e2fsck
##################################################
fsck #fsck - check and repair a Linux filesystem
fsck  is  used  to  check and optionally repair one or more Linux filesystems.  filesys can be a device name (e.g.  /dev/hdc1, /dev/sdb2), a mount point (e.g.  /, /usr,
       /home), or an ext2 label or UUID specifier (e.g.  UUID=8868abf6-88c5-4a83-98b8-bfc24057f7bd or LABEL=root).  Normally, the fsck program will try to  handle  filesystems
       on different physical disk drives in parallel to reduce the total amount of time needed to check all of them.


e2fsck #e2fsck - check a Linux ext2/ext3/ext4 file system
e2fsck is used to check the ext2/ext3/ext4 family of file systems.  For ext3 and ext4 filesystems that use a journal, if the system has been shut down uncleanly without
      any errors, normally, after replaying the committed transactions  in the journal, the file system should be marked as clean.   Hence, for  filesystems  that  use  jour‐
      nalling, e2fsck will normally replay the journal and exit, unless its superblock indicates that further checking is required.

df -h #to view drives

which fsck
/usr/sbin/fsck #centos
/sbin/fsck #ubuntu
which e2fsck
/usr/sbin/e2fsck #centos
/sbin/e2fsck #ubuntu

mount -t ext4 /dev/sdb1 /mnt/tmp

df -h

fsck tmp #cant check a file system on a mounted file system
#will show us data

fsck /dev/sdb1

e2fsck /dev/sdb1

fsck -a /dev/sdb1 #-a     Automatically repair the filesystem without any questions (use this option with caution).  Note that e2fsck(8) supports -a for backward compatibility only.  This
              option is mapped to e2fsck's -p option which is safe to use, unlike the -a option that some filesystem checkers support.


##################################################
Lecture: mke2fs and debugfs
##################################################
mke2fs #mke2fs - create an ext2/ext3/ext4 filesystem, mke2fs is used to create an ext2, ext3, or ext4 filesystem, usually in a disk partition (or file) named by device.

mke2fs -t /dev/sdb1
mount /dev/sdb1 tmp
umount tmp

mke2fs -L DataGroup /dev/sdb1 #-L new-volume-label
              Set the volume label for the filesystem to new-volume-label.  The maximum length of the volume label is 16 bytes.

debugfs #debugfs - ext2/ext3/ext4 file system debugger
The debugfs program is an interactive file system debugger. It can be used to examine and change the state of an ext2, ext3, or ext4 file system.
       device is the special file corresponding to the device containing the file system (e.g /dev/hdXX).


debugfs /dev/sdb1
#in debugfs "lsdel" #we can see the deleted inodes

undel 12 test.txt

debugfs -w /dev/sdb1
lsdel
cp anothertest.txt test.txt
ls -ial
rm test.txt

debugfs -w /dev/sdb1
lsdel
undel <15> undeleted.txt

##################################################
Lecture: dumpe2fs and tune2fs
##################################################
dumpe2fs #dumpe2fs - dump ext2/ext3/ext4 filesystem information
dumpe2fs prints the super block and blocks group information for the filesystem present on device.

       Note: When used with a mounted filesystem, the printed information may be old or inconsistent.

dumpe2fs /dev/sda1

stats and stat information pool from the same library

dumpe2fs -h /dev/sda1

tune2fs #tune2fs - adjust tunable filesystem parameters on ext2/ext3/ext4 filesystems
tune2fs  allows  the system administrator to adjust various tunable filesystem parameters on Linux ext2, ext3, or ext4 filesystems.  The current values of these options
      can be displayed by using the -l option to tune2fs(8) program, or by using the dumpe2fs(8) program.

#on enterprise tune2fs will not give you a lot of value, the tuning will be done on the SAN


##################################################
Lecture: xfs tools
##################################################
apt-get install xfsprogs xfsdump -y

cat /proc/filesystems

which xfsdump
/usr/sbin/xfsdump #because its not a set of standard binaries its in sbin

xfs_check

xfsdump -h /dev/sdb1

xfsdump -J -f /home/joe/dumpfile_xfs /mnt/tmp

xfsrestore -J -f /home/joe/dumpfile_xfs /mnt/tmp

xfs_copy # xfs_copy - copy the contents of an XFS filesystem

xfs_admin #xfs_admin - change parameters of an XFS filesystem


##################################################
Lecture: Disk Partitioning Schemes
##################################################
setting up your disk layout is going to be infinitely easier during installation than making adjustments afterwards


##################################################
Exercise: File System Integrity and Maintenance
##################################################
Lab One


Using the appropriate command, display all filesystems currently mounted on your server, including special filesystems. Display the usage statistics of each in a practical and readable format.
Using either the fsck or e2fsck (depending on the format of your root partition), execute a filesystem check on the root partition of your server.
Display both the volume name and UUID of the root drive on your server and capture the results in your output file.
Create a file in your home directory called mytestfile.txt. List the inode of that file and note it in your output file. Remove the file you just created. Using debugfs, list the command needed to find the deleted file and capture the output of the command that shows the matching inode.
Using one of these utilities, obtain the same information for your output file as you would get using debugfs and the stat summary option.
Set the root partition of your server to the following:
i. Volume Name: SysUtilLab4
ii. Maximum Number of Mounts Before Check: 50
iii. Current Number of Mounts: 55
iv. Interval Between Checks: 2 Days

Solution

df -h
This was a concept quesiton, if you were unable to successfully execute this it is because you cannot perform fsck on a partition while it is mounted (very important concept). Thus, we cannot perform one on the root device while the operating system is running. In old versions we could use the shutdown command to force a fsck on reboot. However, the most common way now is to boot using a live cd and running the fsck on the root file system.
There are a couple of ways to do this right now:
ls -al /dev/disk/by-uuid >> file.out && ls -al /dev/disk/by-partlabel >> file.out
lsblk -o partlabel,uuid >> file.out
blkid >> file.out
Any of these will give you the appropriate output to your log file.
touch ~/myfile.txt && debugfs (note inode), then rm myfile.txt, then debugfs again, then lsdel and undel inode.
dumpe2fs
sudo tune2fs -L SysUtilLab4 -c 50 -C 55 -i 2d /dev/xvda1


##################################################
The Linux Bash Shell
##################################################
##################################################
Lecture: Simple Commands & Shortcuts For The Linux Shell
##################################################
pwd #pwd - print name of current/working directory


time #time - run programs and summarize system resource usage

time ls
time pwd
time ls /etc/init.d


cd ~ #current home directory
whoami #tells you who you are logged in as

#running programs in the shell
./program #the dot mean run within the current directory

/home/user/program

sudo ./cron restart

exec #if its an executable program is used to

ctrl + k #will remove anything infront of your cursor


##################################################
Lecture: Environment Variables, Redirection Operators & Data Pipes
##################################################
>> redirection operator, >> means append

#unset a variable
uset VARIABLE

2> #this would write the standard error, the 2 means error


tac #tac - concatenate and print files in reverse

##################################################
Lecture: Manipulating Files
##################################################
#to remove multiple files with test in the name

xargs # xargs - build and execute command lines from standard input

ls | grep test | xargs rm


cat

join #join - join lines of two files on a common field

paste #paste - merge lines of files, Write  lines  consisting  of the sequentially corresponding lines from each FILE, separated by TABs, to standard output.

past test test1

od <file> #od - dump files in octal and other formats,  Write  an  unambiguous  representation,  octal bytes by default, of FILE to standard output.  With more than one
       FILE argument, concatenate them in the listed order to form the input.


sort # sort - sort lines of text files

split #split - split a file into pieces, Output pieces of FILE to PREFIXaa, PREFIXab, ...; default size is 1000 lines, and default PREFIX is 'x'.

split -l 2 filename newfilename #this will break the file into multiple files that contain 2 lines

expand #expand - convert tabs to spaces

unexpand #unexpand - convert spaces to tabs

tr #tr - translate or delete characters
tr blah test < blah.txt

nl #nl - number lines of files

fmt #fmt - simple optimal text formatter


##################################################
Lecture: File Viewing Commands For The Linux Bash Shell
##################################################
head #head - output the first part of files

tail #tail - output the last part of files

cut #cut - remove sections from each line of files

wc #wc - print newline, word, and byte counts for each file

sed #sed - stream editor for filtering and transforming text

sed 's/find/replace'

sed 's/myline/woot' test.txt newtest.txt

sed 's/myline/woot/g' test.txt newtest.txt #the g is global, it will change all


##################################################
Exercise: The Linux Bash Shell
##################################################
Execute a command to list all the directories and files on the entire root partition. Run that in conjunction with the correct Bash command so that it will indicate how long the system took to run the command to list those directories.
Use the appropriate shell command to display and output the contents of the current directory. Change to any subdirectory in the /var directory and do the same.
Display (and show in your output file) all the environment variables that are included in your shell once logged in. Create two new variables and export them to the environment, rerun the first command to show the variables have been added and are available.
Solution

time ls -alR /
ls -al && sudo ls -al /var/lib
env >> file.out, export MYVAR1 = "var1", export MYVAR2 = "var2", env >> file.out


##################################################
Linux Disk And User Quotas
##################################################
##################################################
Lecture: Disk Quotas
##################################################
sudo apt-get install quota quotatool

vim /etc/fstab

#before
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
/dev/mapper/ubuntu--vg-root /               ext4    errors=remount-ro 0       1
# /boot was on /dev/sda1 during installation
UUID=d9c996a1-2f4f-4c06-890d-992196cc1604 /boot           ext2    defaults        0       2
/dev/mapper/ubuntu--vg-swap_1 none            swap    sw              0       0


#after
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
/dev/mapper/ubuntu--vg-root /               ext4    errors=remount-ro,usrquota,grpquota 0       1
# /boot was on /dev/sda1 during installation
UUID=d9c996a1-2f4f-4c06-890d-992196cc1604 /boot           ext2    defaults        0       2
/dev/mapper/ubuntu--vg-swap_1 none            swap    sw              0       0

:wq

touch /quota.user /quota.group

chmod 600 /quota.user /quota.group

sudo mount -o remount /

quotacheck #quotacheck - scan a filesystem for disk usage, create, check and repair quota files

quotacheck -avugm

#now quota group and user file in / have data in them

##################################################
Lecture: User Quotas
##################################################
edquota #edquota - edit user quotas

edquota <user> #show the quota for a user

repquota # repquota - summarize quotas for a filesystem

edquota <user>
#put 100 under hard
:wq

repquota -s /  #the -s makes it human readable

#you will want to setup a cron job for quotacheck -avugm / job


##################################################
Exercise: Disk and User Quotas
##################################################
1. Install the linux-image-extra-virtual package to enable quota kernel requirements, if you are usoing a lab or a virtual machine.
sudo apt-get install linux-image-extra-virtual
2. Install the quota package and the quotatool package
sudo apt-get install quota quotatool

3. Edit your fstab file to enable quotas on your root filesystem.
sudo vim /etc/fstab

LABEL
=
cloudimg-rootfs
  /
ext4

defaults
,discard,usrquota,grpquota

0 0

4. Remount your root partition.
sudo mount -o remount /
5. Build the quota database.
sudo quotacheck -avugm
quotacheck: Your kernel probably supports journaled quota but you are not using it. Consider switching to journaled quota to avoid running quotacheck after an unclean shutdown.

quotacheck: Scanning /dev/disk/by-uuid/a09befc1-cf11-45ac-b1f4-52736ff06125 [/] done

quotacheck: Cannot stat old user quota file //aquota.user: No such file or directory. Usage will not be subtracted.

quotacheck: Cannot stat old group quota file //aquota.group: No such file or directory. Usage will not be subtracted.

quotacheck: Cannot stat old user quota file //aquota.user: No such file or directory. Usage will not be subtracted.

quotacheck: Cannot stat old group quota file //aquota.group: No such file or directory. Usage will not be subtracted.

quotacheck: Checked 17976 directories and 140172 files

quotacheck: Old file not found.


quotacheck: Old file not found.

6. Display all existing user quotas for all filesystems and log the output to '/home/user/log.out'.
sudo repquota -a >> /home/user/log.out
7. Using the appropriate command, edit/create the quota file that use to limit their disk usage to 500k.
sudo edquota user
Disk quotas for user user (uid 1001):
  Filesystem                   blocks       soft       hard     inodes     soft     hard

  /dev/disk/by-uuid/a09befc1-cf11-45ac-b1f4-52736ff06125       1192          0      500        53        0        0


8. Using the report quota command, list the new quota for that user as applied, and log the output to '/home/user/log.out'.
sudo repquota -s / >> /home/user/log.out




##################################################
2015 Objective Updates
##################################################
##################################################
Updates Overview
##################################################
##################################################
Lecture: Core Updates And How They Apply to Distribution Versions
##################################################

##################################################
Upstart
##################################################
##################################################
Lecture: Upstart Overview
##################################################
#in new versions are new init systems
systemd

upstart #ubuntu 14 initialization service, it can launch services in parallel
still the first process to start PID = 1
still launches service but in parallel

in /etc/  the rc0 rc1 rc2 are for runlevels

runlevel #runlevel - Print previous and current SysV runlevel
"Runlevels" are an obsolete way to start and stop groups of services used in SysV init.
       systemd provides a compatibility layer that maps runlevels to targets, and associated
       binaries like runlevel. Nevertheless, only one runlevel can be "active" at a given time,
       while systemd can activate multiple targets concurrently, so the mapping to runlevels is
       confusing and only approximate. Runlevels should not be used in new code, and are mostly
       useful as a shorthand way to refer the matching systemd targets in kernel boot
       parameters.

       Table 1. Mapping between runlevels and systemd targets
       ┌─────────┬───────────────────┐
       │Runlevel │ Target            │
       ├─────────┼───────────────────┤
       │0        │ poweroff.target   │
       ├─────────┼───────────────────┤
       │1        │ rescue.target     │
       ├─────────┼───────────────────┤
       │2, 3, 4  │ multi-user.target │
       ├─────────┼───────────────────┤
       │5        │ graphical.target  │
       ├─────────┼───────────────────┤
       │6        │ reboot.target     │
       └─────────┴───────────────────┘



upstart is backward compatable

initctl list #initctl - init daemon control tool, initctl  allows  a  system  administrator  to  communicate  and interact with the Upstart init(8) daemon.

list #Requests  a  list  of  the known jobs and instances, outputs the status of each to standard output

for cron to manage processes as a job they must be in the /etc/init and end with .conf


##################################################
Exercise: Creating An Upstart Job
##################################################
1. View system services and jobs that are managed by upstart
root@hostname: $ initctl list
Alternatively you could view the conf files in /etc/init which is the new location for upstart jobs replacing the old location /etc/init.d/. However, for backwards compatibility /etc/init.d is still support with upstart.

2. SSH is a job now managed by upstart in Ubuntu 14. Using Upstart restart the SSH service

root@hostname: $ restart ssh
3. Using the service command also restart the SSH service
root@hostname: $ service ssh restart
4. Create a new job that uses the logger command to create an entry into the /var/log/syslog log file stating the date and time the entry was run. The job should start when the system enters runlevel 4 and only runlevel4. you can use the /etc/init/cron.conf file as a starting template.Be sure to use the script stanza instead of the exec stanza. Name the configuration file 'logger.conf'
root@hostname: $ cd /etc/init
root@hostname: $ cp cron.conf logger.conf //(note the name of the conf file is fine whatever you had it as long as it ends in .conf)
[logger.conf]
description	"Logger service"
start on runlevel [4]
expect fork

respawn
script
logger -f /var/log/syslog "Hello world! $(date)"
end script
[end logger.conf file]
root@hostname: $ init-checkconf logger.conf

root@hostname: $ initctl list | grep logger

5. Get the default runlevel on the system
root@hostname: $ runlevel
N 2
6. Test that the job is working by instructing your system to move into runlevel 4
root@hostname: $ telinit 4
root@hostname: $ status logger (note that once you add a job to the /etc/init/ directory you can control it with restart/stop/status/start as well
7. Change back to your default runlevel on the system
root@hostname: $ telinit 2
8. View the SysLog file to verify the date has been entered with your message in the syslog
root@hostname: $ cat /var/log/syslog | grep "hello"
9. Change the logger.conf file so that the service starts in all the same run levels as the cron.conf job
[logger.conf]
description	"Logger service"
start runlevel [2345]
stop runlevel [!2345]

expect fork
respawn

script
 logger -f /var/log/syslog "Hello world! $(date)"
end script[end logger.conf file]


##################################################
Systemd
##################################################
##################################################
Lecture: SysVinit Vs Systemd
##################################################
systemd gets rid on run levels
uses the concept of targets

systemd can start processes in parallel and can have on demand running of deamons
the first deamon to start, it manages all other daemons

we dont change between run levels we base them off of targets

journeld or journelctl


systemd #systemd, init - systemd system and service manager

systemd is a system and service manager for Linux operating systems. When run as first process on boot (as PID 1), it acts as init system that brings up and
       maintains userspace services.

       For compatibility with SysV, if systemd is called as init and a PID that is not 1, it will execute telinit and pass all command line arguments unmodified.
       That means init and telinit are mostly equivalent when invoked from normal login sessions. See telinit(8) for more information.

       When run as a system instance, systemd interprets the configuration file system.conf and the files in system.conf.d directories. See systemd-system.conf(5)
       for more information.

which shutdown
/usr/sbin/shutdown

systemd-journald #systemd-journald.service, systemd-journald.socket, systemd-journald - Journal service
systemd-journald is a system service that collects and stores logging data. It creates and maintains structured, indexed journals based on logging information that is received from a variety of sources:

systemctl has replaced services

systemd.unit #A unit configuration file encodes information about a service, a socket, a device, a mount point, an automount point, a swap file or partition, a start-up
       target, a watched file system path, a timer controlled and supervised by systemd(1), a temporary system state snapshot, a resource management slice or a group
       of externally created processes. The syntax is inspired by XDG Desktop Entry Specification[1].desktop files, which are in turn inspired by Microsoft Windows
       .ini files.


systemctl -t help #to see the available units

cd /usr/lib/systemd/user
[root@joeywagner-gmail-com1 user]# ll
total 20
-rw-r--r--. 1 root root 457 Nov 22 01:27 basic.target
lrwxrwxrwx. 1 root root  26 Dec 14 20:43 bluetooth.target -> ../system/bluetooth.target
-rw-r--r--. 1 root root 414 Nov 22 01:27 default.target
-rw-r--r--. 1 root root 499 Nov 22 01:27 exit.target
-rw-r--r--. 1 root root 170 Nov  6 00:46 obex.service
lrwxrwxrwx. 1 root root  22 Dec 14 20:43 paths.target -> ../system/paths.target
lrwxrwxrwx. 1 root root  24 Dec 14 20:43 printer.target -> ../system/printer.target
lrwxrwxrwx. 1 root root  25 Dec 14 20:43 shutdown.target -> ../system/shutdown.target
lrwxrwxrwx. 1 root root  26 Dec 14 20:43 smartcard.target -> ../system/smartcard.target
lrwxrwxrwx. 1 root root  24 Dec 14 20:43 sockets.target -> ../system/sockets.target
lrwxrwxrwx. 1 root root  22 Dec 14 20:43 sound.target -> ../system/sound.target
-rw-r--r--. 1 root root 501 Nov 22 01:27 systemd-exit.service
lrwxrwxrwx. 1 root root  23 Dec 14 20:43 timers.target -> ../system/timers.target

vim shutdown.target  #just showing the contents
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.

[Unit]
Description=Shutdown
Documentation=man:systemd.special(7)
DefaultDependencies=no
RefuseManualStart=yes


systemd.special - Special systemd units
A few units are treated specially by systemd. They have special internal semantics and cannot be renamed.


instead of initiating a run level instead we tell systemd to go into a shutdown target


cd cd /usr/lib/systemd/system
ls
#files that end with .service are called a service unit
#files that end with .target are called a target unit

systemctl get-default #this will get us the current target that we are working in.
get-default Return the default target to boot into. This returns the target unit name default.target is aliased (symlinked) to.


##differences between systems and sysvinit
systemd allows us to start services in parallel

unit files

service units

boot targets instead of run levels


##################################################
Lecture: Using Systemd With Services And Service Unit Files
##################################################
cd /etc/systemd
cd system
├── bootchart.conf
├── coredump.conf
├── journald.conf
├── logind.conf
├── logind.conf.rpmnew
├── system
│   ├── amazon-ssm-agent.service
│   ├── basic.target.wants
│   │   └── microcode.service -> /usr/lib/systemd/system/microcode.service
│   ├── bluetooth.target.wants
│   │   └── bluetooth.service -> /usr/lib/systemd/system/bluetooth.service
│   ├── dbus-org.bluez.service -> /usr/lib/systemd/system/bluetooth.service
│   ├── dbus-org.freedesktop.Avahi.service -> /usr/lib/systemd/system/avahi-daemon.service
│   ├── default.target -> /lib/systemd/system/multi-user.target
│   ├── default.target.wants
│   │   ├── systemd-readahead-collect.service -> /usr/lib/systemd/system/systemd-readahead-collect.service
│   │   └── systemd-readahead-replay.service -> /usr/lib/systemd/system/systemd-readahead-replay.service
│   ├── display-manager.service -> /usr/lib/systemd/system/gdm.service
│   ├── getty.target.wants
│   │   └── getty@tty1.service -> /usr/lib/systemd/system/getty@.service
│   ├── graphical.target.wants
│   │   ├── accounts-daemon.service -> /usr/lib/systemd/system/accounts-daemon.service
│   │   └── rtkit-daemon.service -> /usr/lib/systemd/system/rtkit-daemon.service
│   ├── linux-academy-websh.service
│   ├── multi-user.target.wants
│   │   ├── auditd.service -> /usr/lib/systemd/system/auditd.service
│   │   ├── avahi-daemon.service -> /usr/lib/systemd/system/avahi-daemon.service
│   │   ├── chronyd.service -> /usr/lib/systemd/system/chronyd.service
│   │   ├── cloud-config.service -> /usr/lib/systemd/system/cloud-config.service
│   │   ├── cloud-final.service -> /usr/lib/systemd/system/cloud-final.service
│   │   ├── cloud-init-local.service -> /usr/lib/systemd/system/cloud-init-local.service
│   │   ├── cloud-init.service -> /usr/lib/systemd/system/cloud-init.service
│   │   ├── crond.service -> /usr/lib/systemd/system/crond.service
│   │   ├── irqbalance.service -> /usr/lib/systemd/system/irqbalance.service
│   │   ├── linux-academy-websh.service -> /etc/systemd/system/linux-academy-websh.service
│   │   ├── mdmonitor.service -> /usr/lib/systemd/system/mdmonitor.service
│   │   ├── nfs-client.target -> /usr/lib/systemd/system/nfs-client.target
│   │   ├── nfs.target -> /usr/lib/systemd/system/nfs.target
│   │   ├── postfix.service -> /usr/lib/systemd/system/postfix.service
│   │   ├── remote-fs.target -> /usr/lib/systemd/system/remote-fs.target
│   │   ├── rpcbind.service -> /usr/lib/systemd/system/rpcbind.service
│   │   ├── rsyslog.service -> /usr/lib/systemd/system/rsyslog.service
│   │   ├── sethostname.service -> /usr/lib/systemd/system/sethostname.service
│   │   ├── sshd.service -> /usr/lib/systemd/system/sshd.service
│   │   ├── tuned.service -> /usr/lib/systemd/system/tuned.service
│   │   ├── vncserver@:1.service -> /usr/lib/systemd/system/vncserver@:1.service
│   │   └── xrdp.service -> /usr/lib/systemd/system/xrdp.service
│   ├── network-online.target.wants
│   │   └── amazon-ssm-agent.service -> /etc/systemd/system/amazon-ssm-agent.service
│   ├── nfs.target.wants
│   │   └── nfs-lock.service -> /usr/lib/systemd/system/nfs-lock.service
│   ├── remote-fs.target.wants
│   │   └── nfs-client.target -> /usr/lib/systemd/system/nfs-client.target
│   ├── sockets.target.wants
│   │   ├── avahi-daemon.socket -> /usr/lib/systemd/system/avahi-daemon.socket
│   │   └── rpcbind.socket -> /usr/lib/systemd/system/rpcbind.socket
│   ├── spice-vdagentd.target.wants
│   │   └── spice-vdagentd.service -> /usr/lib/systemd/system/spice-vdagentd.service
│   ├── system-update.target.wants
│   │   └── systemd-readahead-drop.service -> /usr/lib/systemd/system/systemd-readahead-drop.service
│   ├── tmp.mount -> /dev/null
│   └── vncserver@.service
├── system.conf
├── user
└── user.conf

#in system we have target and service files, a lot of the service files are installed after we install an program

#if we place the service file in to /usr/lib/systemd/system that will override any files in out /etc/systemd/system directory

/etc/systemd/system/multi-user.target.wants

#we an see that these are symlinks into the /usr/lib/systemd/system/ whats happening is that when we have a service that is told to start in the multiuser target it will be placed in here, all the services here are started when system is told to start in the multi user configuration

#cd /usr/lib/systemd/system
#everything in here will over ride any .target .service .socket that matches anything in out /etc/systemd dir

systemctl status sshd.service

vim sshd.service #unit file
[Unit]
Description=OpenSSH server daemon
Documentation=man:sshd(8) man:sshd_config(5)
After=network.target sshd-keygen.service #is its told to start it can start only after these services are started
Before=  #you can add services here to create your custom scripts
Wants=sshd-keygen.service

[Service]
Type=forking
PIDFile=/var/run/sshd.pid
EnvironmentFile=/etc/sysconfig/sshd
ExecStart=/usr/sbin/sshd $OPTIONS
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure
RestartSec=42s

[Install]  #when we enable the service
WantedBy=multi-user.target

systemctl get-default

yum install httpd

cat /usr/lib/systemd/system/httpd.service

systemctl enable httpd
Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service


locate graphical.target
/etc/systemd/system/graphical.target.wants
/etc/systemd/system/graphical.target.wants/accounts-daemon.service
/etc/systemd/system/graphical.target.wants/rtkit-daemon.service
/usr/lib/systemd/system/graphical.target
/usr/lib/systemd/system/graphical.target.wants
/usr/lib/systemd/system/graphical.target.wants/systemd-update-utmp-runlevel.service


#start httpd
systemctl start httpd
systemctl status httpd

systemctl is-enabled httpd

systemctl is-active httpd

systemctl -h #this will list commands


##################################################
Lecture: Systemd Targets & Boot Targets
##################################################
systemctl get-default
multi-user.target

systemctl list-dependencies multi-user.target #this lists all the unit configurations files that are called or started
#a target can call other targets

systemctl list-dependencies graphical.target

#to list targets
systemctl list-units --type=target --all

systemctl list-dependencies basic.target

#lists all of the target files
systemctl list-unit-files --type=target --all

#in the sysvinit systems we could use telinit

#in systemd, this will put you into your target
systemctl isolate graphical.target

cd /etc/systemd/system
#here you can see the soft link from the default.target -> the multi-user.target

#to change the target
systemctl set-default graphical.target


##################################################
Lecture: Identify Enabled Services And Running Services
##################################################
systemctl list-units --type=service

systenctl stop httpd.service

systemctl list-units --type=service #httpd will no longer be listed, it only lists the active services

systemctl list-units --type=service --all #it will show all of the service files

systemctl list-unit-files --type=service #it will show all of our .service configuration files

systemctl disable httpd #this will disable the .service configuration

systemctl list-unit-files --type=service --all #you will now see that the serive is disabled

locate httpd.service

systemctl enable httpd #this re-enables the service

systemctl is-enabled httpd #this will say if its enabled

systemctl status httpd #this will list the status of the service


##################################################
Lecture: Creating A Custom Service
##################################################
cd /etc/systemd/system
#this is where you want to pus custom configurations you dont wan to put you custon starts ups in the usr dir

vim mylogger.service
[Unit]
Description=My logger service
After=sshd.service

[Service]
ExecStart=/usr/bin/logger -f /var/log/messages "Hello World!"

[Install]
WantedBy=multi-user.target
:wq

systemctl status mylogger.status

systemctl enable mylogger

systemctl start mylogger

systemctl status mylogger

journalctl -xn #to view the most recent information that has gone through our system file

#you can all so
tail /var/log/messages

#because mylogger is now a system service
systemctl restart mylogger



##################################################
Lecture: Using Wall To Issue System Wide Messages
##################################################
wall #wall -- send a message to everybody's terminal.
Wall sends a message to everybody logged in with their mesg(1) permission set to yes.  The message can be given
      as an argument to wall, or it can be sent to wall's standard input.  When using the standard input from a  ter‐
      minal, the message should be terminated with the EOF key (usually Control-D).

wall
my message
ctrl+D

wall -n #-n     Suppresses the normal banner printed by wall, changing it to "Remote broadcast message".  This option is
              only available for root if wall is installed set-group-id, and is used by rpc.walld(8).

#also
wall -n "this is my message"

#we can view the messages in the log
tail -f /var/log/messages


##################################################
Exercise: Creating A Custom Service That Starts In The Multi-User Target
##################################################


1. Create a new .service file named "mylogger.service" located in /etc/systemd/system directory, hint: you can copy sshd.service from /usr/lib/systemd/system if you want.
 [root@linuxacademy]# cd /etc/systemd/system; cp /usr/lib/systemd/system/sshd.service mylogger.service
2. Make sure the script executes only AFTER the sshd.service, service has been started.
[Unit]
Description=My logger service
After=sshd.service
3. In the [Service] section you can remove all settings except for ExecStart.
[Service]
ExecStart
4. Using the ExecStart option make it so that whenever the script is started it adds the following line "logger -f /var/log/messages "Hello world!".
ExecStart=/usr/bin/logger -f /var/log/messages "Hello world! $(date)"
5. In the [Install] section make it so that the WantedBy option starts the service, if the service is enabled, when the system enters the multi-user.target, once completed, save and exit.
[Install]
WantedBy=multi-user.target
The complete file contents should look like this:
[Unit]
Description=My logger service
After=sshd.service

[Service]
ExecStart=/usr/bin/logger -f /var/log/messages "Hello world! $(date)"

[Install]
WantedBy=multi-user.target
6. Using systemctl enable the service.
[root@linuxacademy]# systemctl enable mylogger
7. Using systemctl start the service.
[root@linuxacademy]# systemctl start mylogger
8. View the status of the mylogger service.
[root@linuxacademy]# systemctl status mylogger
9. Using tail verify that the logger service sent a message to the /var/log/messages log file.
[root@linuxacademy]# tail -f /var/log/messages
10. Reboot your system.
[root@linuxacademy]# reboot
11. Log back into the system and verify the service is running and also has added another line to the /var/log/messages log file.
[root@linuxacademy]# tail -f /var/log/messages
12. Send a global message to the system stating "It worked!"
[root@linuxacademy]# wall "It worked!"



##################################################
Managing MBR And GPT Partitions
##################################################
##################################################
Lecture: Understanding The Changes Between MBR and GPT
##################################################
GPT = GUID Partition Table
GUID = Globally unique identifier

MBR = Master Boot Record

Legacy of the master boot record
-MBR allows use to identify how and where to boot one or more operating systems
-it is the first thing that loads after the BIOS during boot
-located in the first section of the partition
-Overwriting the set blocks of the first 512 can cause our system not to boot
-Was only created initially to deal with 1GB but currently is limited to 2TB disk sizes
-Limited to four primary partitions up to 2 TB.


Reason for GPT
-Designed to overcome some of the legacy limitations of MBR (size, maximum partition number and security of the MBR block location)
-Up to 9.4ZB Partitions
TB
PB
EX
ZB

-MBR = 32bit base blocks whereas GPT = 64bit base blocks
-128 Unique Primary Partions (GUID)
-Part of the UEFI (Universal Extensable Firmware Interface) replacing BIOS (Basic input output system)
-Backwards compatible mostly
-BIG DATA requirements m
-Uses GDISK to create a partitions
-GPT Boot Record Secured = prevents booting issues by using protected mode boot records

##################################################
Lecture: Managing MBR Paritions With fdisk
##################################################
blkid #blkid - locate/print block device attributes, list all of our block devices

The  blkid  program  is  the command-line interface to working with the libblkid(3) library.  It can determine the type of content
       (e.g. filesystem or swap) that a block device holds, and also the attributes (tokens, NAME=value pairs) from the content  metadata
       (e.g. LABEL or UUID fields)

cd /dev
ll

fdisk /dev/xvdf
m
n
p
+512M
t
l
83
#dont write yes we are going to create our second partion now
n
p
+500M
t
83
w


mkfs -t ext3 /dev/xdvf1

mkfs -t ext3 /dev/xdvf2

blkid
mkdir /mnt/mount1
mkdir /mnt/mount2

partprobe /dev/xvdf #partprobe - inform the OS of partition table changes

partprobe  is a program that informs the operating system kernel of partition table changes, by requesting that the operating sys‐
      tem re-read the partition table.

cat /proc/partitions

blkid

mount /dev/xvdf1 /mnt/mount1

df -h

cd /mnt/mount1
umount /mnt/mount1 #you will not be able to unmount because you are in the mount

cd ..

umount /mnt/mount1 #now it will unmount

cd /mount1 #you will see that there is nothing in the mount

cd ..

df -h

mount /dev/xvdf1 /mnt/mount1

df -h

#as of right now the mount will not be persistant, we need to edit fstab

vim /etc/fstab
/dev/xvdf1 #but its better to use the uuid

#get the uuid fron blkid

UUID=5e67467676575e757 /mnt/mount1        ext3  defaults 0 2 #the 2 is the prority to check the disk

:wq

umount -a #this will unmount everything in the fstab

mount -a #this will mount everything in fstab

##################################################
Lecture: Managing GPT Paritions With gdisk
##################################################
#create a new server and mount a volume

yum install gdisk

gdisk /dev/xvdf

?
n
enter
enter #we are using the entire volume
enter #we are selecting default
w
y
partproble
ll
cat /proc/partitions

mkdir /mnt/mount1
blkid

mkfs -t xfs /dev/xvdf1
blkid
mount /dev/xvdf1 /mnt/mount1
df -h

umount /mnt/mount1

vim /etc/fstab
UUID=54766373573  /mnt/mount1   xfs defaults 0 2
:wq
mount -a

##################################################
Lecture: ReiserFS and Btrfs File Systems
##################################################
ReiserFS
Overview:
General purpose filesystem
Journaled (for recovery)
Developed by Hans Reiser
Supported by all major didtributions
Stable and feature complete as of 2008


Featurtes:
Metadata only journaling
Does not support quotas
Online resizing(growth only, not shrinking, with or without LVM)
Internal fragmentation reduced by a method called "tail packing"
Performance compared to EXT2/3 with smaller files (4kb or less) was noticably faster

BtrFS
Overview:
stands for B-tree File System
Designed to address the lack of pooling, snapshot, and checksums in other file syetems at the time
Intended to be highly scalable in order to meet the growing filesystems of linux
merged into linux kernel mainline officially in 2009 and most major distributions offer support as of 2014

Features:
self Healing in some configurations as a result of "copy-on-write"
Full growth and shrink for online filesystems
Online defragmentation
on balancing (moving objects between block devices to balanve load)
offline filesystem check (fsck with btrfs kernel support)
snapshots (read-only) for rollback
checksum support for data and metadata
out-of-band de-duplication support
in place online converstion supported from EXT3/4 filesystems



##################################################
Lecture: Using Parted
##################################################
which parted

parted /dev/xvdf
help
mklabel gpt
mkpart primary 0s 100%
yes
Ignore
print
q to quit, the partition is already written

mkfs -t xfs xvdf1

##################################################
Lecture: A look at LVM (Logical Volume Manager)
##################################################
What is LVM?
the logical volume manager allows the creation of a layer of abstraction that is over the physical storage.
this then allows the creation of "logical volumes".
a single logical volume can span across multiple physical storage devices thus removing the limit of physical disk size.
the configuration of the storage is seperate or "abstracted" from the physical layer.
any physical storage configuration is hidden from the software configuration allowing the logical volume to be resized and moved without affecting the application


key advantages:
easy to resize storage pools
  decrease or increase the size of the storage pools in a few simple commands
online data relocation
  mova data while the system is active or rearranging data on the disk(MBR to GPT)
Increase  throughput with disk stripping
  a logical volume can stripe data across two or more disks(faster i/o)
Volume snapshots
  take snapshots of the data for backups

              application

              logical volume

              volume group

  physical volume    physical volume


##################################################
Commands And Compression
##################################################
##################################################
Lecture: screen
##################################################
yum install screen

screen #screen - screen manager with VT100/ANSI terminal emulation, Screen  is  a  full-screen  window  manager  that multiplexes a physical terminal between several processes (typically interactive
       shells).

screen -list #-list [match]
            does  not  start  screen,  but  prints  a  list  of  pid.tty.host  strings identifying your screen sessions.  Sessions marked
            `detached' can be resumed with "screen -r". Those marked `attached' are running and have a controlling terminal. If the  ses‐
            sion  runs  in  multiuser mode, it is marked `multi'. Sessions marked as `unreachable' either live on a different host or are
            `dead'.  An unreachable session is considered dead, when its name matches either the name of the local host, or the specified
            parameter,  if  any.   See the -r flag for a description how to construct matches.  Sessions marked as `dead' should be thor‐
            oughly checked and removed.  Ask your system administrator if you are not sure. Remove sessions with the -wipe option.

screen #this creates a new screen session

screen -list
There is a screen on:
        1636.pts-0.joeywagner-gmail-com1        (Attached)
1 Socket in /var/run/screen/S-root.

screen -d 1636 #this will detach use from the screen

screen -r 1636 #to reattach to the screen

screen cat /etc/motd #issue commands to other screens

exit #will terminate a screen

#detach
-d #detaches and forks a new process
-D #detaches and does not fork a new process

screen -S mysession #name your session

screen -x #attach to another users screen, but only if theyre attached, you cant connect to detached


tmux #tmux — terminal multiplexer, tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen.  tmux
     may be detached from a screen and continue running in the background, then later reattached.


##################################################
Lecture: xz Compression
##################################################
tar is not a compression utility, tar is a archiving utility

xz has a better compression ratio than gzip

xz is a general-purpose data compression tool with command line syntax similar to gzip(1) and bzip2(1).  The native file format is
       the  .xz  format,  but  the legacy .lzma format used by LZMA Utils and raw compressed streams with no container format headers are
       also supported.

because xz has a higher compression ration it uses more memory than gzip

we cant compress a directory we can only compresss files

xz -z <filename>

xz -l filename.xz #this will list information about our file

unxz or xz -d #to decompress the file

cp -R /etc/cron.monthly .

#first create a archive then compress that archive

tar cf cron.monthly.tar cron.monthy

xz -z cron.monthly.tar

xz -l cron.monthly.tar

unxz cron.monthly.tar #this will decompress the file

tar -xzf cron.monthly.tar #to unarchive the file


##################################################
Lecture: pkill and pgrep
##################################################
man pgrep and pkill are the same man page
pgrep, pkill - look up or signal processes based on name and other attributes

pgrep  looks  through the currently running processes and lists the process IDs which match the selection criteria to stdout.  All
       the criteria have to match.

pgrep -l -u <user> #list all process that the user is using

pgrep -u <user> <process> #looking for a specific process that a specific user is using

prep -v -l -u root #this will list all processes that are not being used but the user root, -v, --inverse
              Negates  the matching.  This option is usually used in pgrep's context.  In pkill's context the short option is disabled to
              avoid accidental usage of the option.



pkill will send the specified signal (by default SIGTERM) to each process instead of listing them on stdout.

pkill httpd #this will kill all httpd processes

pkill -u <user> <program> #this will only kill the program identified that that user is using

pkill -u <user> sshd #this will log this user out of the system

w #get the teminal ids of the users logged into the system

pkill -t pts/2 #this will close the teminal for the logged in user, it will kill all processes associated to that termibal

pgrep -n -u <user> #this will tell us the most recent process started by a user


##################################################
Lecture: dmesg
##################################################
its the first part of out os that is loaded into memory when the machine boots up

all the messages that are sent and received are stored in the kernel ring buffer

what is a buffer:
Buffer Definition.
A buffer, also called buffer memory, is a portion of a computer's memory that is set aside as a temporary holding place for data that is being sent to or received from an external device, such as a hard disk drive (HDD), keyboard or printer.

a ring buffer is a constant size buffer, any new information pushes out older information

dmesg #this is an entire dump of the kernel ring buffer

dmesg - print or control the kernel ring buffer
dmesg is used to examine or control the kernel ring buffer.
The default action is to read all messages from kernel ring buffer.


##################################################
Booting The System
##################################################
##################################################
Lecture: Concepts & Configuration Files
##################################################
boot loader process:
box is powered on
system will look for a bootable device either configure in EUFI or by searching for a master boot record on attached devices
master boot record contains information about the boot loader. once the boot loader is found the system passes control to the boot loader
once the boot loader is loaded it presents a menu of kernel options to boot to, if multiple kernels are found on the sysetm
the boot loader loads the kernel into memory or initramfs
the boot loader then gives control to the kernel passing in any options specified in the config or at boot time
kernel starts all the hardware modules and initalizes all hardware it can find then runs init on the system still runing from initramfs(again this is pid 1 fdrom our system boot process)
initramfs version of systemd will move the system into the initrd.target which will mount the root file systems
the kernel root file system is then switched from initramfs to the root file system /
systemd takes over and the default target as specified is called.


grub vs grub2
/boot/grub/menu.lst has been replavced with /boot/grub/grub.cfg in grub2
custon menu items can be created in /etc/grub.d/40_custon
grub2 main configuration fail is now located in /boot/grub/grub.cfg
  this is not to be edited manually but is instead populated from a set of scripts and files
  /etc/grub.d location of custom scripts that create the grub.cfg
  /etc/defaults/grub

system recovery
note: this is outside the scope of lpic-1 and linux+

Before the operating sysetm boots you can actuall pass parameters to the boot loader before the loader begins.
this wnables the admin to be able to enter into recovery mode and restore an issue that is related to the boot loader

generally the best method for restoring an issue is to re-generate the grub2 configuration file

grub2-mkconfig > /boot/grub/grub.cfg
or
grub-mkconfig > /boot/grub/grub.cfg



##################################################
Lecture: Grub-install and Grub-mkconfig
##################################################
cd /boot
#we can see the grub and grub2 dirs
cd /grub2
ll
total 32
-rw-r--r--. 1 root root   64 Jan 24 14:56 device.map
drwxr-xr-x. 2 root root   25 Jan 24 14:56 fonts
-rw-r--r--. 1 root root 5100 Jan 25 19:59 grub.cfg
-rw-r--r--. 1 root root 1024 Jan 25 19:59 grubenv
drwxr-xr-x. 2 root root 8192 Jan 24 14:56 i386-pc
drwxr-xr-x. 2 root root 4096 Jan 24 14:56 locale
drwxr-xr-x. 3 root root   20 Jan 24 14:54 themes

#we can see the grub.cfg

[root@localhost grub2]# cat grub
grub.cfg  grubenv
[root@localhost grub2]# cat grub.cfg
#
# DO NOT EDIT THIS FILE
#
# It is automatically generated by grub2-mkconfig using templates
# from /etc/grub.d and settings from /etc/default/grub
#

cd /etc/default
[root@localhost default]# cat grub
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT="console"
GRUB_CMDLINE_LINUX="crashkernel=auto rd.lvm.lv=cl/root rd.lvm.lv=cl/swap rhgb quiet"
GRUB_DISABLE_RECOVERY="true"

cd /etc/grub.d
[root@localhost grub.d]# ll
total 72
-rwxr-xr-x. 1 root root  8702 Nov 22 07:51 00_header
-rwxr-xr-x. 1 root root   992 Jun 16  2016 00_tuned
-rwxr-xr-x. 1 root root   232 Nov 22 07:51 01_users
-rwxr-xr-x. 1 root root 10781 Nov 22 07:51 10_linux
-rwxr-xr-x. 1 root root 10275 Nov 22 07:51 20_linux_xen
-rwxr-xr-x. 1 root root  2559 Nov 22 07:51 20_ppc_terminfo
-rwxr-xr-x. 1 root root 11169 Nov 22 07:51 30_os-prober
-rwxr-xr-x. 1 root root   214 Nov 22 07:51 40_custom
-rwxr-xr-x. 1 root root   216 Nov 22 07:51 41_custom
-rw-r--r--. 1 root root   483 Nov 22 07:51 README


#this will update any changes that we make to the /etc/default/grub file to the grub.cfg
grub2-mkconfig > /boot/grub2/grub.cfg

#to reinstall our bootloader
grub2-install <device_to_install_n>
#to get the device
[root@localhost grub2]# cat device.map
# this device map was generated by anaconda
(hd0)      /dev/sda



##################################################
Lecture: GRUB2 And GRUB Legacy Configuration Files
##################################################
locations vary based off of distributions all configuration files for the grub booot loader live in the /boot dir

grub.cfg is the name of the grub2 configuration file generally found in the /boot/grub/grub.cfg

centos7 or redhat is foynd in the /boot/grub2/grub.cfg

/etc/grub.conf - grub legacy configuration file for redhat/centos and is only a symlink to grub.conf located in the /boot/grub directory (or grub2 directory dependingon distribution)

/etc/grub.cfg - grub2 configuration file and is only a symlink to grub.cfg located in the /boot/grub directory (or grub2 directory depending on distribution)

/boot/grub/menu.lst - is also a grub legacy configuration file for ubuntu/debian


##################################################
Lecture: initramfs and /boot
##################################################
the /boot dir is part of the standardized filesystem hierarchy standard and is used to contain configuration files related to booting of the system

examples:
grub configuration
intramfs config
kernel image config

what is initramfs?

initramfs is a gziped cpio archive that contains the kernel modules required for all hardware needed in order for the system boot.
it will also load init scripts and additional functionality in order for the system to boot.
on some system like centos 7 intramfs contains an entire usable system within itself

after the boot loader hands over the boot process to the kernel, the kernel will load and initalize the hardware required for the system.
the information/drivers for this hjardware is found by the kernel in the intramfs.
as soon as the hardware is initalized the init system is strated as PID .
as soon as the init system has completed boot up initramfs hands off the root file system /sysroot to / and mounts it on your system as configured in the /etc/fstab dir


#there is a entry for the file syetm handoff in /etc/fstab


##################################################
Quiz
##################################################


1) Which command will find files modified at least 3 days ago in your current working directory?
Incorrect

Correct answer
find . -mtime +3

2) Which of the following will verify the signature on a package to determine its integrity and origin?
Correct

Correct answer
rpm --checksig

3) Which file system stores files that are changed frequently?
Correct

Correct answer
/var

4) How would you set read/write/execute for the owner and no permissions for group/world?
Correct

Correct answer
chmod 700 file.txt

5) echo "hello" >> file.txt
Correct

Correct answer
Will append hello at the end of file.txt

6) If you want a command or process to continue running after exiting the system, which of these would you add to the front of the command?
Correct

Correct answer
nohup

7) While in vi command mode you type 3yy what is the result?
Correct

Correct answer
Will yank 3 lines starting with the line your cursor is on.

8) While attempting to shutdown the apache service with "systemctl stop httpd" you notice that there are httpd processes that are refusing to shut down. How might you send a SIGTERM signal to try and gently stop the processes to all httpd processes?
Incorrect

Correct answer
pkill httpd

9) uniq -d will:
Correct

Correct answer
Print only duplicate lines in a file.

10) Run level 6 can be used to:
Correct

Correct answer
Reboot the system

11) /etc/ld.so.conf is used to store shared library paths.
Correct

Correct answer
True

12) Which command is used to insert a single module into the kernel?
Correct

Correct answer
insmod

13) How would you extract information about the boot process?
Correct

Correct answer
Use the 'dmesg' command

14) If a symbolic link source is removed the symbolic link becomes broken.
Correct

Correct answer
True

15) You need to create a file full of zeros that is 1gig in size. Which command will perform this action? Choose the "best" possible answer.
Correct

Correct answer
dd if=/dev/zero of=filename bs=1M count=1024

16) Which character sequence will redirect standard output to standard error?
Correct

Correct answer
1>&2

17) The command shutdown -k
Correct

Correct answer
Only sends a warning message but does not shut down the system.

18) chmod 755 file.txt will:
Correct

Correct answer
Set the file permissions on file.txt to read/write/execute for the owner and read/execute for the group and everyone else.

19) Which utility (or utilities) can be used for creating and manage GPT partition tables?
Correct

Correct answer
parted, gdisk

20) The modprobe command is:
Correct

Correct answer
Automatically loads any depended upon modules and is generally the preferred way of loading kernel modules

21) id:3:initdefault sets the default runlevel for the system at 3.
Correct

Correct answer
True

22) Select the best answer: echo "test" >> test.txt && echo "mysheet" >> test.txt
Correct

Correct answer
The second echo command will only execute if the first echo command is successful

23) You've been tasked to manage an older Linux system running GRUB/GRUB-legacy. You're attempting to make kernel changes to allow the system to boot into an alternate kernel version. Which configuration file needs to be edited?
Correct

Correct answer
/boot/grub/menu.lst

24) If an executable file has the setuid octal bit of 4 applied what is the result?
Correct

Correct answer
The file is executed with the same permissions as the user/group who owns the file

25) You need to rerun the configuration of a deb package much like the configuration that was run during installation. How would you do this?
Correct

Correct answer
Use the dpkg-reconfigure command.

26) The nice priority ranges from:
Correct

Correct answer
-20 (highest priority/most favorable) to 19 (lowest priority)

27) fsck is a process that checks and repairs the Linux file system and can only be performed on unmounted file systems.
Correct

Correct answer
True

28) The export command can be used to set a variable and make it available to other shells in the environment.
Incorrect

Correct answer
True

Explanation
Although export is commonly used WITH variable definitions, it is actually used when you want to make that variable available outside of the current shell environment.

29) The 'init' command is:
Correct

Correct answer
Responsible for launching all other system startup processes and is the first process launched once the boot loader hands off to the system.

30) dpkg -i file.deb
Correct

Correct answer
Will install file.deb package.

31) You've created a Linux swap partition on /dev/xvdf using the mkswap command. Which command do you need to issue next in order to turn on swap?
Correct

Correct answer
swapon /dev/xvdf

32) The command 'wall "shutdown occurring in 5 minutes" ', when issued at the command line will send all users on the system a global standard output message on their running terminal.
Incorrect

Correct answer
True

33) GPT based partition tables can hold up to at least 128 primary partitions while MBR based partition tables can only hold four primary partitions.
Correct

Correct answer
True

34) sigkill signal is:
Correct

Correct answer
9

35) Which command dumps ext2/ext3/ext4 filesystem information?
Correct

Correct answer
dumpe2fs

36) set -o noclobber enables noclobber on your shell. What function does this perform?
Correct

Correct answer
Prevents accidental overwrites of existing files.

37) The sticky bit, if enabled as a permission, has what effect?
Incorrect

Correct answer
Only the directory's owner or file's owner can rename or delete files (chmod +t filename or chmod 1000) instead of anybody with write permissions

38) Which command is used to unload a kernel module?
Correct

Correct answer
rmmod

39) You're running an environment that has a GUI based interface installed on the system. Currently the default target is the multi-user target. Which task would you execute in order to change the default target the system changes into at boot time?
Correct

Correct answer
systemctl set-default graphical.target

40) fsck -A will:
Correct

Correct answer
Check all file systems listed in /etc/fstab

41) RPM -qpl will:
Correct

Correct answer
List all files in an RPM file.

42) The -t flag when passed to mkfs requires you to:
Correct

Correct answer
Specify the file system type.

43) Which permission bit is used for read?
Correct

Correct answer
4

44) Brackets [] when used as part of grep are known as a character class.
Correct

Correct answer
True

45) You're working on a Linux system with systemd as it's primary init manager. In order to change into the graphical target, what would you do?
Incorrect

Correct answer
systemctl isolate graphical.target

46) Which command will display just the currently set environment variables for your bash session?
Correct

Correct answer
env

47) You need to create a symbolic link with a target of /etc/passwd on /home/user/passwd. How would you do this?
Correct

Correct answer
ln -s /etc/passwd /home/user/passwd

48) DMA addresses are used as an alternative to communicating with i/o ports.
Incorrect

Correct answer
True

49) Your GRUB2 install has come corrupt what might you do in order to resolve the issue?
Correct

Correct answer
Recreate the grub.cfg configuration file grub-mkconfig > /boot/grub/grub.cfg, Reinstall the GRUB bootloader grub-install /device

50) If you need to see the total space used in the /home directory how would you do so?
Correct

Correct answer
du -c /home

51) Which runlevel is used to shift the system from one state (running) to another (off)?
Correct

52) Which command(s) are used to search and kill processes based on patterns or regular expressions instead of process id?
Correct

Correct answer
pkill, pgrep

53) What directory contains all the systems primary unit configuration files?
Correct

Correct answer
/usr/lib/systemd/system

54) Section 7 of the manual contains:
Correct

Correct answer
Miscellaneous (including macro packages and conven ‐ tions), e.g. man(7), groff(7)

55) 0x82 Typcode represents the:
Correct

Correct answer
Linux swap space

56) Which flag, when passed to the shutdown command, will force a fsck to be run during the boot up process?
Correct

Correct answer
-F

57) ln -s will:
Correct

Correct answer
Create a symbolic link.

58) shutdown -f tells the boot process to skip running fsck on reboot, while -F forces fsck to run during the boot process.
Incorrect

Correct answer
True

59) After updating the timeout option in /etc/default/grub how do you apply the changes to the GRUB configuration file?
Correct

Correct answer
grub-mkconfig > /boot/grub/grub.cfg

60) You've modified your system and want to boot into the graphical target every time your system boots and completes the boot process. In order make this persistent on your system so it boots into the graphical target each time the system starts, what would you do?
Correct

Correct answer
systemctl set-default graphical.target

61) What happens when you set the setuid on a directory?
Correct

Correct answer
It is ignored

62) You need to create a shared workspace for your accounting department. Every time a user inside a directory creates a file, that file or sub-directory needs to inherit the parent directory's group id. How would you accomplish this?
Correct

Correct answer
Set the setgid flag on the parent directory (chmod g+s parent_directory)

63) Shutdown -k will:
Correct

Correct answer
Only send a warning message and not actually shut down the system.

64) On a systemd based system you've just installed a MySQL server with no reported errors. However, after reboot you notice the service is not running. What might be the issue?
Correct

Correct answer
The service has not been enabled at boot time to start in the default target the system boots into

65) Hard links cannot exist across file systems.
Correct

Correct answer
True

66) Which command would you execute to cause the mysqld service to start anytime the system is booted into the multi-user.target, assuming the unit configuration file already specifies a WantedBy=multi-user.target option?
Correct

Correct answer
systemctl enable mysqld

67) telinit is used specifically for changing runlevels.
Correct

Correct answer
True

68) Which command allows you to view the contents of kernel messages in the kernel ring buffer?
Correct

Correct answer
dmesg

69) Which file system contains information about interrupts, IRQ's, ioports, and dma addresses?
Correct

Correct answer
/proc

70) dpkg is a package manager used for installing .deb packages on debian/ubuntu systems.
Correct

Correct answer
True

71) The command cat /etc/passwd | grep ^root will:
Correct

Correct answer
Display all the lines in the file that start with the pattern root.

72) /etc/passwd has the following syntax linuxacademy:x:501:10::/home/linuxacademy:/bin/bash What will cut -f1 -d: /etc/passwd send to standard output?
Correct

Correct answer
It will display all the usernames and only the users names from /etc/passwd

73) cat /etc/passwd | grep [a-z]ot will send what to standard output?
Correct

Correct answer
All alphabetical three character sequences that end with the character sequence 'ot'.

Explanation
The [a-z] option provides the grep command a range of values to use when testing the output.

74) How would you move a systemd based system into the graphical.target from the command line?
Correct

Correct answer
systemctl isolate graphical.target

75) Which grep variant will interpret the pattern as plain text strings (interpret the pattern literally)?
Correct

Correct answer
fgrep or grep -F
