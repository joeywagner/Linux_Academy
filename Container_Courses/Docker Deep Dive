##################################################
Introduction to Docker
##################################################
https://docs.docker.com/

Docker is an open-source project that automates the deployment of applications inside software containers
Docker containers wrap up a piece of software in a complete filesystem that contains everything it needs to run: code, runtime, system tools, system libraries â€“ anything you can install on a server.
This guarantees that it will always run the same, regardless of the environment it is running in.[5]

Basically its a tool or a set of tools that packages up an application and all its dependencies in a virtual container so that it can be run on any linux system or distribution

Does it run on linux only?
that depends on what you mean.  Docker can emulate linux within its container space, but the client to do so can be installed on linux windows and mac OSX systems

for windows, since the docker engine itself uses "linux specific" kernel features, it needs to use a lightweight virtual machine to do its work. you then use the client to control that virtualized docker engine to run and work with your containers

When might ii use docker?
there are a lot of reasons to use docker. although you will generally hear about docker usd in conjunction with development and deployment of applications there are a tone of examples for use:

configuration simplification
enhanced development productivity
server consolidation and management
application isolation
rapid isolation
rapid deployment
build management

keep in mind that these are only a few use cases.


##################################################
Containers Vs. Virtual Machines
##################################################
what is a virtual machine?
in basic terms a virtual machine is a emulation of a specific computer system type.
They operate based on the architecture and functions of a real computer and its implementation.

What is a container?
a container is entirely isolated set of packages, libraries and or applications that are completely independant from its surriondings

Why is the difference important?
from the perspective of getting the most performance out of the hardware purchased, virtualization was invented to allow  us to share but segragate server instances from each other.
this way we could protect one operating system from the another without letting CPU cycles, memory or disk go to waste

virtualization is becoming more granular.
we have virtual server but they are based on emulating virtual hardware through hypervisors.
this means that they are heavy in terms of system requirements.  Containers however use shared operating systems and are more efficient in system resources terms.


##################################################
Docker Architecture
##################################################
Container Architecture
Docker is s client-server application where both the daemon and client can be run on the same system or you can connect a Docker client with a remote Docker Daemon

Docker clients and daemons communicate via sockets or through a restful API
The main components of docker are
Daemon
Client
Docker.io registry

Container Architecture
instead of virtualizing hardware containers rest on top of a single linux instance.
This allows Docker (or generic LXC) to leave behind a lot of the bloat associated with a full hardware hyperviser.

Dont mistake the docker engine (or lxc process) as the equivalent of a hyperviser in a traditional vm, it is simply the encapsulating process on the underlying system


Hasn't this already been done?
Yes, containers are not a new concept in technology, it just appears that Docker has captured the buzz.
If you look around you will find a number of companies and projects have been working on the concept of application virtualization:
FreeBDC -jails
Sun solaris - zones
Google - lmctfy
openVZ



##################################################
The Docker Hub
##################################################
What is the docker hub?
the docker hub is a public registry/repo that is maintained by docker inc.  containing a large number of images that you can download and use to build containers
beginning to work with docker is as easy as visiting the site and signing up for an account:
http://hub.docker.com


##################################################
Docker Installation
##################################################
vim /etc/yum.repos.d/docker.repo

[dockerrepo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg
:wq

yum update
yum install docker-engine

sudo systemctl enable docker
sudo systemctl start docker


docker images
sudo docker images

cd /var/run
usermod <user> -G docker
logout and back in to get the changes


##################################################
Creating Our First Image
##################################################
docker version

docker info

cd /var/lib/docker
root@linux-VirtualBox:/var/lib/docker# ll
total 44
drwx--x--x 11 root root 4096 Jan 24 16:04 ./
drwxr-xr-x 76 root root 4096 Jan 24 16:04 ../
drwx------  5 root root 4096 Jan 24 16:04 aufs/
drwx------  4 root root 4096 Jan 24 20:01 containers/
drwx------  3 root root 4096 Jan 24 16:04 image/
drwxr-x---  3 root root 4096 Jan 24 16:04 network/
drwx------  4 root root 4096 Jan 24 16:04 plugins/
drwx------  2 root root 4096 Jan 24 16:04 swarm/
drwx------  2 root root 4096 Jan 24 16:27 tmp/
drwx------  2 root root 4096 Jan 24 16:04 trust/
drwx------  2 root root 4096 Jan 24 16:04 volumes/


docker ps -a

#pull an image
docker pull ubuntu:latest

docker run -i -t ubuntu:latest /bin/bash

docker restart <container>

docker attach <container>


##################################################
Working With Multiple Images
##################################################
docker run -i -t -d <contaner>  #the -d means the container will start daemonized, you wont attach to it immediately

docker inspect <image>

ctrl+p ctrl+q #this will exit and leave the container running

#difficult to impossible to control ip address allocation with docker, docker swarm and kubo can take care off this


##################################################
Packaging A Customized Container
##################################################
#after you install and configure the software that you want into a container you can make a image from it
docker commit -m "message" -a "author" <container name> <image_name> tcox/ubusshs:v1


#create a docker file
mkdir build
cd build
vim Dockerfile
#this is a custom ubuntu image with ssh already installed
FROM ubuntu:latest
MAINTAINER your_name <your_email>
RUN apt-get update
RUN apt-get install -y telnet openssh-server

:wq

docker build -t="the title" .


##################################################
Running Container Commands With Docker
##################################################
docker run -it ubuntu /bin/bash

top
#the load of a system with show the load of the underlying host OS

docker logs <container_name>

#run commands on a running container
docker exec <container_name> /bin/cat /etc/profile



##################################################
Exposing Our Container With Port Redirects
##################################################
docker run -d -p <host_port>:<container_port> <container_name>
docker run -d -p 80:80 containername:tag


##################################################
Exercise: Installation and Image Setup
##################################################

1. Update your system as appropriate for the distribution you are using. Use the instructions in the videos OR on the Docker site to add the DOCKER repository for installing the latest copy of Docker for your distribution and version.
[user@linuxacademy:~] sudo yum update (or upgrade)

2. Using the appropriate package management commands, install the 'docker' package. Once installed, enable the service so that it starts upon reboot. Additionally, start the 'docker' service and verify it is running.
[user@linuxacademy:~] sudo yum -y install docker
(Output) Package downloads and installs here
CentOS 7.x SOLUTION
[user@linuxacademy:~] sudo systemctl enable docker
[user@linuxacademy:~] sudo systemctl start docker
[user@linuxacademy:~] ps aux | grep docker
(Output)
root      5802  0.0  0.3 346424 12936 ?        Ssl  21:02   0:00 /usr/bin/docker -d --selinux-enabled
(Output)

3. Enable the non-root users to run 'docker' commands on the system. Create the appropriate group, add the users you want to have access to 'docker' commands, restart the 'docker' service and verify that non-root users can run basic 'docker' commands.
[user@linuxacademy:~] sudo groupadd docker
[user@linuxacademy:~] vim /etc/group
(Output)...
Find the line that looks like: docker:x:1001:
Add the 'user' user to the end of that line (after the :)
(Output)...
[user@linuxacademy:~] sudo service docker restart (OR sudo systemctl restart docker)
[user@linuxacademy:~] docker images
(Output)
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
(Output)

4.  Once 'docker' is installed and non-root users can run commands, use the appropriate 'docker' commands and options to download the latest available image in the public repository for Ubuntu. Once downloaded and installed, verify the image appears in the local base image list.
[user@linuxacademy:~] docker pull ubuntu:latest
(Output) NOTE: Your output may differ if image has been updated
latest: Pulling from docker.io/ubuntu
6071b4945dcf: Pull complete
5bff21ba5409: Pull complete
e5855facec0b: Pull complete
8251da35e7a7: Pull complete
Digest: sha256:1572e29178048ad9ab72e78edd4decc91a3d8a8dea0ca39817efc7cf2d86c6d7
Status: Downloaded newer image for docker.io/ubuntu:latest
(Output)...
[user@linuxacademy:~] docker images
(Output) NOTE: Again, your output may differ slightly
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
docker.io/ubuntu    latest              8251da35e7a7        11 days ago         188.3 MB
(Output)...

5. Start a container based upon the Ubuntu base image downloaded in Step #4. When you start the container, start it connected to the current terminal, in interactive mode, starting the bash shell for you to connect to. You may exit the container at that time.
[user@linuxacademy:~] docker run -it docker.io/ubuntu:latest /bin/bash
(Output) NOTE: Your output will differ based on the container ID assigned
root@7aaf3de3ed4f:/# exit



##################################################
Exercise: Creating Images from Containers
##################################################
1. Using the CentOS  base image download, start a container based on that image. Be sure that container starts connected to the current terminal in interactive mode and runs the bash command so you are logged in to the command prompt on the container once it boots.
[user@linuxacademy:~]$ docker run -it centos:centos6 /bin/bash
(Output)
[root@b237d65fd197 /]#
(Output)

2. Once you are sitting at a command prompt on the running container, execute the update command (installing all updates for the container OS).
[root@b237d65fd197 /]# yum -y update (or yum -y upgrade)
(Output)
List of packages needing update and being applied here
(Output)

3. Now that updates are complete, install the Apache Web Server. Once installed, make sure the web server service will start and verify that the container is listening on port 80 (install other software if needed to do so).
[root@b237d65fd197 /]# yum install httpd
(Output)
Installed:
  httpd.x86_64 0:2.2.15-45.el6.centos

Dependency Installed:
  apr.x86_64 0:1.3.9-5.el6_2                   apr-util.x86_64 0:1.3.9-3.el6_0.1    apr-util-ldap.x86_64 0:1.3.9-3.el6_0.1
  httpd-tools.x86_64 0:2.2.15-45.el6.centos    mailcap.noarch 0:2.1.31-2.el6        redhat-logos.noarch 0:60.0.14-12.el6.centos

Complete!
(Output)
[root@b237d65fd197 /]# yum install telnet
(Output)
Like output above, telnet is installed
(Output)
[root@b237d65fd197 /]# /etc/init.d/apachectl -d
(Output)
httpd start                              [OK]
(Output)
[root@b237d65fd197 /]# telnet localhost 80
(Output)
Trying 127.0.0.1...
Connected to localhost.localdomain.
Escape character is '^]'.
(Output)

4. Exit the container. Once the container is stopped, execute the appropriate command to list all stopped containers and locate the name and ID of the container you just exited. Make a note of the name and ID.
[root@b237d65fd197 /]# exit
[user@linuxacademy:~]$ docker ps -a
(Output)
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                   PORTS               NAMES
b237d65fd197        centos:6            "/bin/bash"         2 minutes ago         Exited (0) 2 minutes ago                       furious_rosalind
(Output)

5. Using the name or ID of the container, commit the changes you made within it to a new base image called "newcentos:withapache" and verify that it shows when you list the images on your system.
[user@linuxacademy:~]$ docker commit b237d65fd197 newcentos:withapache
(Output)
18bd1fc4d60fa29ff9591f46b86ea0ad7652214d81b4e26343723e81fdbffd8a
(Output)
[user@linuxacademy:~]$ docker images
(Output)
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
newcentos           withapache          18bd1fc4d60f        4 seconds ago       480.6 MB
centos              6                   a005304e4e74        9 weeks ago         203.1 MB
centos              centos6             a005304e4e74        9 weeks ago         203.1 MB
(Output)





##################################################
Exercise: Exposing Container Ports to the Host
##################################################
1. Create a container from the 'centos:6' base image on your system. This container does not need to be name but should be run in daemon mode, interactive and connected to the current terminal. Finally, it should start the bash shell on start up.
[user@linuxacademy ~]$ docker run -itd docker.io/centos:6 /bin/bash
99f87625ff34a5a25af8edd7e95ad9b6a4bc70db63c2ac6e0850dd4cfae58cef
[user@linuxacademy ~]$ docker ps
CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS              PORTS               NAMES
99f87625ff34        docker.io/centos:6   "/bin/bash"         3 seconds ago       Up 2 seconds                            elegant_bohr
[user@linuxacademy ~]$ docker ps
CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS              PORTS               NAMES
99f87625ff34        docker.io/centos:6   "/bin/bash"         5 seconds ago       Up 5 seconds                            elegant_bohr

2. Using the appropriate Docker inspection command, find the IP address and name for the running container. Once you have the IP, ping the IP to be sure it is running. Finally, attach to the running container so you are logged into the shell.
[user@linuxacademy ~]$ docker ps
CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS              PORTS               NAMES
99f87625ff34        docker.io/centos:6   "/bin/bash"         7 minutes ago       Up 7 minutes                            elegant_bohr
[user@linuxacademy]$ docker inspect elegant_bohr | grep IP
        "GlobalIPv6Address": "",
        "GlobalIPv6PrefixLen": 0,
        "IPAddress": "172.17.0.2",
        "IPPrefixLen": 16,
        "IPv6Gateway": "",
        "LinkLocalIPv6Address": "",
        "LinkLocalIPv6PrefixLen": 0,
        "SecondaryIPAddresses": null,
        "SecondaryIPv6Addresses": null
[user@linuxacademy ~]$ ping 172.17.0.2
PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.
64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.069 ms
64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.096 ms
^C
--- 172.17.0.2 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.069/0.082/0.096/0.016 ms
[user@linuxacademy ~]$ docker attach elegant_bohr
[root@99f87625ff34 /]#

3. From within the container, install the Open-SSH server and make sure the service is running. From another terminal, try to log into the container over SSH by IP and note the result.
[root@99f87625ff34 /]# yum install openssh-server
... Lots of Output Here
Installed:
  openssh-server.x86_64 0:5.3p1-112.el6_7

Dependency Installed:
  fipscheck.x86_64 0:1.2.0-7.el6              fipscheck-lib.x86_64 0:1.2.0-7.el6       openssh.x86_64 0:5.3p1-112.el6_7
  tcp_wrappers-libs.x86_64 0:7.6-57.el6

Complete!
[root@99f87625ff34 /]# service sshd start
Generating SSH2 RSA host key:                              [  OK  ]
Generating SSH1 RSA host key:                              [  OK  ]
Generating SSH2 DSA host key:                              [  OK  ]
Starting sshd:
(Different Terminal)
[user@linuxacademy ~]$ ssh test@172.17.0.2
ssh: connect to host 172.17.0.2 port 22: Connection refused

4. Exit and stop the container. Remove the container from the list of previously run containers once you obtain the name from the appropriate Docker command.
[user@linuxacademy ~]$ docker ps -a
CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS                         PORTS               NAMES
99f87625ff34        docker.io/centos:6   "/bin/bash"         About an hour ago   Exited (0) 4 seconds ago                           elegant_bohr
8ef073d5c7f4        docker.io/centos:6   "/bin/bash"         About an hour ago   Exited (0) About an hour ago                       silly_poincare
[user@linuxacademy ~]$ docker rm elegant_bohr
elegant_bohr
[user@linuxacademy ~]$ docker rm silly_poincare
silly_poincare
[user@linuxacademy ~]$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
docker.io/ubuntu    latest              91e54dfb1179        4 days ago          188.3 MB
docker.io/centos    6                   a005304e4e74        9 weeks ago         203.1 MB
[user@linuxacademy ~]$

5. Create another container, name this container 'test_ssh'. When creating the container, it should be run in interactive mode and attached to the current terminal running the bash shell. Finally, expose port 22 on the container to port 8022 on the host system. Once logged in, install the Open-SSH server and make sure the service is running. Find the IP address of the container and note it.
[user@linuxacademy ~]$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
[user@linuxacademy ~]$ docker ps -a
CONTAINER ID        IMAGE                COMMAND             CREATED             STATUS                         PORTS               NAMES
99f87625ff34        docker.io/centos:6   "/bin/bash"         About an hour ago   Exited (0) 4 seconds ago                           elegant_bohr
8ef073d5c7f4        docker.io/centos:6   "/bin/bash"         About an hour ago   Exited (0) About an hour ago                       silly_poincare
[user@linuxacademy ~]$ docker rm elegant_bohr
elegant_bohr
[user@linuxacademy ~]$ docker rm silly_poincare
silly_poincare
[user@linuxacademy ~]$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
docker.io/ubuntu    latest              91e54dfb1179        4 days ago          188.3 MB
docker.io/centos    6                   a005304e4e74        9 weeks ago         203.1 MB
[user@linuxacademy ~]$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
docker.io/ubuntu    latest              91e54dfb1179        4 days ago          188.3 MB
docker.io/centos    6                   a005304e4e74        9 weeks ago         203.1 MB
[user@linuxacademy ~]$ docker run -it --name="test_ssh" -p 8022:22 docker.io/centos:6 /bin/bash
Usage of loopback devices is strongly discouraged for production use. Either use `--storage-opt dm.thinpooldev` or use `--storage-opt dm.no_warn_on_loop_devices=true` to suppress this warning.
[root@de1119934beb /]# yum install openssh-server
Loaded plugins: fastestmirror
Setting up Install Process
base                                                                                                    | 3.7 kB     00:00
base/primary_db                                                                                         | 4.6 MB     00:07
extras                                                                                                  | 3.4 kB     00:00
extras/primary_db                                                                                       |  27 kB     00:00
updates                                                                                                 | 3.4 kB     00:00
updates/primary_db                                                                                      | 1.3 MB     00:01
Resolving Dependencies
--> Running transaction check
---> Package openssh-server.x86_64 0:5.3p1-112.el6_7 will be installed
--> Processing Dependency: openssh = 5.3p1-112.el6_7 for package: openssh-server-5.3p1-112.el6_7.x86_64
--> Processing Dependency: libwrap.so.0()(64bit) for package: openssh-server-5.3p1-112.el6_7.x86_64
--> Processing Dependency: libfipscheck.so.1()(64bit) for package: openssh-server-5.3p1-112.el6_7.x86_64
--> Running transaction check
---> Package fipscheck-lib.x86_64 0:1.2.0-7.el6 will be installed
--> Processing Dependency: /usr/bin/fipscheck for package: fipscheck-lib-1.2.0-7.el6.x86_64
---> Package openssh.x86_64 0:5.3p1-112.el6_7 will be installed
---> Package tcp_wrappers-libs.x86_64 0:7.6-57.el6 will be installed
--> Running transaction check
---> Package fipscheck.x86_64 0:1.2.0-7.el6 will be installed
--> Finished Dependency Resolution

Dependencies Resolved

===============================================================================================================================
 Package                            Arch                    Version                             Repository                Size
===============================================================================================================================
Installing:
 openssh-server                     x86_64                  5.3p1-112.el6_7                     updates                  324 k
Installing for dependencies:
 fipscheck                          x86_64                  1.2.0-7.el6                         base                      14 k
 fipscheck-lib                      x86_64                  1.2.0-7.el6                         base                     8.3 k
 openssh                            x86_64                  5.3p1-112.el6_7                     updates                  274 k
 tcp_wrappers-libs                  x86_64                  7.6-57.el6                          base                      62 k

Transaction Summary
===============================================================================================================================
Install       5 Package(s)

Total download size: 682 k
Installed size: 1.6 M
Is this ok [y/N]: y
Downloading Packages:
(1/5): fipscheck-1.2.0-7.el6.x86_64.rpm                                                                 |  14 kB     00:00
(2/5): fipscheck-lib-1.2.0-7.el6.x86_64.rpm                                                             | 8.3 kB     00:00
(3/5): openssh-5.3p1-112.el6_7.x86_64.rpm                                                               | 274 kB     00:00
(4/5): openssh-server-5.3p1-112.el6_7.x86_64.rpm                                                        | 324 kB     00:00
(5/5): tcp_wrappers-libs-7.6-57.el6.x86_64.rpm                                                          |  62 kB     00:00
-------------------------------------------------------------------------------------------------------------------------------
Total                                                                                          306 kB/s | 682 kB     00:02
warning: rpmts_HdrFromFdno: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY
Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
Importing GPG key 0xC105B9DE:
 Userid : CentOS-6 Key (CentOS 6 Official Signing Key) <centos-6-key@centos.org>
 Package: centos-release-6-6.el6.centos.12.2.x86_64 (@CentOS/$releasever)
 From   : /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
Is this ok [y/N]: y
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
Warning: RPMDB altered outside of yum.
  Installing : fipscheck-1.2.0-7.el6.x86_64                                                                                1/5
  Installing : fipscheck-lib-1.2.0-7.el6.x86_64                                                                            2/5
  Installing : openssh-5.3p1-112.el6_7.x86_64                                                                              3/5
  Installing : tcp_wrappers-libs-7.6-57.el6.x86_64                                                                         4/5
  Installing : openssh-server-5.3p1-112.el6_7.x86_64                                                                       5/5
  Verifying  : tcp_wrappers-libs-7.6-57.el6.x86_64                                                                         1/5
  Verifying  : fipscheck-lib-1.2.0-7.el6.x86_64                                                                            2/5
  Verifying  : fipscheck-1.2.0-7.el6.x86_64                                                                                3/5
  Verifying  : openssh-5.3p1-112.el6_7.x86_64                                                                              4/5
  Verifying  : openssh-server-5.3p1-112.el6_7.x86_64                                                                       5/5

Installed:
  openssh-server.x86_64 0:5.3p1-112.el6_7

Dependency Installed:
  fipscheck.x86_64 0:1.2.0-7.el6              fipscheck-lib.x86_64 0:1.2.0-7.el6       openssh.x86_64 0:5.3p1-112.el6_7
  tcp_wrappers-libs.x86_64 0:7.6-57.el6

Complete!
[root@de1119934beb /]# service sshd start
Generating SSH2 RSA host key:                              [  OK  ]
Generating SSH1 RSA host key:                              [  OK  ]
Generating SSH2 DSA host key:                              [  OK  ]
Starting sshd:                                             [  OK  ]
[root@de1119934beb /]# ifconfig
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:03
          inet addr:172.17.0.3  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:acff:fe11:3/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:3944 errors:0 dropped:0 overruns:0 frame:0
          TX packets:2104 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:7151212 (6.8 MiB)  TX bytes:116622 (113.8 KiB)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
[root@de1119934beb /]#

6. Install the 'sudo' utility. Add a user called 'test' and set a password for that user. Add the 'test' user to the 'sudoers' file. From another terminal window, attempt to log into the container via SSH on port 8022 as the 'test' user and confirm access.
[root@de1119934beb /]# yum install sudo
Loaded plugins: fastestmirror
Setting up Install Process
Determining fastest mirrors
 * base: repos.dfw.quadranet.com
 * extras: centos.mirror.lstn.net
 * updates: mirror.steadfast.net
Resolving Dependencies
--> Running transaction check
---> Package sudo.x86_64 0:1.8.6p3-20.el6_7 will be installed
--> Finished Dependency Resolution

Dependencies Resolved

===============================================================================================================================
 Package                  Arch                       Version                                 Repository                   Size
===============================================================================================================================
Installing:
 sudo                     x86_64                     1.8.6p3-20.el6_7                        updates                     707 k

Transaction Summary
===============================================================================================================================
Install       1 Package(s)

Total download size: 707 k
Installed size: 2.4 M
Is this ok [y/N]: y
Downloading Packages:
sudo-1.8.6p3-20.el6_7.x86_64.rpm                                                                        | 707 kB     00:02
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing : sudo-1.8.6p3-20.el6_7.x86_64                                                                                1/1
  Verifying  : sudo-1.8.6p3-20.el6_7.x86_64                                                                                1/1

Installed:
  sudo.x86_64 0:1.8.6p3-20.el6_7

Complete!
[root@de1119934beb /]# adduser test
[root@de1119934beb /]# passwd test
Changing password for user test.
New password:
BAD PASSWORD: it is based on a dictionary word
Retype new password:
passwd: all authentication tokens updated successfully.
[root@de1119934beb /]#
(Other Terminal Window)
[user@linuxacademy ~]$ ssh test@172.17.0.3
The authenticity of host '172.17.0.3 (172.17.0.3)' can't be established.
RSA key fingerprint is e8:5e:28:d8:64:1f:81:3a:d9:4c:2c:0c:8e:a1:27:b7.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '172.17.0.3' (RSA) to the list of known hosts.
test@172.17.0.3's password:
[test@de1119934beb ~]$



##################################################
The Dockerfile, Builds and Network Configuration
##################################################
##################################################
Dockerfile Directives: USER and RUN
##################################################
mkdir Builds
cd Builds
mkdir RunAsUser
cd RunAsUser
vim Dockerfile
#This a docker file based on centos image - non-privilege user entry
FROM centos:latest
MAINTAINER joeywagner@gmail.com

RUN useradd -ms /bin/bash user
USER user
:wq

docker build -t centos7/nonroot:v1 .

docker run -it centos7/nonroot:v1 /bin/bash

#connect to the container as root
docker start <container_name>
docker exec -u 0 -it <container_name> /bin/bash


##################################################
Dockerfile Directives: RUN Order of Execution
##################################################
mkdir CustomMessage
cd CustomeMessage
cp ../RunAsUser/Dockerfile .
vim Dockerfile
#This a docker file based on centos image - non-privilege user entry
FROM centos:latest
MAINTAINER joeywagner@gmail.com

RUN echo "EXPORT 192.168.1.0/24"  >> /etc/exports.list
RUN useradd -ms /bin/bash user
USER user

#RUN echo "EXPORT 192.168.1.0/24"  >> /etc/exports.list #everything run after the user user was created will run as user, anything before will be run as root
:wq

#the order of execution is linear from top to bottom



##################################################
Dockerfile Directives: ENV
##################################################
makdir JavaInstall
cd JavaInstall
cp ../CustomeMessage/Dockerfile .
vim Dockerfile
#This a docker file based on centos image - non-privilege user entry
FROM centos:latest
MAINTAINER joeywagner@gmail.com

RUN echo "EXPORT 192.168.1.0/24"  >> /etc/exports.list
RUN useradd -ms /bin/bash user

RUN yum update -y
RUN yum install -y net-tools wget

RUN cd ~ &&   wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u112-b15/jdk-8u112-linux-x64.rpm

RUN  yum localingstall -y ~/jdk-8u112-linux-x64.rpm


USER user

RUN cd ~ && echo "export JAVA_HOME=/usr/java/jdk1.8.0/jre" >> /home/user/.bashrc

ENV JAVA_BIN /usr/java/jdk1.8.0/jre/bin

:wq

#the order of execution is linear from top to bottom

docker build -t cerntos7/java:v1 .

docker run =it cerntos7/java:v1 /bin/bash

##################################################
Dockerfile Directives: CMD vs. RUN
##################################################
mkdir EchoServer
cd EchoServer
cp ../RunAsUser/Dockerfile .
vim Dockerfile
#This a docker file based on centos image - non-privilege user entry
FROM centos:latest
MAINTAINER joeywagner@gmail.com

RUN useradd -ms /bin/bash user

CMD "echo" "This is a custom container message"


USER user
:wq

docker build -t centos7/echo:v1 .

docker run -it centos7/nonroot:v1 /bin/bash


##################################################
Dockerfile Directives: ENTRYPOINT
##################################################
mkdir Entry
cd Entry
cp ../EchoServer/Dockerfile .
vim Dockerfile
#This a docker file based on centos image - non-privilege user entry
FROM centos:latest
MAINTAINER joeywagner@gmail.com

RUN useradd -ms /bin/bash user

ENTRYPOINT echo "This command will display this message on EVERY container that is run from it"

USER user
:wq

docker build -t centos7/entry:v1 .

docker images

docker run -it centos7/entry:v1 /bin/bash


#the difference between echo and entrypoint, you cant override the entrypoint
#entrypoint will force that command to run no matter what


##################################################
Dockerfile Directives: EXPOSE
##################################################
mkdir ApacheInstallation
cd ApacheInstallation
vim ApacheInstallation
#this is a image based on centos7 and will start the apache service in each container
FROM: centos:latest
MAINTAINER joeywagner@gmail.com

RUN yum update -y
RUN install -y httpd net-tools

RUN echo "This is a custom index file built during the image creation" > /var/www/html/index.html

ENTRYPOINT apachectl "-DFOREGROUND"

:wq

docker images
docker build -t centos7/apachr:v1

docker images
docker run -d --name apacheweb centos7/apache:v1

docker inspect apacheweb

docker exec apacheweb /bin/cat /var/www/index.html

docker stop apacheweb

docker run -d --name apacheweb2 -P #this doesnt have any ports exposed so it wont

docker stop apacheweb2

docker run -d --name apacheweb3 -p 8080:80 centos7/apache:v1

docker stop apacheweb3

vim ApacheInstallation
#this is a image based on centos7 and will start the apache service in each container
FROM: centos:latest
MAINTAINER joeywagner@gmail.com

RUN yum update -y
RUN install -y httpd net-tools

RUN echo "This is a custom index file built during the image creation" > /var/www/html/index.html

EXPOSE 80

ENTRYPOINT apachectl "-DFOREGROUND"

:wq

docker build -t centos7/apachr:v1
docker run -d --name apacheweb4 -P centos7/apache:v1

##################################################
Container Volume Management
##################################################
docker run -it --name voltest1 -v /mydata centos7:latest /bin/bash
cd mydata
echo "this is a test container file" > mytext.txt

cd /var/lib/docker
cd volumes/45654656647/_data #this is where your volume data is saved

#mount directories that already has data in it
mkdir MyHostDir
cd MyHostDir
echo "something " > config.local
echo "something" > messages.txt
echo "gsdfagadhas" > app.bin
chmod 755 app.bin

docker run -it --name voltest2 -v /root/Builds/MyHostDir:/mydata centos7:latest /bin/bash

df -h
cd /mydata

#you can not mount a file that is local in a dockerfile, thats because docker files are supposed to be portable


##################################################
Docker Network: List and Inspect
##################################################
docker network ls
docker network ls --no-trunc

docker network inspect <network_name>


##################################################
Docker Network: Create and Remove
##################################################
docker network create
man docker-network-create  #if you want to see man page just add ---- between the commands
docker network create --subnet 10.1.0.0/24 --gateway 10.1.0.1 mybridge01

docker network ls

ifconfig #you will see the new adapter created

docker network rm <network_name>

##################################################
Docker Network: Assign to Containers
##################################################
docker network create --subnet 10.1.0.0/16 --gateway 10.1.0.1 --ip-range=10.1.4.0/24 --driver=bridge --label=host4network bridge04  #there is another driver called overlay thats used for clustering
docker network ls

docker run -it --name nettest1 --net bridge04 centos7:latest /bin/bash


#net-tools gives you networking tools like ifconfig

docker run -it --name nettest2 --net bridge04 --ip 10.1.4.100 centos7:latest /bin/bash


##################################################
Exercise: Creating Custom Image from a Dockerfile
##################################################
1. Create a directory called 'custom' and change to it. In this directory, create an empty file called "Dockerfile".
[user@linuxacademy:~]$ mkdir custom
[user@linuxacademy:~]$ cd custom
[user@linuxacademy:custom/]$ touch Dockerfile

2. Edit the "Dockerfile" created in Step #1 above. This configuration file should be written to perform the following actions:
Use the base Centos 6 Latest version image from the public repository
Identify you and your email address as the author and maintainer of this image
Update the base OS after initial import of the image
Install the Open-SSH Server
Install Apache Web Server
Expose ports 22 and 80 to support the services installed
[user@linuxacademy:custom/]$ vi Dockerfile
(Output) NOTE: This is one example of what this file needs to contain, yours may differ slightly
 # Dockerfile that modifies centos:centos6 to update, include Apache Web
# Server and OpenSSH Server, exposing the appropriate ports
FROM centos:centos6
MAINTAINER User Name <username@domain.com>

# Update the server OS
RUN yum -y upgrade

# Install Apache Web Server
RUN yum -y install httpd

# Install OpenSSH-Server
RUN yum -y install openssh-server

# Expose the SSH and Web Ports for attachment
EXPOSE 22 80
(Output)

3. Build the custom image from the 'Dockerfile' as created above. Name/tag this new image as "mycustomimg/withservices:v1". Once the image is built, verify the image appears in your list.




##################################################
Exercise: Managing Containers
##################################################
1. Create a container from the base image for the latest version of Ubuntu available (if you do not have an Ubuntu base image installed locally, pull the latest one down for your local repository). The container should be started in interactive mode attached to the current terminal and running the bash shell. Once running, shut the container down by exiting.
user@linuxacademy:~$ docker pull ubuntu:latest
Pulling repository ubuntu
91e54dfb1179: Download complete
d3a1f33e8a5a: Download complete
c22013c84729: Download complete
d74508fb6632: Download complete
Status: Downloaded newer image for ubuntu:latest
user@linuxacademy:~$ docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
mycustomimg/withservices   v1                  dcfdd130c812        29 hours ago        506.9 MB
newcentos                  withapache          18bd1fc4d60f        2 days ago          480.6 MB
ubuntu                     latest              91e54dfb1179        4 days ago          188.4 MB
ubuntu                     trusty              91e54dfb1179        4 days ago          188.4 MB
ubuntu                     trusty-20150814     91e54dfb1179        4 days ago          188.4 MB
ubuntu                     14.04               91e54dfb1179        4 days ago          188.4 MB
ubuntu                     14.04.3             91e54dfb1179        4 days ago          188.4 MB
centos                     6                   a005304e4e74        9 weeks ago         203.1 MB
centos                     centos6             a005304e4e74        9 weeks ago         203.1 MB
user@linuxacademy:~$ docker run -it ubuntu:latest /bin/bash
root@a163412a382b:/# exit
exit

2. Run the appropriate Docker command to get the name of the previously run container. Issue the appropriate command to restart the container that you obtained the name of. Do NOT create a new container, restart the one we just used.
user@linuxacademy:~$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS                          PORTS               NAMES
a163412a382b        ubuntu:14.04        "/bin/bash"         About a minute ago   Exited (0) About a minute ago                       agitated_bohr
b237d65fd197        centos:6            "/bin/bash"         2 days ago           Exited (0) 2 days ago                               furious_rosalind
user@linuxacademy:~$ docker restart agitated_bohr
agitated_bohr
user@linuxacademy:~$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
a163412a382b        ubuntu:14.04        "/bin/bash"         2 minutes ago       Up 16 seconds                           agitated_bohr

3. Stop the container. Remove that container from the system completely using the appropriate command.
user@linuxacademy:~$ docker stop agitated_bohr
agitated_bohr
user@linuxacademy
:~$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
user@linuxacademy
:~$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES
a163412a382b        ubuntu:14.04        "/bin/bash"         3 minutes ago       Exited (0) 5 seconds ago                       agitated_bohr
b237d65fd197        centos:6            "/bin/bash"         2 days ago          Exited (0) 2 days ago                          furious_rosalind
user@linuxacademy
:~$ docker rm agitated_bohr
agitated_bohr
user@linuxacademy
:~$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                  PORTS               NAMES
b237d65fd197        centos:6            "/bin/bash"         2 days ago          Exited (0) 2 days ago                       furious_rosalind

4. Create (not run) a container called "my_container", create it with parameters that will allow it to run interactively and attached to the local console running the bash shell. Verify that the container is not running.
user@linuxacademy:~$ docker create -it --name="my_container" ubuntu:latest /bin/bash
a8eccaa97e322ff640bb9f7071f191dc9a514afb324af28269ffbb7ae754666f
user@linuxacademy
:~$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                  PORTS               NAMES
a8eccaa97e32        ubuntu:14.04        "/bin/bash"         4 seconds ago                                                   my_container
b237d65fd197        centos:6            "/bin/bash"         2 days ago          Exited (0) 2 days ago                       furious_rosalind
5. Start the container and again, verify the container is running. Run the appropriate command to attach your session to the running container so you are logged into the shell.
user@linuxacademy:~$ docker start my_container
my_container
user@linuxacademy
:~$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
a8eccaa97e32        ubuntu:14.04        "/bin/bash"         30 seconds ago      Up 2 seconds                            my_container
user@linuxacademy
:~$ docker attach my_container
root@a8eccaa97e32:/#
root@a8eccaa97e32:/# exit



##################################################
Exercise: Adding External Content to Containers
##################################################
1. Create a directory in your 'user' home directory called 'docker'. Within that directory, create another directory called 'mydata'. Within that directory, create a file called 'mydata.txt' containing any text message you want.
[user@linuxacademy ~]$ mkdir docker
[user@linuxacademy ~]$ cd docker
[user@linuxacademy ~]$ mkdir mydata
[user@linuxacademy ~]$ cd mydata
[user@linuxacademy mydata]$ ll
total 0
[user@linuxacademy mydata]$ echo "this is host data" >> mydata.txt
[user@linuxacademy mydata]$ ll
total 4
-rw-rw-r-- 1 user user 18 Aug 25 15:21 mydata.txt
[user@linuxacademy mydata]$ cd ..
[user@linuxacademy docker]$ ll
total 0
drwxrwxr-x 2 user user 23 Aug 25 15:21 mydata

2. Create a docker container name 'local_vol' from the 'centos:6' image. The container should be created in interactive mode, attached to the current terminal and running the bash shell. Finally create the container with a volume (or directory) called 'containerdata' so that the system will automatically create the directory/mount when the container starts.
[user@linuxacademy docker]$ docker run -it --name="local_vol" -v /containerdata centos:6 /bin/bash
[root@191131068f8c /]#


3. List the filesystems within the container, specifically looking for the volume/directory that was added to the container during creation.
[root@191131068f8c /]# df -h
Filesystem            Size  Used Avail Use% Mounted on
rootfs                9.8G  254M  9.0G   3% /
/dev/mapper/docker-8:2-203558447-191131068f8ceffe6fb38198a61b9806f27e4d22de3c8b0d2aec4c0c4fe7f88d
                      9.8G  254M  9.0G   3% /
tmpfs                 2.0G     0  2.0G   0% /dev
shm                    64M     0   64M   0% /dev/shm
/dev/sda2              36G  4.3G   32G  12% /containerdata
tmpfs                 2.0G     0  2.0G   0% /run/secrets
/dev/sda2              36G  4.3G   32G  12% /etc/resolv.conf
/dev/sda2              36G  4.3G   32G  12% /etc/hostname
/dev/sda2              36G  4.3G   32G  12% /etc/hosts
tmpfs                 2.0G     0  2.0G   0% /proc/kcore
tmpfs                 2.0G     0  2.0G   0% /proc/timer_stats
[root@191131068f8c /]# ls -al /containerdata/
total 4
drwxr-xr-x  2 root root    6 Aug 25 20:46 .
drwxr-xr-x 23 root root 4096 Aug 25 20:46 ..

[root@191131068f8c /]#

4. Exit the container. This time, create another container called 'remote_vol' with the same container configuration except when creating the volume in the container, link the volume name 'mydata' to the underlying host directory structure created in Step #1.
[user@linuxacademy docker]$ docker run -it --name="remote_vol" -v /home/user/docker/mydata:/mydata centos:6 /bin/bash
[root@0476d5af242f /]#

5. Once the container is started, list the disk mounts and verify the remote (host) volume is mounted. Change to that directory and verify that the text file created in Step #1 appears with the content created.
[root@0476d5af242f /]# df -h
Filesystem            Size  Used Avail Use% Mounted on
rootfs                9.8G  254M  9.0G   3% /
/dev/mapper/docker-8:2-203558447-0476d5af242fa74f4e0e65efd02191685570ef89995d57716a2ff09c3078d7f8
                      9.8G  254M  9.0G   3% /
tmpfs                 2.0G     0  2.0G   0% /dev
shm                    64M     0   64M   0% /dev/shm
/dev/sda2              36G  4.3G   32G  12% /mydata
tmpfs                 2.0G     0  2.0G   0% /run/secrets
/dev/sda2              36G  4.3G   32G  12% /etc/resolv.conf
/dev/sda2              36G  4.3G   32G  12% /etc/hostname
/dev/sda2              36G  4.3G   32G  12% /etc/hosts
tmpfs                 2.0G     0  2.0G   0% /proc/kcore
tmpfs                 2.0G     0  2.0G   0% /proc/timer_stats
[root@0476d5af242f /]# ls -al /mydata/
total 8
drwxrwxr-x  2 1000 1000   23 Aug 25 20:21 .
drwxr-xr-x 23 root root 4096 Aug 25 20:51 ..
-rw-rw-r--  1 1000 1000   18 Aug 25 20:21 mydata.txt
[root@0476d5af242f /]# cat /mydata/mydata.txt
this is host data
[root@0476d5af242f /]#


##################################################
Docker Commands and Structures
##################################################
##################################################
Inspect Container Processes
##################################################
docker start <container_name> /bin/bash
docker ps
docker exec <container_name> /bin/ps aux | grep bash

docker exec -i -t <container_name> /bin/bash
exit
docker ps #you can see that the container is still running after we exit, thats because we started a second bash session


docker top <container_name> #we can see what processes are running on the container

docker stats <container_name> #resource stats for the container, realtime


##################################################
Previous Container Management
##################################################
docker images
docker ps
docker ps -a
docker ps -a -q #just container ids -q
docker ps -a -q | wc -l

docker rm <container_id>
also
docker rm <container_name>
also
docker rm <container_name> <container_id> #combinations

#what is you wanted to remove a running container
docker rm -f <container_id>

#to remove all the previous containers
docker rm `docker ps -a -q `

sudo systemctl stop docker

cd /var/lib/docker/containers
#whats in here will will match whats on your system

rm -rf <container_id>

#the reason you want to stop docker is because docker could lock the file

##################################################
Controlling Port Exposure on Containers
##################################################
docker run -itd -p 80 nginx:latest

docker run -itd -p 8080:80 nginx:latest #redirecting container 80 to port localhost:8080

docker run -itd -P 8080:80 nginx:latest #the -P means whatever ports are exposed in the container will be exposed on the localhost

docker run -itd -p 127.0.0.1:8081:80 nginx:latest


##################################################
Naming Our Containers
##################################################
no wild cards * no -, but _ are ok

#name a container
docker run -itd --name mycontainername ubuntu:xenial /bin/bash

#rename a container
docker rename <current_name> <new_name>

##################################################
Docker Events
##################################################
docker events #it will attach to the docker daemon and wait for events to happen

docker events --since '1h'

docker events --filter <filter>

https://docs.docker.com/engine/reference/commandline/system_events/

##################################################
Managing and Removing Base Images
##################################################
docker rmi <image_name>

##################################################
Saving and Loading Docker Images
##################################################
docker save --output centos.latest.tar centos:latest

docker load --imput centos.latest.tar.gz

##################################################
Image History
##################################################
docker images

docker history <image_name>

docker history --no-trunc <image_name>

docker history --human <image_name>

##################################################
Taking Control of Our Tags
##################################################
docker tag <image_id>

docker tag <image_name> <new_image_name>

##################################################
Pushing to Docker Hub
##################################################
docker login
dockerid
PW

cd .docker

docker logout

docker tag <image_name> <docker_hub_imahe_name>

docker push <image_name>


##################################################
Exercise: Base Image Maintenance and Cleanup
##################################################
1. List all currently install Docker images. If you do not have at least three Docker base images at this point, please pull down other Docker images and/or follow the other exercises in this tutorial.
user@linuxacademy:~$ docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
mycustomimg/withservices   v1                  dcfdd130c812        30 hours ago        506.9 MB
newcentos                  withapache          18bd1fc4d60f        2 days ago          480.6 MB
ubuntu                     latest              91e54dfb1179        4 days ago          188.4 MB
ubuntu                     trusty              91e54dfb1179        4 days ago          188.4 MB
ubuntu                     trusty-20150814     91e54dfb1179        4 days ago          188.4 MB
ubuntu                     14.04               91e54dfb1179        4 days ago          188.4 MB
ubuntu                     14.04.3             91e54dfb1179        4 days ago          188.4 MB
centos                     6                   a005304e4e74        9 weeks ago         203.1 MB
centos                     centos6             a005304e4e74        9 weeks ago         203.1 MB

2. Execute the command to remove a base image that you have previously created a container from and note the resulting message.
user@linuxacademy:~$ docker rmi centos:6
Error response from daemon: Conflict, cannot delete a005304e4e74 because the container bad607059560 is using it, use -f to force
FATA[0000] Error: failed to remove one or more images

3. Run the appropriate command to remove the container that Step #2 indicated is preventing the deletion of that base image.
user@linuxacademy:~$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES
bad607059560        centos:6            "/bin/bash"         2 minutes ago       Exited (0) About a minute ago                       insane_tesla
a8eccaa97e32        ubuntu:14.04        "/bin/bash"         29 minutes ago      Exited (0) 28 minutes ago                           my_container
b237d65fd197        centos:6            "/bin/bash"         2 days ago          Exited (0) 2 days ago                               furious_rosalind
user@linuxacademy:~$ docker rm insane_tesla
insane_tesla
user@linuxacademy:~$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES
a8eccaa97e32        ubuntu:14.04        "/bin/bash"         29 minutes ago      Exited (0) 28 minutes ago                       my_container
b237d65fd197        centos:6            "/bin/bash"         2 days ago          Exited (0) 2 days ago                           furious_rosalind

4. List all previously run containers and remove all of them one at a time. Verify that the command to list stopped containers shows nothing before continuing.
user@linuxacademy:~$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES
a8eccaa97e32        ubuntu:14.04        "/bin/bash"         30 minutes ago      Exited (0) 29 minutes ago                       my_container
b237d65fd197        centos:6            "/bin/bash"         2 days ago          Exited (0) 2 days ago                           furious_rosalind
user@linuxacademy:~$ docker rm my_container && docker rm furious_rosalind
my_container
furious_rosalind
user@linuxacademy:~$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

5. Rerun the command executed in Step #2 and then list the base images on your system.
user@linuxacademy:~$ docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
mycustomimg/withservices   v1                  dcfdd130c812        30 hours ago        506.9 MB
newcentos                  withapache          18bd1fc4d60f        2 days ago          480.6 MB
ubuntu                     14.04               91e54dfb1179        4 days ago          188.4 MB
ubuntu                     14.04.3             91e54dfb1179        4 days ago          188.4 MB
ubuntu                     latest              91e54dfb1179        4 days ago          188.4 MB
ubuntu                     trusty              91e54dfb1179        4 days ago          188.4 MB
ubuntu                     trusty-20150814     91e54dfb1179        4 days ago          188.4 MB
centos                     6                   a005304e4e74        9 weeks ago         203.1 MB
user@linuxacademy:~$ docker rmi centos:6
Untagged: centos:6
user@linuxacademy:~$ docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
mycustomimg/withservices   v1                  dcfdd130c812        30 hours ago        506.9 MB
newcentos                  withapache          18bd1fc4d60f        2 days ago          480.6 MB
ubuntu                     latest              91e54dfb1179        4 days ago          188.4 MB
ubuntu                     trusty              91e54dfb1179        4 days ago          188.4 MB
ubuntu                     trusty-20150814     91e54dfb1179        4 days ago          188.4 MB
ubuntu                     14.04               91e54dfb1179        4 days ago          188.4 MB
ubuntu                     14.04.3             91e54dfb1179        4 days ago          188.4 MB


##################################################
Exercise: Advanced Container Creation at the Command Line
##################################################
1. Using the Docker base image for Ubuntu, create a container with the following characteristics:
  - Interactive
  - Attached to Terminal
  - Using Google Public DNS
  - Named 'mycontainer1'
[user@linuxacademy docker]$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
docker.io/ubuntu    latest              91e54dfb1179        5 days ago          188.3 MB
docker.io/centos    6                   a005304e4e74        9 weeks ago         203.1 MB
[user@linuxacademy docker]$ docker run -it --dns=8.8.8.8 --name="mycontainer1" docker.io/ubuntu:latest /bin/bash
root@6330006f7289:/# cat /etc/resolv.conf
nameserver 8.8.8.8

2. Exit the container from Step #1. Using the Docker base image for Ubuntu, create a container with the following characteristics:
  - Interactive
  - Attached to Terminal
  - Using Google Public DNS
  - Using Domain Search "mydomain.local"
  - Named 'mycontainer2'
 [user@linuxacademy docker]$ docker run -it --dns=8.8.8.8 --dns-search="mydomain.local" --name="mycontainer2" docker.io/ubuntu:latest /bin/bash
root@2879176e6c81:/# cat /etc/resolv.conf
nameserver 8.8.8.8
search mydomain.local

3. Exit the container from Step #2. Using the Docker base image for Ubuntu, create a container with the following characteristics:
  - Interactive
  - Attached to Terminal
  - Using Google Public DNS
  - Using Domain Search "mydomain.local"
  - Create a mount called '/local_vol'
  - Create a mount called '/remote_vol' that mounts the file system in /home/user
  - Named 'mycontainer3'
[user@linuxacademy docker]$ docker run -it --dns=8.8.8.8 --dns-search="mydomain.local" --name="mycontainer3" -v /local_vol -v /home/tcox/docker/mydata:/remote_vol docker.io/ubuntu:latest /bin/bash
root@c5e3e6599556:/# df -h
Filesystem                                                                                         Size  Used Avail Use% Mounted on
/dev/mapper/docker-8:2-203558447-c5e3e65995567b3249f537843d4ff39644925c9265bbd48cd623b6e3564eef52  9.8G  245M  9.0G   3% /
tmpfs                                                                                              2.0G     0  2.0G   0% /dev
shm                                                                                                 64M     0   64M   0% /dev/shm
/dev/sda2                                                                                           36G  4.3G   32G  12% /local_vol
tmpfs                                                                                              2.0G     0  2.0G   0% /run/secrets
tmpfs                                                                                              2.0G     0  2.0G   0% /proc/kcore
tmpfs                                                                                              2.0G     0  2.0G   0% /proc/timer_stats
root@c5e3e6599556:/# cat /etc/resolv.conf
nameserver 8.8.8.8
search mydomain.local
root@c5e3e6599556:/# cd /local_vol/
root@c5e3e6599556:/local_vol# cd /remote_vol/
root@c5e3e6599556:/remote_vol#

4. Exit the container from Step #3. List all the containers. List all characteristics inspected from 'mycontainer2' and then remove and verify removal of all containers.
[user@linuxacademy docker]$ docker ps -a
CONTAINER ID        IMAGE                     COMMAND             CREATED             STATUS                     PORTS               NAMES
c5e3e6599556        docker.io/ubuntu:latest   "/bin/bash"         2 minutes ago       Exited (0) 3 seconds ago                       mycontainer3
2879176e6c81        docker.io/ubuntu:latest   "/bin/bash"         4 minutes ago       Exited (0) 3 minutes ago                       mycontainer2
6330006f7289        docker.io/ubuntu:latest   "/bin/bash"         7 minutes ago       Exited (0) 5 minutes ago                       mycontainer1
[user@linuxacademy docker]$ docker inspect mycontainer1
(NOTE: SOMETHING SIMILAR FOR EACH CONTAINER - RUN THE ABOVE COMMAND FOR EACH NAME)
[
{
    "Id": "6330006f72899510254d23f845c4507d604773d2fcf2bffb77f44da1330208c1",
    "Created": "2015-08-25T21:05:43.135824241Z",
    "Path": "/bin/bash",
    "Args": [],
    "State": {
        "Running": false,
        "Paused": false,
        "Restarting": false,
        "OOMKilled": false,
        "Dead": false,
        "Pid": 0,
        "ExitCode": 0,
        "Error": "",
        "StartedAt": "2015-08-25T21:05:44.409339189Z",
        "FinishedAt": "2015-08-25T21:07:32.103884307Z"
    },
    "Image": "91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c",
    "NetworkSettings": {
        "Bridge": "",
        "EndpointID": "",
        "Gateway": "",
        "GlobalIPv6Address": "",
        "GlobalIPv6PrefixLen": 0,
        "HairpinMode": false,
        "IPAddress": "",
        "IPPrefixLen": 0,
        "IPv6Gateway": "",
        "LinkLocalIPv6Address": "",
        "LinkLocalIPv6PrefixLen": 0,
        "MacAddress": "",
        "NetworkID": "",
        "PortMapping": null,
        "Ports": null,
        "SandboxKey": "",
        "SecondaryIPAddresses": null,
        "SecondaryIPv6Addresses": null
    },
    "ResolvConfPath": "/var/lib/docker/containers/6330006f72899510254d23f845c4507d604773d2fcf2bffb77f44da1330208c1/resolv.conf",
    "HostnamePath": "/var/lib/docker/containers/6330006f72899510254d23f845c4507d604773d2fcf2bffb77f44da1330208c1/hostname",
    "HostsPath": "/var/lib/docker/containers/6330006f72899510254d23f845c4507d604773d2fcf2bffb77f44da1330208c1/hosts",
    "LogPath": "/var/lib/docker/containers/6330006f72899510254d23f845c4507d604773d2fcf2bffb77f44da1330208c1/6330006f72899510254d23f845c4507d604773d2fcf2bffb77f44da1330208c1-json.log",
    "Name": "/mycontainer1",
    "RestartCount": 0,
    "Driver": "devicemapper",
    "ExecDriver": "native-0.2",
    "MountLabel": "",
    "ProcessLabel": "",
    "Volumes": {},
    "VolumesRW": {},
    "AppArmorProfile": "",
    "ExecIDs": null,
    "HostConfig": {
        "Binds": null,
        "ContainerIDFile": "",
        "LxcConf": [],
        "Memory": 0,
        "MemorySwap": 0,
        "CpuShares": 0,
        "CpuPeriod": 0,
        "CpusetCpus": "",
        "CpusetMems": "",
        "CpuQuota": 0,
        "BlkioWeight": 0,
        "OomKillDisable": false,
        "Privileged": false,
        "PortBindings": {},
        "Links": null,
        "PublishAllPorts": false,
        "Dns": [
            "8.8.8.8"
        ],
        "DnsSearch": null,
        "ExtraHosts": null,
        "VolumesFrom": null,
        "Devices": [],
        "NetworkMode": "bridge",
        "IpcMode": "",
        "PidMode": "",
        "UTSMode": "",
        "CapAdd": null,
        "CapDrop": null,
        "RestartPolicy": {
            "Name": "no",
            "MaximumRetryCount": 0
        },
        "SecurityOpt": null,
        "ReadonlyRootfs": false,
        "Ulimits": null,
        "LogConfig": {
            "Type": "json-file",
            "Config": {}
        },
        "CgroupParent": ""
    },
    "Config": {
        "Hostname": "6330006f7289",
        "Domainname": "",
        "User": "",
        "AttachStdin": true,
        "AttachStdout": true,
        "AttachStderr": true,
        "PortSpecs": null,
        "ExposedPorts": null,
        "Tty": true,
        "OpenStdin": true,
        "StdinOnce": true,
        "Env": null,
        "Cmd": [
            "/bin/bash"
        ],
        "Image": "docker.io/ubuntu:latest",
        "Volumes": null,
        "VolumeDriver": "",
        "WorkingDir": "",
        "Entrypoint": null,
        "NetworkDisabled": false,
        "MacAddress": "",
        "OnBuild": null,
        "Labels": {},
        "Init": ""
    }
}
]
[user@linuxacademy docker]$ docker rm mycontainer1
mycontainer1
[user@linuxacademy docker]$ docker rm mycontainer2
mycontainer2
[user@linuxacademy docker]$ docker rm mycontainer3
mycontainer3
[user@linuxacademy docker]$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES



##################################################
Integration and Use Cases
##################################################
##################################################
Building a Web Farm for Development and Testing (Prerequisites)
##################################################
#Some docker commands in ubuntu are run with docker.io
#we are setting this up locally

#Get your local ip address
ifconfig

##################################################
Building a Web Farm for Development and Testing (Part One)
##################################################
#You have to have docker and git installed on a VM
#Distribution does not matter
#in the instructors lab his is using centos7 as for his host and centos6 for his guests

docker pull centos:centos6

docker run -i -t centos:centos6 /bin/bash

#install the epel repo
yum install wget
http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-9.noarch.rpm
rpm -Uvh epel-release-7-9.noarch.rpm
yum install which sudo httpd php openssh-server

#we want services to start on boot
which service
vi .bashrc
#GOTO THE BOTTOM OF THE FILE
#add the service that we want to start
/sbin/service httpd start
/sbin/service openssh-server start

:wq
exit

#now you are in your VM and not in your container
docker commit <container_id> centos6:baseweb

docker images
#now we can see the centos6:baseweb is listed in our images

docker run -i -t centos6:baseweb /bin/bash
#openssh isnt correct, this needs to be fixed
service sshd start

docker images

docker rmi centos6:baseweb
#this will fail but will give us the container ID, it fails because there is a container that relies on this image

docker rm <container_id>
#now that the container is removed we can remove the image

docker rmi centos6:baseweb

#we dont have to recreate the base image because we have the container reference id
####docker commit <container_id> centos6:baseweb  the container ID from here

docker start <container_id>

docker attach <container_id>

cd
vi .bashrc
#fix openssh-server
/sbin/service sshd start

:wq

exit

docker commit <container_id> centos6:baseweb

docker images

docker run -i -t centos6:baseweb /bin/bash


##################################################
Building a Web Farm for Development and Testing (Part Two)
##################################################
#to build a site go to opensource web design www.oswd.org

#create a web directory on out local system
cp /home/user/Downloads/whatever.zip .

mkdir docker
cd docker
mkdir dockerwww
cd dockerwww
unzip whatever.zip
mv whatever/*.
rm -rf whatever/

docker images
docker run --name=webtest -i -t centos6:baseweb /bin/bash
exit

docker rm webtest

docker run --name=webtest -v /root/docker/dockerwww:/var/www/html -i -t centos6:baseweb /bin/bash

exit

git init . #this is the /root/docker/dockerwww
git status
git add *
git status
git commit -m "this is the initial commit"

docker start webtest

docker attach webtest

ps aux | gep httpd

ifconfig

df -h

yum install git #we can actually control this as a git repo, we can manage code from within our container

cd /var/www/html

git status

ls -al #we can see that this is a git repo


##################################################
Building a Web Farm for Development and Testing (Part Three)
##################################################
docker images
docker ps -a

docker commit webtest centos6:serverv1
docker images

docker run -i -t centos6:serverv1 /bin/bash

ps aux | httpd

df -h

#our volume isnt mounted because we built this from a images that want built from a dockerfile that had the mount in it

docker run --name=externalweb -p 8081:80 -i -t -v /root/docker/dockerwww:/var/www/html -i -t centos6:serverv1 /bin/bash

sudo su -

docker ps

passwd

#you will need to add a user to the container to ssh to it


##################################################
Building a Web Farm for Development and Testing (Part Four)
##################################################
docker commit externalweb centos6:finalwev1

mv dockerwww dockergit

git clone root@localhost:/root/docker/dockergit dockerwww

docker images

docker run -d -i -t --name=devweb1 -p 8081:80 -v /root/docker/dockerwww:/var/www/html centos:finalwev1 /bin/bash

docker run -d -i -t --name=devweb2 -p 8082:80 -v /root/docker/dockerwww:/var/www/html centos:finalwev1 /bin/bash

docker inspect devweb1 | grep ipaddress

docker inspect devweb2 | grep ipaddress

yum install nginx #on your local host

service nginx start

cd /etc/nginx
cd sites-available
vi default.conf
upsteam containerapp {
  server 192.168.1.35:8081;
  server 192.168.1.35:8082;
}

server {
  listen *:80;
  server_name 192.168.1.35;
  index index.html index.htm index.php

  access_log /var/log/nginx/localweb.log;
  error_log /var/log/nginx/localerr.log
  location / {
    proxy_pass http://containerapp;
  }
}

:wq


##################################################
Integrating Custom Network In Your Docker Containers
##################################################
service docker.io stop

ps aux | grep docker

ip link add br10 type bridge

ip addr add 10.10.100.1/24 device br10

ip link set br10 up

docker.io -d -b br10 &

docker run -i -t centos:centos6 /bin/bash

cat /system/rc.local #add your network setting

vim /etc/network/interface  #to bring br10 up on reboot
auto br10
iface br10 inet static
      address 10.10.100.1
      netmask 255.255.255.0
      bridge_ports dummy0
      bridge_stp off
      bridge_fd 0



##################################################
Testing Version Compatibility - Using Tomcat and Java (Prerequisites)
##################################################
#get your network config
ifconfig

download java 7 and 8 from oracle
download apache tomact 7 and 8

google tomcat test war file and download one

##################################################
Testing Version Compatibility - Using Tomcat and Java (Part One)
##################################################
docker images

cd docker

mkdir downloads
cd downloads

cp /home/user/Downloads/apache* .
cp /home/user/Downloads/jdk* .

docker run -i -t --name=jdk7 -v /root/docker/downloads:/root/Downloads centos:centos6 /bin/bash

cd root/Downloads

yum update

yum install git wget sudo which tar

mkdir tmp/
cd tmp
tar zxvf ../jdk-7
mv jdk-7 /opt/java
cd /opt/java
ll

alternatives --install /usr/bin/java java /opt/java/bin/java 2
alternatives --config java
java -version

alternatives --install /usr/bin/jar jar /opt/java/bin/jar 2
alternatives --install /usr/bin/java javac /opt/java/bin/javac 2
alternatives --set /opt/java/bin/jar
alternatives --set /opt/java/bin/javac
javac -version
which jar

exit

docker ps -a
docker commit jdk7 centos6:java7

docker images

docker run -i -t --name=jdk8 -v /root/docker/downloads:/root/Downloads centos:centos6 /bin/bash
df -h
cd /root/Downloads
yum update

yum install git wget sudo which tar

mkdir tmp/
cd tmp
tar zxvf ../jdk-8
mv jdk-8 /opt/java
cd /opt/java
ll

alternatives --install /usr/bin/java java /opt/java/bin/java 2
alternatives --config java
java -version

alternatives --install /usr/bin/jar jar /opt/java/bin/jar 2
alternatives --install /usr/bin/java javac /opt/java/bin/javac 2
alternatives --set /opt/java/bin/jar
alternatives --set /opt/java/bin/javac
javac -version
which jar

exit

docker commit jdk8 centos6:java8

##################################################
Testing Version Compatibility - Using Tomcat and Java (Part Two)
##################################################
docker images
#there is a bug in jdk 6 that it wont start

docker run -i -t --name=java7tomcat7 -v /root/docker/downloads:/root/Downloads -p 8180:8080 centos6:java7 /bin/bash

java -version

df -h

cd root/downloads/tmp
tar zxvf ../apachetomcat7
mv apachetomcat/ /opt/tomcat
cd /opt/topmcat
ll
export JAVA_HOME=opt/java
export JAVA_JRE=/opt/java
export CATALINA_BASE=/opt/tomcat
export CATALINA_HOME=/opt/tomcat
export CATALINA_TMPDIR=/opt/tomcat/temp

cd bin
./startup.sh &
ps aux | grep tomcat

curl http://localhost:8080

docker ps -a

docker commit java7tomcat7 centos6:jdk7tomcat7

docker images

#follow the same steps for the other 3 containers
jdk8tomcat8
jdk8tomcat7
jdk7tomcat8

##################################################
Testing Version Compatibility - Using Tomcat and Java (Part Three)
##################################################
cd docker/donloads

docker run -i -t --name--tomcatweb7 -v /root/docker/downloads:root/Downloads -p 8180:8080 -e JAVA_HOME=/opt/java -e JRE_HOME=/opt/java centos6:jdk7tomcat7 /bin/bash
java -version
env | grep -t home
/opt/tomcat/bin/startup.sh

ifconfig

cd /root/Downloads
/opt/tomcat/bin/shutdown.sh
ps aux  | grep tomcat
cp sample.war /opt/tomcat/webappa
cd /opt/tomcat/webapps
ll
/opt/tomcat/bin/startup.sh
cd sample #to see what was in the war file


##################################################
Exercise: Create a Dockerized Basic Web Server
##################################################

1. List the base images on the system. Choose a base image for Ubuntu and create a container from that image. This container should be named "basic_web" and should be interactive, attached to the current console and run the bash prompt.
user@linuxacademy:~$ docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
mycustomimg/withservices   v1                  dcfdd130c812        31 hours ago        506.9 MB
newcentos                  withapache          18bd1fc4d60f        2 days ago          480.6 MB
ubuntu                     trusty-20150814     91e54dfb1179        4 days ago          188.4 MB
ubuntu                     14.04               91e54dfb1179        4 days ago          188.4 MB
ubuntu                     14.04.3             91e54dfb1179        4 days ago          188.4 MB
ubuntu                     latest              91e54dfb1179        4 days ago          188.4 MB
ubuntu                     trusty              91e54dfb1179        4 days ago          188.4 MB
user@linuxacademy:~$ docker run -it --name="basic_web" ubuntu:latest /bin/bash
root@528b8c33ab7a:/#

2. Once you are logged into the container at the prompt, install all updates. After updates are installed, install the Apache Web Server and verify that it is listening on Port 80.
root@528b8c33ab7a:/# apt-get update && apt-get upgrade && apt-get install apache2
(OUTPUT) NOTE: sample of the end of the output
...
3Enabling module setenvif.
Enabling module filter.
Enabling module deflate.
Enabling module status.
Enabling conf charset.
Enabling conf localized-error-pages.
Enabling conf other-vhosts-access-log.
Enabling conf security.
Enabling conf serve-cgi-bin.
Enabling site 000-default.
invoke-rc.d: policy-rc.d denied execution of start.
Setting up ssl-cert (1.0.33) ...
Processing triggers for libc-bin (2.19-0ubuntu6.6) ...
Processing triggers for sgml-base (1.26+nmu4ubuntu1) ...
Processing triggers for ureadahead (0.100.0-16) ...
root@528b8c33ab7a:/#
root@528b8c33ab7a:/# apt-get install telnet
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  telnet
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 67.1 kB of archives.
After this operation, 167 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu/ trusty/main telnet amd64 0.17-36build2 [67.1 kB]
Fetched 67.1 kB in 0s (89.7 kB/s)
Selecting previously unselected package telnet.
(Reading database ... 12458 files and directories currently installed.)
Preparing to unpack .../telnet_0.17-36build2_amd64.deb ...
Unpacking telnet (0.17-36build2) ...
Setting up telnet (0.17-36build2) ...
update-alternatives: using /usr/bin/telnet.netkit to provide /usr/bin/telnet (telnet) in auto mode
root@528b8c33ab7a:/# telnet localhost 80
Trying ::1...
Trying 127.0.0.1...
telnet: Unable to connect to remote host: Connection refused
root@528b8c33ab7a:/# service apache2 start
 * Starting web server apache2                                                                                        AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.13. Set the 'ServerName' directive globally to suppress this message
 *
root@528b8c33ab7a:/# telnet localhost 80
Trying ::1...
Connected to localhost.
Escape character is '^]'.
helo


501 Not Implemented
Not Implemented
helo to /index.html not supported.

Apache/2.4.7 (Ubuntu) Server at 172.17.0.13 Port 80
Connection closed by foreign host.
root@528b8c33ab7a:/#

 3. Using the root account profile file in the root home directory, add the command to start the web server whenever a bash session is started.
root@528b8c33ab7a:~# vi .bashrc
NOTE: Add the line "service apache2 start" to the /root/.bashrc file at the very END

4. Stop the container. Once stopped, commit the container as a base image called "centos:baseweb".
root@528b8c33ab7a:~# exit
tcox@ubuntuvideo:~$ docker commit basic_web centos:baseweb
e9c87aeba30b82e66edb7143b89c10b801b866002f0659d0fd78ba5b48a82e8e
tcox@ubuntuvideo:~$ docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
centos                     baseweb             e9c87aeba30b        3 seconds ago       224.2 MB
mycustomimg/withservices   v1                  dcfdd130c812        31 hours ago        506.9 MB
newcentos                  withapache          18bd1fc4d60f        2 days ago          480.6 MB
ubuntu                     trusty              91e54dfb1179        4 days ago          188.4 MB
ubuntu                     trusty-20150814     91e54dfb1179        4 days ago          188.4 MB
ubuntu                     14.04               91e54dfb1179        4 days ago          188.4 MB
ubuntu                     14.04.3             91e54dfb1179        4 days ago          188.4 MB
ubuntu                     latest              91e54dfb1179        4 days ago          188.4 MB

5. Create a container based on the new "centos:baseweb" image called "test_container". It should run interactively, attached to the console and starting a bash prompt. Once logged into the container, verify that the Apache service is running and port 80 is listening. Exit the container.
user@linuxacademy:~$ docker run -it --name="test_container" centos:baseweb /bin/bash
 * Starting web server apache2                                                                                        AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.14. Set the 'ServerName' directive globally to suppress this message
 *
root@b830f2ecb2ca:/# telnet localhost 80
Trying ::1...
Connected to localhost.
Escape character is '^]'.
helo


501 Not Implemented

Not Implemented

helo to /index.html not supported.

Apache/2.4.7 (Ubuntu) Server at 172.17.0.14 Port 80

Connection closed by foreign host.
root@b830f2ecb2ca:/# exit
