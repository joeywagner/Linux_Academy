##################################################
Linux Foundation Certified System Administrator (LFCSA v2.16)
##################################################
##################################################
Essential Commands (25% of Exam)
##################################################
##################################################
Lecture: Create and Edit Text Files - Part I
##################################################
touch #touch - change file timestamps

touch mytest.txt

echo "Hello"

echo "" > blankfile.txt #this is call redirection, this will create a file with 1 blank character in it.

echo "My line" >> mytest.txt  #>> means append, it will add to the data already in the file

vim  and nano


##################################################
Lecture: Create and Edit Text Files - Part II
##################################################
vim mytext.txt

covers vim shortcuts

#sed
sed 's/s/S/g'  filename.txt #this replaces s with S

#sort
du -sch /var/* sort -h #sort by the size of the directory

#uniq
cat syslog | uniq -c -w 6 #-w mean compare no more that n number of characters


##################################################
Lecture: Use Input/Output Redirection (>, >>, |) / Compare Text Files / Compare Binary Files
##################################################
less #Less  is  a  program similar to more (1), but it has many more features.  Less does not have to read the entire input file before
       starting, so with large input files it starts up faster than text editors like vi (1).  Less uses termcap (or  terminfo  on  some
       systems),  so it can run on a variety of terminals.  There is even limited support for hardcopy terminals.  (On a hardcopy termi‐
       nal, lines which should be printed at the top of the screen are prefixed with a caret.)

more # more  is  a  filter for paging through text one screenful at a time.  This version is especially primitive.  Users should realize
       that less(1) provides more(1) emulation plus extensive enhancements.

sort #sort - sort lines of text files

cat #cat - concatenate files and print on the standard output

#Redirection
> #overwrite a file

>> #append to a file

#Format

fmt # fmt - simple optimal text formatter

nL #nl - number lines of files

cut #cut - remove sections from each line of files
cut -d ';' -f1 delimeted.txt


##################################################
Lecture: Search for Files
##################################################
find -name "test.txt" #this will search the local directoryu

find / -name "test.txt" #this will search all the files under /

find /etc -name "test.txt" #this will search the /etc directory

find /etc -not -name "test.txt" #this will search /etc for all files that are not test.txt

find / -type c #find all character devices on the system

find / -type l #find ll symbolic links

find / -type d #this will fins all directories

find /usr/bin -size +27000 #this will find all files that are bigger than 27000 bytes

find / -mtime 1 #find all files whose modification time was greater that 1 day ago

find / -atime -1 #finds files that have been accessed less than 1 day ago

find / -perm 755 #this will find files with 755 permissions

find / -name "test.txt" -exec chmod 700 {} \; #takes the results of the find command and places that in the {}

locate #locate - find files by name

updatedb #updates the locate db


##################################################
Lecture: Archive, Compress, Unpack and Uncompress Files
##################################################
the easiest why to make a backup is to copy the data from one location to another

cp -r data/*  #recusivly copy all the data from the data directory

tar -cvf file.tar dir/

tar tvf file.tar  #to view the contents of a tar

tar tvf file.tar | grep test.txt #search the tar for a file

gzip file.tar #this will compress the tar

tar cvzf file.tar.gz data/ #this will tar and compress in one step

tar zxvf file.tar.gz #uncompress and untar in one step

tar cvzf file.tar.gz --exclude=test.txt data/  #this will exclude the test.txt file from the compressed file

tar tvzf file.tar.gz | grep test.txt  #search the compressed file for test.txt

##################################################
Lecture: Manage Access to the Root Account
##################################################
ssh root@192.168.1.1 #this is only if root can login remotely but most times this is disabled

#once logged in
su - #the - means carry forward any environment variables that are set


##################################################
Lecture: List, Set and Change Standard File Permissions
##################################################
setuid #setuid()  sets  the effective user ID of the calling process.  If the effective UID of the caller is root (more precisely: if the caller has the CAP_SETUID capability), the real UID and saved set-user-ID are also set.
#the user can run a file as if they are root
-rwsr-xr-x 1 root root 53K Mar 29  2016 /usr/bin/passwd
#the s indicates that its a setuid, because the s and the file is executable any user can run the passwd but only root can name a user
#any user can change their own password but they cant change other users

setgid # setgid()  sets  the  effective group ID of the calling process.  If the caller is privileged (has the CAP_SETGID capability), the real GID and saved set-group-ID are also set.
#the most likely used is when all members group needs access to a dir

chmod g+s dir #to set the guid

chmod 2755 dir #this has the same effect as g+s

#sticky bit, prevents users from deleting or changing files in a dir unless that user own the dir

mkdir /examples
chmod 777 /examples
cd examples
mkdir usertest1
chmod o+t usertest1
chmod 1755 usertest1

drwxrwxrwt   9 root root 4.0K Mar 29 22:17 tmp
#tmp has the sticky bit set, the t at the end
#its world writable but you cant remove other files that you are not the owner of

#change attributes
lsattr #you can see that there are not special attributes on files
chattr +i test.txt #immutable
chatter +a test.txt #appendable

chattr -i test.txt #to remove the immutable bit


##################################################
Lecture: Transfer Files Securely Via the Network - SCP
##################################################
#scp is built into ssh, you can tranfer 2 files between system

scp -v ~/dir/test.txt user@192.168.1.1:/home/user/dir/

scp user@192.168.1.1:/home/user/dir/test.txt .


##################################################
Lecture: Transfer Files Securely Via the Network - SFTP
##################################################
#using sftp you can view the files on a remote system
vim /etc/ssh/sshd_config

#to disable comment out this line
Subsystem sftp /usr/lib/openssh/sftp-server

#to connect to remote server
sftp user@192.168.1.1
#now you can execute directory commands

get filename.txt newfilename.txt #this will place them into whatever directory that you launched the sftp session from

lcd ../dirname #local change directory, this changes what dir you are in on your local server

get filename.txt newfilename.txt

##################################################
Lecture: Monitor Security and Conduct Audits
##################################################
top #to check cpu load

htop #this is a cleaner than top

yum install htop

free #to check memory

free -m #this is nicer to look at
#cached is file paging, the kernel will cache files to memory, this is because writing to disk is slow

df #df - report file system disk space usage

df -hTi #this is to check inodes, the inode count is passed on the initial file system, inodes cant be read from a remote file system

du #Summarize disk usage of each FILE, recursively for directories.

du -sch /dir #is more useful, this will tell you what sub directory is taking up all your space

ps aux | grep <process_name>

ps -ef | grep <process_name>

ps -ef | grep -i  <process_name> | grep -v #the -v will repove the grep processes

dmesg #dmesg is used to examine or control the kernel ring buffer.


##################################################
Exercise: Editing Text Files on the Command Line: Vi/Vim, Uniq, Sort, SED
##################################################
1. Using any method of creation you choose, create a text file called 'test.txt' with the following contents:
Now is the time for all good men to come to the aid of their country
1
11
111
11
1
World at war
World peace
World domination

user@linuxacademy:~$ vim test.txt
>> In CMD Mode, press 'i' to insert
>> Type or copy/paste the above text into the file
>> Press 'ESC', then ':wq' to save and exit the file
2. Using the one of the commands covered in this section, display the contents of this file so that the numbers in the middle display in order from lowest number to highest number.
user@linuxacademy:~$ cat test.txt | sort -n
Now is the time for all good men to come to the aid of their country
World at war
World domination
World peace
1
1
11
11
111
3. Using the same command, add an additional command that takes the output and removes any lines that are repeated.
user@linuxacademy:~$ cat test.txt | sort -n | uniq
Now is the time for all good men to come to the aid of their country
World at war
World domination
World peace
1
11
111
4. Display the contents of the 'test.txt' file to the console, but replace all occurences of the word "World" with the word "Global".
user@linuxacademy:~$ sed 's/World/Global/g' test.txt
Now is the time for all good men to come to the aid of their country
1
11
111
11
1
Global at war
Global peace
Global domination
5. Manipulate the content of the 'test.txt' file so that all occurences of the letter 'o' are capitalized. Using redirection, take the result of that command and create a new file called 'mytest.txt'. Display that file and verify the change in case to the letters.
user@linuxacademy:~$ sed 's/o/O/g' test.txt > mytest.txt && cat mytest.txt
NOw is the time fOr all gOOd men tO cOme tO the aid Of their cOuntry
1
11
111
11
1
WOrld at war
WOrld peace
WOrld dOminatiOn


##################################################
Exercise: Manipulating Text Files from the Command Line
##################################################
1. From your user's home directory, create a directory called 'exercises'. Change to that directory. Using any of the commands from our videos on the subject, create two 0-byte files called 'test1.txt' and 'test2.txt'. List them with all attributes.
user@linuxacademy:~$ mkdir exercises
user@linuxacademy:~$ cd exercises
user@linuxacademy:~/exercises$ touch test1.txt test2.txt
user@linuxacademy:~/exercises$ ls -al
total 8
drwxrwxr-x  2 user user 4096 Aug  8 18:10 .
drwxr-xr-x 36 user user 4096 Aug  8 18:10 ..
-rw-rw-r--  1 user user    0 Aug  8 18:10 test1.txt
-rw-rw-r--  1 user user    0 Aug  8 18:10 test2.txt
NOTE: Your output may differ slightly
2. Using redirection, list the contents of the current directory and redirect that output into the test1.txt file.
user@linuxacademy:~/exercises$ ls -al > test1.txt
3. Using redirection, add the command line output message "Hello World" to the file 'test2.txt'.
user@linuxacademy:~/exercises$ echo "Hello World" > test2.txt
4. Concatenate the contents of the two files 'test1.txt' and 'test2.txt' into a single file called 'test3.txt'.
user@linuxacademy:~/exercises$ cat test1.txt test2.txt > test3.txt
5. List the contents of the resulting directory and take that output and append it to the 'test3.txt' file.
user@linuxacademy:~/exercises$ ls -al >> test3.txt
user@linuxacademy:~/exercises$ cat test3.txt
total 8
drwxrwxr-x  2 user user 4096 Aug  8 18:10 .
drwxr-xr-x 36 user user 4096 Aug  8 18:10 ..
-rw-rw-r--  1 user user    0 Aug  8 18:10 test1.txt
-rw-rw-r--  1 user user    0 Aug  8 18:10 test2.txt
Hello World
drwxrwxr-x  2 user user 4096 Aug  8 18:10 .
drwxr-xr-x 36 user user 4096 Aug  8 18:10 ..
-rw-rw-r--  1 user user    0 Aug  8 18:10 test1.txt
-rw-rw-r--  1 user user    0 Aug  8 18:10 test2.txt
-rw-rw-r--  1 user user    0 Aug  8 18:10 test3.txt


##################################################
Exercise: Archiving and Compressing Files and Directories
##################################################
Create a directory in your home directory called 'mybkup'. Using the Linux copy command, make a backup of the entire /etc directory into the newly-created 'mybkup' location. Be sure to give the command appropriate permissions to complete and recursively copy all files and directories to the 'mybkup' directory.
[user@linuxacademy:~] $ mkdir mybkup
[user@linuxacademy:~] $ cd mybkup
[user@linuxacademy:~/mybkup] $ sudo cp -rf /etc/* .
2. Change the ownership of the 'mybkup' directory to the current user and associated user group. Be sure to provide the proper permissions and execute the change recursively. This is necessary to complete the exercise.
[user@linuxacademy:~/mybkup] $ cd ..
[user@linuxacademy:~] $ sudo chown user:user mybkup/ -R
3. Using the tar command, make a single, uncompressed backup file of the contents of the 'mybkup' directory. Call that file 'uncompressed.tar' during creation.
[user@linuxacademy:~] $ tar cvf uncompressed.tar mybkup/
4. In the 'mybkup' directory, create a text file called "mytest.txt" using any method you choose.
Potential Solutions:
[user@linuxacademy:~] $ echo "this is a test" > mybkup/mytest.txt
[user@linuxacademy:~] $ touch mybkup/mytest.txt
 5. Again, using the tar command, create a single, gzip-compressed backup file of the contents of the 'mybkup' directory. Call that file 'compressed.tar.gz'.
[user@linuxacademy:~] $ tar cvzf compressed.tar.gz mybkup/
6. Use the tar command with the appropriate options to view the contents of the 'compressed.tar.gz' file and verify the 'mytest.txt' file is in the backup.
[user@linuxacademy:~] $ tar tvzf compressed.tar.gz | grep mytest.txt
-rw-rw-r-- user/user        15 2015-08-01 16:59mybkup/mytest.txt
7. Once again, using the appropriate options on the tar command, add the previously-created 'mytext.txt' file in the 'mybkup' directory to the previously-created 'uncompressed.tar' file. Verify the file was successfully added.
[user@linuxacademy:~] $ tar rvf uncompressed.tar mybkup/mytest.txt
[user@linuxacademy:~] $ tar tvf uncompressed.tar | grep mytest.txt
-rw-rw-r-- user/user        15 2015-08-01 16:59mybkup/mytest.txt
8. Finally, using the tar command, make a single, compressed backup file of the contents of the 'mybkup' directory. Called that file 'exclusion.tar.gz' and be sure to exclude the 'ssh' directory within the created 'mybkup' directory we have been using. Verify that the 'ssh' directory is not included after.
[user@linuxacademy:~] $ tar cvzf exclusion.tar.gz --exclude=mybkup/ssh mybkup/
[user@linuxacademy:~] $ tar tvzf exclusion.tar.gz | grep mybkup/ssh

##################################################
Exercise: Transfer Files Securely via the Network
##################################################
1. Once you have started your Linux Academy lab servers and logged in with the user account and password provided, use the appropriate command to generate a public and private key pair on Server 1. Verify the key pair was created by changing to the appropriate directory and listing the files.
[user@tcox4 ~]$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/user/.ssh/id_rsa):
Created directory '/home/user/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/user/.ssh/id_rsa.
Your public key has been saved in /home/user/.ssh/id_rsa.pub.
The key fingerprint is:
71:5f:cb:26:be:7a:47:4d:a1:3a:d5:48:1c:eb:f3:07 user@tcox4.mylabserver.com
The key's randomart image is:
+--[ RSA 2048]----+
|            ...  |
|             o.. |
|        . . ..= .|
|         o ..* o.|
|        S   =oEo |
|           + o+..|
|            o. ..|
|            ... .|
|          .o..   |
+-----------------+
[user@tcox4 ~]$ cd .ssh
[user@tcox4 .ssh]$ ls -al
total 12
drwx------. 2 user user   36 Sep  8 20:53 .
drwx------. 9 user user 4096 Sep  8 20:52 ..
-rw-------. 1 user user 1675 Sep  8 20:53 id_rsa
-rw-r--r--. 1 user user  408 Sep  8 20:53 id_rsa.pub
2. Exchange the public key with Server 2 on the user account on the second server. Verify that the identity appearing in the appropriate key file matches the user and system name/IP of Server 1.
[user@tcox4 .ssh]$ ssh-copy-id user@172.31.117.2
The authenticity of host '172.31.117.2 (172.31.117.2)' can't be established.
ECDSA key fingerprint is 0d:0c:b1:1d:e1:cf:6d:9f:51:bf:0f:dc:60:82:a1:73.
Are you sure you want to continue connecting (yes/no)? yes
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
user@172.31.117.2's password:

Number of key(s) added: 1

Now try logging into the machine, with:   "ssh 'user@172.31.117.2'"
and check to make sure that only the key(s) you wanted were added.
[user@tcox5 ~]$ cd .ssh
[user@tcox5 .ssh]$ ll
total 4
-rw-------. 1 user user 408 Sep  8 20:54 authorized_keys
[user@tcox5 .ssh]$ cat authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCnwTTIVeMji2sFMkrxqwwgCLyJjOqKf/SrdrX3Vm4DZ4FMxvVEUS3EV0ewmPjaR4AXTW7YKy9gB+D5GJaWrQIp/JJj5AIWv4xm2VEXDb9FDNlYg/Uwdhq9YXzbsC15xvUjOI89l65W7/QItPNUc9SIOsB6/BVGGrEqPvWeu64EPcU1oZn9wMWqTZaJCyxsRlFjmLdIo9aVb8ORNusKOJO30VzyZcxYPa3MF2YAoa0CzbSHVLNE0e1vMt9ZLtQRVkpBg7wk7+IUoNGVMfA/QQH/Di2PoBjWColJi6l1P4lpY85wjeM6uU9igyFio6bnBS2xU+Jta4naAsYwIu2R6i5x user@tcox4.mylabserver.com
3. Verify that you are able to log in to Server 2 from Server 1 with the user account without entering a password. Check the hostname file to be sure you are logged into Server 2.
[user@tcox4 .ssh]$ ssh user@172.31.117.2
Last login: Tue Sep  8 20:52:11 2015 from 99-198-189-168.mci.googlefiber.net
[user@tcox5 ~]$ cat /etc/hostname
tcox5.mylabserver.com
4. Create a file on Server 1 using any method you choose. Use secure copy to copy that file to Server 2. Confirm the copy succeeds without password entry.
[user@tcox4 ~]$ echo "This is from SERVER1" >> toTransfer.txt
[user@tcox4 ~]$ scp toTransfer.txt user@172.31.117.2:/home/user
toTransfer.txt                                100%   21     0.0KB/s   00:00
5. Using secure copy, copy the file from step 4 back to Server 1 from Server 2, renaming it to something else during the copy process; verify that no password is required.
[user@tcox4 ~]$ scp user@172.31.117.2:/home/user/toTransfer.txt inReceipt.txt
toTransfer.txt                                100%   21     0.0KB/s   00:00
[user@tcox4 ~]$ ls -al
total 60
drwx------.  9 user user 4096 Sep  8 20:59 .
drwxr-xr-x.  3 root root   17 Jan 12  2015 ..
-rw-------.  1 user user 1089 Sep  8 20:49 .bash_history
-rw-r--r--.  1 user user   18 Sep 26  2014 .bash_logout
-rw-r--r--.  1 user user  193 Sep 26  2014 .bash_profile
-rw-r--r--.  1 user user  231 Sep 26  2014 .bashrc
drwx------.  6 user user 4096 Sep  8 20:45 .cache
drwxr-xr-x. 11 user user 4096 Aug  6 19:50 .config
drwxr-xr-x.  2 user user    6 Jan  7  2015 Desktop
-rw-------.  1 user user   16 Jan  7  2015 .esd_auth
-rw-------.  1 user user 3084 Sep  8 20:44 .ICEauthority
-rw-rw-r--.  1 user user   21 Sep  8 20:59 inReceipt.txt
drwxr-xr-x.  3 user user   18 Jan  7  2015 .local
drwxrwxr-x.  3 user user   14 Jan 12  2015 .openoffice
drwx------.  2 user user   54 Sep  8 20:54 .ssh
-rw-rw-r--.  1 user user   21 Sep  8 20:56 toTransfer.txt
-rw-------.  1 user user  891 Jan  7  2015 .viminfo
drwxrwxr-x.  2 user user 4096 Sep  8 20:44 .vnc
-rw-rw-r--.  1 user user  431 Aug  6 19:48 VNCHOWTO
-rw-------.  1 user user  718 Sep  8 20:44 .Xauthority

##################################################
Exercise: Finding Files on the Filesystem
##################################################
1. In user's home directory, create a text file with any content called "testfile.txt". You may use any method you choose to create this file.
Possible Solutions:
user@linuxacademy:~$ echo "testing" > testfile.txt
user@linuxacademy:~$ touch testfile.txt
2. Make a copy of the recently-created "testfile.txt" called "mytest.txt" using any method. Using the appropriate privileges, move that file to the /etc directory.
Possible Solutions:
user@linuxacademy:~$ cp testfile.txt mytest.txt && sudo mv mytest.txt /etc
user@linuxacademy:~$ sudo cp testfile.txt /etc/mytest.txt
3. Make sure you are in your home directory. Execute a find command to display the location of the "testfile.txt" text file created in step 1. Execute the same command, but specify that the search should begin with the /home directory and note the results.
user@linuxacademy:~$ find -name testfile.txt
testfile.txt
user@linuxacademy:~$ find /home -name testfile.txt
find: /home/testusers: Permission Denied (any accounts in /home not owned by user)
/home/user/testfile.txt
4. Execute a find command with the appropriate options to display the location of the file called "mytest.txt". Start the search from the root (i.e. /) directory. Re-execute that command as the root user or with sudo privileges and note the results.
user@linuxacademy:~$ find / -name mytest.txt
user@linuxacademy:~$ sudo find / -name mytest.txt
/etc/mytest.txt
5. Using appropriate privileges, copy the /etc/mytest.txt file to /etc/myTesT.txt. Executing a find command on that name that will show the results of both files, ignoring case.
user@linuxacademy:~$ sudo cp /etc/mytest.txt /etc/myTesT.txt
user@linuxacademy:~$ sudo find / -iname mytest.txt
/etc/myTesT.txt
/etc/mytest.txt
6. As the root user or using sudo privileges, find all files on the system that end with .txt; pageinate the results so you can scroll through them.
user@linuxacademy:~$ sudo find / -name "*.txt" | more
7. Using the find command, change the permissions on the /etc/myTesT.txt file so that it is world read/write/execute. This should be done in one line using find command options only.
user@linuxacademy:~$ sudo find / -name myTesT.txt -exec chmod 777 {} \;
user@linuxacademy:~$ sudo ls -al /etc/myTesT.txt
-rwxrwxrwx 1 root root 8 Aug  2 17:00 /etc/myTesT.txt
8. With the find command, using root or sudo privileges, display all executable files in /usr directory.
user@linuxacademy:~$ sudo find /usr -perm /a=x
9. Run the updatedb command to update your filesystem name database. Use the locate command to find all three files you created in steps 1, 2 and 5.
user@linuxacademy:~$ sudo updatedb
user@linuxacademy:~$ locate testfile.txt
/home/user/testfile.txt
user@linuxacademy:~$ locate mytest.txt
/etc/mytest.txt
user@linuxacademy:~$ locate myTesT.txt
/etc/myTesT.txt


##################################################
Operation of Running Systems (20% of Exam)
##################################################
#How to manage user account processes, anything that a user starts vs the system

top

htop

a 20 i the lowest priority -20 is the highest
process is always the init process, its the father of all processes

ps #ps - report a snapshot of the current processes.

ps aux

ps axjf  #process tree view

pgrep bash # pgrep  looks  through the currently running processes and lists the process IDs which match the selection criteria to stdout.

a parent process is known as a ppid

to kill a process you have to be the owner of that process

kill sends a signal, a message to a application, a term signal, exit smoothly if posibble

kill -KILL <pid> #this is sent to the kernel not the process, it is used to kill processes that ignore kill

#if we have a process that it running hot we can alter the nice of a programs value

renice <nice_value> <pid>
renice 10 1292

nice -n 20 /bin/bash #start a process with a lower than default nice value


##################################################
Lecture: Manage the Startup Processes and Services
##################################################
two primary ways to start up processes, upstart=debian, and systemd=redhat

cd /etc/init #contain all the configurations on our system that start on boot
cat ssh.conf

status ssh

cd /etc/rc.d #these are the run level directories for our system

#on systemd systems
systemctl status sshd

systemctl stop cron
systemctl start cron
sysetmctl restart cron

#stop this service so it doesnt start on boot
systemctl disable cron  #it remove the link from /etc/systemd for this process

#to disable a service in upstart
echo manual | sudo tee /etc/init/cron.override or if you are root, echo "manual" > cron.override


##################################################
Lecture: Install and Update Packages from the Network, a Remote Repository or the Local Filesystem (Debian/Ubuntu Distributions)
##################################################
dpkg #dpkg is a tool to install, build, remove and manage Debian packages. The primary and more user-friendly front-end  for  dpkg  is  aptitude(1).  dpkg  itself  is  controlled
       entirely  via  command  line  parameters,  which  consist of exactly one action and zero or more options. The action-parameter tells dpkg what to do and options control the
       behavior of the action in some way.

apt-get #apt-get is the command-line tool for handling packages, and may be considered the user's "back-end" to other tools using the APT library. Several "front-end" interfaces
       exist, such as aptitude(8), synaptic(8) and wajig(1).

dpkg will install just the package they you specify, apt-get will also install all of the dependencies

aptitude #aptitude is a text-based interface to the Debian GNU/Linux package system.

dpkg -l #this will show all installed packages

dpkg -L <package_name>  #this will list all the files that are created as part of the package installation

apt-cache pkg-names #this will show you wants installed on the system

apt-cache search <package_name> #this will list all packages that match

apt-cache show <package>

apt-cache stats #

apt-get autoclean #cleans the cache

cat /etc/apt/sources.list  #these are the repos that are queried when we run apt-get update

apt-get upgrade #this will upgrade all the applications on the system

sudo apt-get dist-upgrade #this will upgrade the distro

apt-get install <package>=<version>

apt-get remove <package> #config files will not remove config files

apt-get --purge <package> #this will completely remove the package

apt-get download <package> #this will just download the package

dpkg -i <package_name>

apt-get changelog <package> #to see the change log for the application

#broken dependencies

apt-get check #this will check for broken dependencies

apt-get build-dep <package> #this will build a package dependency tree

cat /var/cache/apt/archives  #this is the apt archive file

apt-get autoclean #this will clear the cache, and remove any unnecessary .deb files


##################################################
Lecture: Install and Update Packages from the Network, a Remote Repository, or the Local Filesystem (RHEL/CentOS Distributions)
##################################################
yum #

yum update #this will sync repos and it will update packages, update and upgrade at the same time

yum search <package>

yum install <package>

yum install -y <package> #dont ask my if i want every thing installed

yum info <package>  #this gives us package information

yum install -y yum-utils #this will give us access to an application called yum downloader

yumdownloader <package> #this will just download the .rpm

yum list #we have this because we installed yum-utils

yum list installed #list the installed packages

yum check-update #determines if there are any packages that need to be updated

yum grouplist #list available groups

yum groupinstall '<package_name>'

yum repolist #this will tell us whats available

yum repolist #this will tel us even if a repo is disabled

yum --enablerepo= install packagename

yum clean all #this will clean repos and packages

yum history

rpm -qpR *.rpm #this will query the rpm

rpm -ivh #install, verbose

rpm -Uvh #this will update, verbose

#rpm does not install dependancies

rpm -q <package>

rmp -ql <package>  #query list

rpm -qa --last #tell you whats been installed, with or without --last

rpm -evv <package> #this will remove the package

rpm -qdf /usr/bin/vmstate #this will sho you all the documentation that vmstate in it

rpm -Va #this will verify all the rpms on the system

rpm -qa gpg-pubkey* #this will tell us all the pub keys that we have available to the system

#if we get message that says the rpm db has been currupted
cd /var/lib
rpm --rebuilddb  #this will rebuild the db


##################################################
Lecture: Set File Permission and Ownership
##################################################
drwxr-xr-x. #the first left tells you the type of file, the 3 groups after show the permisssions for user group everyone
user group everyone

#on directories you need execute or you wont be able to go into the diretory

chmod #chmod - change file mode bits

u = user
g = group
o or a = all users

r = read
w = write
x = execute

chmod a+rwx <file> #this gives all permissions for everyone

chmod g+rwx

4 = read
2 = write
1 = execute

chmod 750 <file>







##################################################
Lecture: Use Shell Scripting to Automate System Maintenance Tasks - Part I
##################################################
#you will see most shell scripts end in a .sh but that is note required

vim testscript.sh
#!/bin/bash

echo "Line 1"
echo "Line 2"
echo "Line 3"

ls -al /root

:wq

chmod 755 testscript.sh

./testscript.sh

env | grep PATH

export PATH=$PATH:/root/scripts #now you wont have to add ./ to tell the script to run

ln -s testscript.sh test1
#now you can type test1 to run the script from anywhere on your system


##################################################
Lecture: Use Shell Scripting to Automate System Maintenance Tasks - Part II
##################################################
if COND; then cmd1; else cmd2; fi

vim testscript.sh
#!/bin/bash

DIRECTORY="test"

if [ -d "$DIRECTORY" ]; then
    echo "the directory exists"
else
    echo "this directory does not exis"
fi

for count in 1 2 3 4 5
do
    echo "this is line # $count"

done

:wq


#conditional loop, a while loop
vim myhosts
8.8.8.8
8.8.4.4


vim testscript.sh
#!/bin/bash

DIRECTORY="test"

if [ -d "$DIRECTORY" ]; then
    echo "the directory exists"
else
    echo "this directory does not exis"
fi

for count in 1 2 3 4 5
do
    echo "this is line # $count"

done

while read HOST; do
    ping -c 3 $HOST
done < myhosts

:wq



##################################################
Exercise: Managing the Startup Process and Related Services
##################################################
1. After logging in to your system, execute the appropriate command and options to display all the system services involved in the boot process, regardless of their status (running, stopped, failed).
root@linuxacademy:~# systemctl
...
network.service                                 loaded active exited    LSB: Bring up/down networking
NetworkManager.service                          loaded active running   Network Manager
nfs-config.service                              loaded active exited    Preprocess NFS configuration
pcscd.service                                   loaded active running   PC/SC Smart Card Daemon
OR
root@linuxacademy:~# systemctl status
...
gssproxy.service -> '/org/freedesktop/systemd1/unit/gssproxy_2eservice'
gssproxy.service - GSSAPI Proxy Daemon
   Loaded: loaded (/usr/lib/systemd/system/gssproxy.service; disabled)
   Active: active (running) since Sun 2015-08-02 13:17:08 CDT; 7h ago
   Process: 506 ExecStart=/usr/sbin/gssproxy -D (code=exited, status=0/SUCCESS)
Main PID: 558 (gssproxy)
   CGroup: /system.slice/gssproxy.service
           └─558 /usr/sbin/gssproxy -D
Aug 02 13:17:08 coxandassoc.local systemd[1]: Started GSSAPI Proxy Daemon.
initial-setup-text.service -> '/org/freedesktop/systemd1/unit/initial_2dsetup_2dtext_2eservice'
2. Execute the systemctl command with the appropriate options to determine the current status and related information for the sshd daemon.
root@linuxacademy:~# systemctl status sshd
sshd.service - OpenSSH server daemon
   Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled)
   Active: active (running) since Sun 2015-08-02 13:17:26 CDT; 7h ago
 Main PID: 1235 (sshd)
   CGroup: /system.slice/sshd.service
           └─1235 /usr/sbin/sshd -D
Aug 02 13:17:26 linuxacademy.local systemd[1]: Started OpenSSH server daemon.
Aug 02 13:17:26 linuxacademy.local sshd[1235]: Server listening on 0.0.0.0 port 22.
Aug 02 13:17:26 linuxacademy.local sshd[1235]: Server listening on :: port 22.
3. Determine whether the crond daemon is running. Using systemctl, stop the service and then query its status to verify that it has stopped. Restart the process once it is verified as stopped.
root@linuxacademy:~# systemctl status crond
root@linuxacademy:~# systemctl stop crond
root@linuxacademy:~# systemctl status crond
root@linuxacademy:~# systemctl start crond
4. Using the systemctl command, disable the crond service so that it no longer starts on boot. Reboot your Linux Academy server. Once it is back up, verify the status of the service right after reboot.
root@linuxacademy:~# systemctl disable crond
rm '/etc/systemd/system/multi-user.target.wants/crond.service'
Restart the server.
root@linuxacademy:~# systemctl status crond
5. Re-enable the crond service. Reboot the server if you like, or simply start the service manually after re-enabling it. Verify the service is running.
root@linuxacademy:~# systemctl enable crond
ln -s '/usr/lib/systemd/system/crond.service' '/etc/systemd/system/multi-user.target.wants/crond.service'
root@linuxacademy:~# systemctl start crond
root@linuxacademy:~# systemctl status crond


##################################################
Exercise: Managing User Processes
##################################################
1. List the processes running on the system owned by the active user. Using that same user, list all processes currently running on the system.
 user@linuxacademy:~$ ps
  PID TTY          TIME CMD
15551 pts/18   00:00:00 bash
16004 pts/18   00:00:00 ps
2. Run one of the common commands that displays the top running processes on the system, which updates their status while running until quit.
user@linuxacademy:~$ su -
Password: (enter root password)
root@linuxacademy:~# top
3. Become the root user. Notice that some processes are associated with a TTY or terminal while others are not. Run the appropriate command to list ONLY those processes that are associated with a TTY or terminal on the system, regardless of the user.
user@linuxacademy:~$ su -
Password: (enter root password)
root@linuxacademy:~# ps au
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root      1367  0.1  0.6 569156 220212 tty7    Ss+  Jul15  35:10 /usr/bin/X -core :0 -seat seat0 -auth /var/run/lightdm/root/:0 -nolisten tcp vt7 -novtswitch
root      1371  0.0  0.0  20052  2048 tty1     Ss+  Jul15   0:00 /sbin/agetty --noclear tty1 linux
user      3163  0.0  0.0  26952  5552 pts/7    Ss+  Jul15   0:00 /bin/bash
4. Determine if the cron service is running. If so, as the user user, execute the kill command and note the result.
user@linuxacademy:~$ ps aux | grep cron
root       790  0.0  0.0  33128  3024 ?        Ss   Jul15   0:01 /usr/sbin/cron -f
user     16035  0.0  0.0  13692  2216 pts/18   S+   17:38   0:00 grep --color=auto cron
user@linuxacademy:~$ kill 790
-bash: kill: (790) - Operation not permitted
5. Become the root user again. Using the previous PID from the cron service, execute the kill command and note the result. If you restart the cron service, execute the appropriate kill command switch to cause the service to stop and restart.
user@linuxacademy:~$ sudo kill 790
user@linuxacademy:~$ sudo systemctl start crond
user@linuxacademy:~$ ps aux | grep cron
user@linuxacademy:~$ sudo kill -SIGHUP PID


##################################################
Exercise: Installing Software Packages (Debian/Ubuntu Distributions)
##################################################
1. List all of the packages currently installed on the system.
user@linuxacademy:~$ sudo dpkg -l
2. The package called linux-generic is installed on the system. Using the appropriate package management command and options, list the files and directories that are installed with that package.
user@linuxacademy:~$ sudo dpkg -L linux-headers-generic
/.
/usr
/usr/share
/usr/share/doc
/usr/share/doc/linux-headers-generic
/usr/share/doc/linux-headers-generic/copyright
/usr/share/doc/linux-headers-generic/changelog.gz
3. Using the standard Debian-based advanced packaging tool, install and then remove the package nano and note the results.
user@linuxacademy:~$ sudo apt-get install nano
Reading package lists... Done
Building dependency tree
Reading state information... Done
Suggested packages:
  spell
The following NEW packages will be installed:
  nano
0 upgraded, 1 newly installed, 0 to remove and 30 not upgraded.
Need to get 173 kB of archives.
user@linuxacademy:~$ sudo apt-get remove --purge nano
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following packages will be REMOVED:
  nano*
0 upgraded, 0 newly installed, 1 to remove and 30 not upgraded.
After this operation, 610 kB disk space will be freed.
Do you want to continue? [Y/n] y
4. Download but do not install the nano package. Once downloaded, use the standard package management command to install the downloaded package.
user@linuxacademy:~$ sudo apt-get download nano
user@linuxacademy:~$ ls -al nano*
-rw-r--r-- 1 root root 172710 Jul 16  2014 nano_2.2.6-3_amd64.deb
user@linuxacademy:~$ sudo dpkg -i nano_2.2.6-3_amd64.deb
Preparing to unpack nano_2.2.6-3_amd64.deb ...
Unpacking nano (2.2.6-3) ...
Setting up nano (2.2.6-3) ...
update-alternatives: using /bin/nano to provide /usr/bin/editor (editor) in auto mode
update-alternatives: using /bin/nano to provide /usr/bin/pico (pico) in auto mode
Processing triggers for install-info (5.2.0.dfsg.1-6) ...
Processing triggers for doc-base (0.10.6) ...
Processing 2 added doc-base files...
Registering documents with scrollkeeper...
Processing triggers for man-db (2.7.0.2-5) ...
5. Using the advanced package tool, completely remove the nano package. Use the appropriate options to remove the package and all configuration files that may have been added or changed.
user@linuxacademy:~$ sudo apt-get remove --purge nano
The following packages will be REMOVED:
  nano*
0 upgraded, 0 newly installed, 1 to remove and 30 not upgraded.
After this operation, 610 kB disk space will be freed.
Do you want to continue? [Y/n] y
6. Clean up your workspace using the advanced configuration tool (remove downloaded package files).
user@linuxacademy:~$ sudo apt-get clean


##################################################
Exercise: Installing Software Packages (RedHat/RPM Distributions)
##################################################
1. List all of the packages currently installed on the system.
user@linuxacademy:~$ sudo yum list installed
Loaded plugins: fastestmirror, langpacks
Loading mirror speeds from cached hostfile
* base: repos.dfw.quadranet.com
* epel: mirror.compevo.com
* extras: repos.dfw.quadranet.com
* updates: repos.dfw.quadranet.com
Installed Packages
GConf2.x86_64                                                                3.2.6-8.el7                                                      @base/$releasever
GeoIP.x86_64                                                                 1.5.0-9.el7                                                      @base
ModemManager-glib.x86_64                                                     1.1.0-6.git20130913.el7                                          @base/$releasever
NetworkManager.x86_64                                                        1:1.0.0-14.git20150121.b4ea599c.el7                              @base/$releasever
2. The package called linux-firmware is installed on your system. List the files and directories installed with that package.
user@linuxacademy:~$ sudo rpm -ql linux-firmware
Loaded plugins: fastestmirror, langpacks
Loading mirror speeds from cached hostfile
* base: repos.dfw.quadranet.com
* epel: mirror.compevo.com
* extras: repos.dfw.quadranet.com
* updates: repos.dfw.quadranet.com
Installed Packages
linux-firmware.noarch                                               20140911-0.1.git365e80c.el7                                               @base/$releasever
3. Using the standard Red Hat/CentOS-based update manager, install and then remove the package nano and note the results. Install the utilities package for the update manager.
user@linuxacademy:~$ sudo yum install nano
Reading package lists... Done
Building dependency tree
Reading state information... Done
Suggested packages:
  spell
The following NEW packages will be installed:
  nano
0 upgraded, 1 newly installed, 0 to remove and 30 not upgraded.
Need to get 173 kB of archives.
user@linuxacademy:~$ sudo yum autoremove nano
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following packages will be REMOVED:
  nano*
0 upgraded, 0 newly installed, 1 to remove and 30 not upgraded.
After this operation, 610 kB disk space will be freed.
Do you want to continue? [Y/n] y
4. Download but do not install the nano package. Once downloaded, install the downloaded package.
user@linuxacademy:~$ sudo yumdownloader nano
user@linuxacademy:~$ ls -al nano*
-rw-r--r-- 1 root root 172710 Jul 16  2014 nano_2.2.6-3_amd64.rpm
user@linuxacademy:~$ sudo rpm -ivh nano_2.2.6-3_amd64.rpm
Preparing to unpack nano_2.2.6-3_amd64.deb ...
Unpacking nano (2.2.6-3) ...
Setting up nano (2.2.6-3) ...
update-alternatives: using /bin/nano to provide /usr/bin/editor (editor) in auto mode
update-alternatives: using /bin/nano to provide /usr/bin/pico (pico) in auto mode
Processing triggers for install-info (5.2.0.dfsg.1-6) ...
Processing triggers for doc-base (0.10.6) ...
Processing 2 added doc-base files...
Registering documents with scrollkeeper...
Processing triggers for man-db (2.7.0.2-5) ...
5. Completely remove the nano package. Use the appropriate options to remove the package and all configuration files that may have been added or changed.
user@linuxacademy:~$ sudo yum autoremove nano
The following packages will be REMOVED:
  nano*
0 upgraded, 0 newly installed, 1 to remove and 30 not upgraded.
After this operation, 610 kB disk space will be freed.
Do you want to continue? [Y/n] y
6. Clean up your workspace by issuing the appropriate options to remove downloaded package files.
user@linuxacademy:~$ sudo yum clean all


##################################################
Exercise: Update Packages from the Network, a Repository or the Local File System (Ubuntu/Debian)
##################################################
1. Using the appropriate update management tool, make sure that your system is up to date, automatically installing any needed updates without further confirmation.
root@tcox1:~# apt-get update
Ign http://us-east-1.ec2.archive.ubuntu.com trusty InRelease
Ign http://us-east-1.ec2.archive.ubuntu.com trusty-updates InRelease
Hit http://us-east-1.ec2.archive.ubuntu.com trusty Release.gpg
Hit http://us-east-1.ec2.archive.ubuntu.com trusty-updates Release.gpg
Hit http://us-east-1.ec2.archive.ubuntu.com trusty Release
Ign http://security.ubuntu.com trusty-security InRelease
Hit http://us-east-1.ec2.archive.ubuntu.com trusty-updates Release
Hit http://us-east-1.ec2.archive.ubuntu.com trusty/main Sources
Hit http://security.ubuntu.com trusty-security Release.gpg
Hit http://us-east-1.ec2.archive.ubuntu.com trusty/universe Sources
Hit http://us-east-1.ec2.archive.ubuntu.com trusty/main amd64 Packages
Hit http://us-east-1.ec2.archive.ubuntu.com trusty/universe amd64 Packages
Hit http://us-east-1.ec2.archive.ubuntu.com trusty/main Translation-en
Hit http://security.ubuntu.com trusty-security Release
Hit http://us-east-1.ec2.archive.ubuntu.com trusty/universe Translation-en
Hit http://us-east-1.ec2.archive.ubuntu.com trusty-updates/main Sources
Hit http://us-east-1.ec2.archive.ubuntu.com trusty-updates/universe Sources
Hit http://us-east-1.ec2.archive.ubuntu.com trusty-updates/main amd64 Packages
Hit http://us-east-1.ec2.archive.ubuntu.com trusty-updates/universe amd64 Packages
Hit http://security.ubuntu.com trusty-security/main Sources
Hit http://security.ubuntu.com trusty-security/universe Sources
Hit http://security.ubuntu.com trusty-security/main amd64 Packages
Hit http://us-east-1.ec2.archive.ubuntu.com trusty-updates/main Translation-en
Hit http://us-east-1.ec2.archive.ubuntu.com trusty-updates/universe Translation-en
Hit http://security.ubuntu.com trusty-security/universe amd64 Packages
Hit http://security.ubuntu.com trusty-security/main Translation-en
Ign http://us-east-1.ec2.archive.ubuntu.com trusty/main Translation-en_US
Ign http://us-east-1.ec2.archive.ubuntu.com trusty/universe Translation-en_US
Hit http://security.ubuntu.com trusty-security/universe Translation-en
Reading package lists... Done
root@tcox1:~# apt-get -y upgrade
Reading package lists... Done
Building dependency tree
Reading state information... Done
Calculating upgrade... Done
The following packages have been kept back:
  linux-headers-generic linux-headers-virtual linux-image-virtual
  linux-virtual
0 upgraded, 0 newly installed, 0 to remove and 4 not upgraded.

2. Install the package called 'tmux' on the system. List all packages that are currently installed on the system and place them into a file in your home directory called "packages.list".
root@tcox1:~# apt-get install tmux
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  tmux
0 upgraded, 1 newly installed, 0 to remove and 4 not upgraded.
Need to get 247 kB of archives.
After this operation, 577 kB of additional disk space will be used.
Get:1 http://us-east-1.ec2.archive.ubuntu.com/ubuntu/ trusty/main tmux amd64 1.8-5 [247 kB]
Fetched 247 kB in 0s (12.3 MB/s)
Selecting previously unselected package tmux.
(Reading database ... 113386 files and directories currently installed.)
Preparing to unpack .../archives/tmux_1.8-5_amd64.deb ...
Unpacking tmux (1.8-5) ...
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
Setting up tmux (1.8-5) ...
root@tcox1:~# apt --installed list > packages.list
WARNING: apt does not have a stable CLI interface yet. Use with caution in scripts.

3. Search the currently configured repositories for all packages that contain or reference the word 'graph' and place the results into a file called 'graph.results'. Display them.
root@tcox1:~# apt-cache search graph > graph.list
root@tcox1:~# cat graph.list
activity-log-manager - blacklist configuration user interface for Zeitgeist
antlr - language tool for constructing recognizers, compilers etc
apturl - install packages using the apt protocol - GTK+ frontend
apturl-common - install packages using the apt protocol - common data
auctex - integrated document editing environment for TeX etc.
awstats - powerful and featureful web server log analyzer
baobab - GNOME disk usage analyzer
(NOTE - YOUR OUTPUT WILL BE LONGER AND DIFFER IN PKG LIST)
...

4. Running the appropriate command, run a check on your system to see if any packages still need to be updated.
root@tcox1:~# apt-get upgrade
Reading package lists... Done
Building dependency tree
Reading state information... Done
Calculating upgrade... Done
The following packages have been kept back:
  linux-headers-generic linux-headers-virtual linux-image-virtual
  linux-virtual
0 upgraded, 0 newly installed, 0 to remove and 4 not upgraded.

5. Completely remove the 'tmux' package we installed in Step #2. Verify afterwards by rerunning the command to list all packaged and search for the 'tmux' package.
root@tcox1:~# apt-get remove --purge tmux
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following packages will be REMOVED:
  tmux*
0 upgraded, 0 newly installed, 1 to remove and 4 not upgraded.
After this operation, 577 kB disk space will be freed.
Do you want to continue? [Y/n] y
(Reading database ... 113404 files and directories currently installed.)
Removing tmux (1.8-5) ...
Purging configuration files for tmux (1.8-5) ...
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
root@tcox1:~# apt --installed list > packages.list2

WARNING: apt does not have a stable CLI interface yet. Use with caution in scripts.

root@tcox1:~# diff packages.list packages.list2
1205d1204
< tmux/trusty,now 1.8-5 amd64 [installed]

6. List all of the information that is available for the 'tmux' package from the repositories and place it into a file called 'tmux.info' in your home directory. Display it.
root@tcox1:~# apt-file find tmux > tmux.info
root@tcox1:~# cat tmux.info
autossh: /usr/bin/rtmux
byobu: /usr/bin/byobu-tmux
byobu: /usr/lib/byobu/include/tmux-detach-all-but-current-client
byobu: /usr/lib/byobu/include/tmux-send-command-to-all-panes
byobu: /usr/lib/byobu/include/tmux-send-command-to-all-windows
byobu: /usr/share/byobu/keybindings/f-keys.tmux
byobu: /usr/share/byobu/keybindings/f-keys.tmux.disable
byobu: /usr/share/byobu/keybindings/mouse.tmux.disable
byobu: /usr/share/byobu/keybindings/mouse.tmux.enable
(NOTE YOUR INFO MAY BE DIFFERENT AND WILL BE MUCH LONGER)

...


##################################################
Exercise: Update Packages from the Network, a Repository or the Local File System (Red Hat/CentOS)
##################################################
1. Using the appropriate update management tool, make sure that your system is up to date and automatically install any needed updates without further confirmation.
[root@tcox2 ~]# yum -y update
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
* base: mirrors.advancedhosters.com
* extras: mirror.trouble-free.net
* updates: mirrors.lga7.us.voxel.net
Resolving Dependencies
--> Running transaction check
---> Package bind-libs-lite.x86_64 32:9.9.4-18.el7_1.3 will be updated
---> Package bind-libs-lite.x86_64 32:9.9.4-18.el7_1.5 will be an update
---> Package bind-license.noarch 32:9.9.4-18.el7_1.3 will be updated
---> Package bind-license.noarch 32:9.9.4-18.el7_1.5 will be an update
---> Package gdk-pixbuf2.x86_64 0:2.28.2-4.el7 will be updated
Package Updated Continue Here...
 2. Install the package tmux on the system. List all packages that are currently installed on the system and place them into a file in your home directory called "packages.list".
[root@tcox2 ~]# yum install -y tmux
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
* base: mirrors.advancedhosters.com
* extras: mirror.trouble-free.net
* updates: mirrors.lga7.us.voxel.net
Resolving Dependencies
--> Running transaction check
---> Package tmux.x86_64 0:1.8-4.el7 will be installed
--> Finished Dependency Resolution

Dependencies Resolved

========================================================================================================================
Package                   Arch                        Version                          Repository                 Size
===============================================================================================
Installing:
tmux                      x86_64                      1.8-4.el7                        base                      243 k

Transaction Summary
==============================================================================================
Install  1 Package

Total download size: 243 k
Installed size: 558 k
Downloading packages:
tmux-1.8-4.el7.x86_64.rpm                                                                        | 243 kB  00:00:00
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Installing : tmux-1.8-4.el7.x86_64                                                                                1/1
  Verifying  : tmux-1.8-4.el7.x86_64                                                                                1/1

Installed:
  tmux.x86_64 0:1.8-4.el7

Complete!
[root@tcox2 ~]# yum list installed > packages.list
[root@tcox2 ~]# ls -al packages.list

-rw-r--r--. 1 root root 57000 Sep 10 18:24 packages.list
 3. Search the currently-configured repositories for all packages that contain or reference the word 'graph' and place the results into a file called 'graph.results'. Display them.
[root@tcox2 ~]# yum search graph > graph.results
[root@tcox2 ~]# cat graph.results
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
* base: mirrors.advancedhosters.com
* extras: mirror.trouble-free.net
* updates: mirrors.lga7.us.voxel.net
============================== N/S matched: graph ==============================
boost-graph.i686 : Run-Time component of boost graph library
boost-graph.x86_64 : Run-Time component of boost graph library
boost-graph-mpich.i686 : Run-Time component of parallel boost graph library
boost-graph-mpich.x86_64 : Run-Time component of parallel boost graph library
boost-graph-openmpi.i686 : Run-Time component of parallel boost graph library
boost-graph-openmpi.x86_64 : Run-Time component of parallel boost graph library|
graphite2-devel.i686 : Files for developing with graphite2
graphite2-devel.x86_64 : Files for developing with graphite2
...
 4. Running the appropriate command, check on your system to see if any packages still need to be updated.
[root@tcox2 ~]# yum check-update
Loaded plugins: fastestmirror
Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast
base
                 | 3.6 kB  00:00:00
extras
                 | 3.4 kB  00:00:00
updates
                | 3.4 kB  00:00:00
(1/2): extras/7/x86_64/primary_db
                |  74 kB  00:00:00
(2/2): updates/7/x86_64/primary_db
                 | 3.3 MB  00:00:01
Determining fastest mirrors
* base: mirrors.advancedhosters.com
* extras: mirror.trouble-free.net
* updates: mirrors.lga7.us.voxel.net

bind-libs-lite.x86_64                                                                                     32:9.9.4-18.el7_1.5
                                updates
bind-license.noarch                                                                                       32:9.9.4-18.el7_1.5
                                updates
gdk-pixbuf2.x86_64                                                                                        2.28.2-5.el7_1
                                 updates
libXfont.x86_64                                                                                           1.4.7-3.el7_1
                                updates
mariadb-libs.x86_64                                                                                       1:5.5.44-1.el7_1
                                 updates
nss-softokn.x86_64                                                                                        3.16.2.3-13.el7_1
                                updates
nss-softokn-freebl.x86_64                                                                                 3.16.2.3-13.el7_1
                                updates
selinux-policy.noarch                                                                                     3.13.1-23.el7_1.17
                                 updates
selinux-policy-targeted.noarch
5. Completely remove the tmux package. Verify afterwards by rerunning the command to list all packaged and search for the tmux package.
[root@tcox2 ~]# yum erase tmux
Loaded plugins: fastestmirror
Resolving Dependencies
--> Running transaction check
---> Package tmux.x86_64 0:1.8-4.el7 will be erased
--> Finished Dependency Resolution

Dependencies Resolved

========================================================================================================================
Package                   Arch                        Version                         Repository                  Size
========================================================================================================================
Removing:
tmux                      x86_64                      1.8-4.el7                       @base                      558 k

Transaction Summary
========================================================================================================================
Remove  1 Package

Installed size: 558 k
Is this ok [y/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Erasing    : tmux-1.8-4.el7.x86_64                                                                                1/1
  Verifying  : tmux-1.8-4.el7.x86_64                                                                                1/1

Removed:
  tmux.x86_64 0:1.8-4.el7

Complete!
[root@tcox2 ~]# yum list installed > packages.list2
[root@tcox2 ~]# diff packages.list packages.list2
647d646
< tmux.x86_64                           1.8-4.el7                        @base
 6. Using the update management tool, find out what packages may provide or mention the tmux package.
[root@tcox2 ~]# yum provides tmux
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
* base: mirrors.advancedhosters.com
* extras: mirror.trouble-free.net
* updates: mirrors.lga7.us.voxel.net
tmux-1.8-4.el7.x86_64 : A terminal multiplexer
Repo        : base
7. List all of the information that is available for the tmux package from the repositories and place it into a file called 'tmux.info' in your home directory. Display it.
[root@tcox2 ~]# yum info tmux > tmux.info
[root@tcox2 ~]# cat tmux.info
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
* base: mirrors.advancedhosters.com
* extras: mirror.trouble-free.net
* updates: mirrors.lga7.us.voxel.net
Available Packages
Name        : tmux
Arch        : x86_64
Version     : 1.8
Release     : 4.el7
Size        : 243 k
Repo        : base/7/x86_64
Summary     : A terminal multiplexer
URL         : http://sourceforge.net/projects/tmux
License     : ISC and BSD
Description : tmux is a "terminal multiplexer."  It enables a number of
            : terminals (or windows) to be accessed and controlled from a single
            : terminal.  tmux is intended to be a simple, modern, BSD-licensed
            : alternative to programs such as GNU Screen.


##################################################
Exercise: Basic Bash Shell Scripting: Basic Setup and Execution
##################################################

1. Using any method you choose, create a directory in user's home directory called 'scripts' and change to that directory.
POSSIBLE SOLUTION:
[user@linuxacademy:~] $ mkdir scripts && cd scripts
2. Create a script in this directory called 'mytest.sh'. This script should contain the appropriate identification of the shell to use when executing and then run a command to display "Hello World".
[user@linuxacademy:scripts/] $ vim mytest.sh
Press 'i' to enter insert mode, following text entered
#!/bin/bash

echo "Hello World"
CMD MODE: Press ':wq!' to save and exit the file
 3. Give your script appropriate permissions to allow anyone with access to this directory to run the script.
[user@linuxacademy:scripts/] $ chmod 755 mytest.sh
OR
[user@linuxacademy:scripts/] $ chmod a+rx mytest.tsh && chmod u+rwx mytest.sh
4. Add this directory to your environment path so that you can execute this script from any location. Verify the script runs outside the 'scripts' directory and does what you expect.
[user@linuxacademy:scripts/] $ export PATH=$PATH:/home/user/scripts
[user@linuxacademy:scripts/] $ cd ..
[user@linuxacademy:~] $ mytest.sh
Hello World
5. Append commands to the script that list the contents of the directory and then ping google.com three times. Verify that the script displays the proper output to the console.
[user@linuxacademy:~] $  cd scripts
[user@linuxacademy:scripts/] $ echo "ls -al" >> mytest.sh && echo "ping -c3 google.com" >> mytest.sh
[user@linuxacademy:scripts/] $ mytest.sh
Hello World
total 12
drwxrwxr-x  2 user user 4096 Aug 16 13:25 .
drwxr-xr-x 39 user user 4096 Aug 16 13:24 ..
-rwxr-xr-x  1 user user   61 Aug 16 13:25 mytest.sh
PING google.com (216.58.218.206) 56(84) bytes of data.
64 bytes from dfw06s47-in-f206.1e100.net (216.58.218.206): icmp_seq=1 ttl=56 time=12.2 ms
64 bytes from dfw06s47-in-f206.1e100.net (216.58.218.206): icmp_seq=2 ttl=56 time=11.6 ms
64 bytes from dfw06s47-in-f206.1e100.net (216.58.218.206): icmp_seq=3 ttl=56 time=11.7 ms

--- google.com ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2421ms
rtt min/avg/max/mdev = 11.607/11.864/12.216/0.257 ms


##################################################
Exercise: Basic Bash Shell Scripting: Conditionals and Loops
##################################################
Create a script called "testscript.sh" in user's home directory that can do the following tasks using one or more of the conditionals and loops that we discussed during the course:
Identify the shell interpreter to use at the top of the script
Display a message: "This script is beginning..."
Create variables at the top to identify a directory to for and a counter to use; set that initial value to 0
Display the current variable values on the terminal
Test for the existence of the directory identified by the variable above. If that directory exists, display a message that it does; if it does not, display a message that it does not.
Within the block that runs if the directory does not exist, display the current value of the counter identified by the variable above. Write a block that displays that message (the counter value) five times and then stops
Display a message that the script is ending
Execute the script and verify the output by creating and deleting the name of the directory from your script and noting the behavior. Finally, echo the 'exit' code of the script immediately after you run it and note the result.
NOTE: Your script may look different because of the messages you choose to include, the order you execute the commands and the tests and loop conditions you set up. However, as long as you use the correct bash concepts and end up with the expected output, this is acceptable. This is one example of how to write a script described above and the resulting output from running it.
EXAMPLETESTSCRIPT.SH
#!/bin/bash

echo "This script is beginning..."

DIRECTORY="test"
COUNTER=0

echo "Directory Searching for: $DIRECTORY"
echo "The Counter is Currently Set at $COUNTER"

if [ -d "$DIRECTORY" ]; then
    echo "The $DIRECTORY Directory exists!"
else
    echo "The $DIRECTORY Directory does NOT exist!"

    while [ $COUNTER -le 4 ]
    do
        echo "This is Execution Line: $COUNTER"
        COUNTER=$(( $COUNTER + 1 ))
    done
fi

echo "This script is complete."


##################################################
Exercise: Managing File Permissions
##################################################
1. Once logged in as the root user, create a directory in the root filesystem called 'mybkup'. Change to that directory. Copy all the contents, recursively, of the '/etc' directory to the new directory.
user@linuxacademy:~$ sudo su -
root@linuxacademy:~# cd /
root@linuxacademy:/# mkdir mybkup
root@linuxacademy:/# cd mybkup
root@linuxacademy:/mybkup# cp -rf /etc/* .
root@linuxacademy:/mybkup# ls -al
Should be the contents of the /etc directory displayed here
2. Using the numeric permission notation, set the permissions on the 'mybkup' directory to world read/write/execute. Be sure to set the permissions only on the directory and not on the contents of the directory.
root@linuxacademy:/mybkup# cd ..
root@linuxacademy:/# chmod 777 mybkup
3. Double check your permissions. Become user on the system and list the contents of the directory to be sure it can be accessed.
root@linuxacademy:/# su - user
user@linuxacademy:~$ ls -al /mybkup
4. Become the root user once again. In the 'mybkp' directory, create a file that contains the contents as follows: echo "Hello World". Name that file 'myprog'.
user@linuxacademy:~$ exit
root@linuxacademy:/# cd mybkup
root@linuxacademy:/mybkup# echo "echo \"Hello World\" " > myprog
5. Using the text-based permission notation, set the permissions on the 'myprog' file such that the owner can read/write/execute, the group owner can read/execute and everyone else can read/execute. List the permissions once complete to verify.
root@linuxacademy:/mybkup# chmod a+rx myprog
root@linuxacademy:/mybkup# chmod g+rx myprog
root@linuxacademy:/mybkup# chmod u+rwx myprog
root@linuxacademy:/mybkup# ls -al myprog
-rwxr-xr-x 1 root root 20 Aug  2 18:04 myprog
6. Become user on the system and run the new 'myprog' file using the proper path. Be sure you get the greeting we created in Step 4; if not, double check your permissions settings.
root@linuxacademy:/mybkup# sudo su - user
user@linuxacademy:~$ /mybkup/myprog
Hello World
7. Become the root user once again. Change the file permissions on the 'mybkup' directory using the numeric permission notation, such that only the owner can read/write/execute. All other users should have no access to the directory or its contents. Apply those permissions recursively.
user@linuxacademy:~$ exit
root@linuxacademy:/mybkup# cd ..
root@linuxacademy:/# chmod 700 -R mybkup
root@linuxacademy:/# ls -al
...
drwx------ 153 root root 12288 Aug  2 18:04 mybkup
...
8. Double check your permissions. Become another user on the system and list the contents of that directory and note the response.
root@linuxacademy:/# sudo su - user
user@linuxacademy:~$ ls -al /mybkup
ls: cannot open directory /mybkup: Permission denied


##################################################
Exercise: File Attributes
##################################################
1. Using any method you choose, create a directory in your home directory called 'attributes'. Once created, change to that directory.
Possible solution:
[user@linuxacademy:~] $ mkdir attributes && cd attributes
2. Create three files in this directory called 'test1', 'test2' and 'test3'. The contents of the files can be anything you choose.
Possible solutions:
[user@linuxacademy:attributes/] $ touch test1 test2 test3
or
[user@linuxacademy:attributes/] $ echo "Some text" > test1 (repeating for test2 and test3)
3. Using the appropriate octal or ascii permission notation, change permissions to be read, write, execute for the owner and read, execute for everyone else. Be sure to apply those permissions to all three files.
[user@linuxacademy:attributes/] $ chmod 755 test*
or
[user@linuxacademy:attributes/] $ chmod a+rw test* && chmod u+rwx test*
4. On 'test1', leave the permissions as set in Step 3. On 'test2', using the appropriate elevated access and special attributes for files, set the file so that, regardless of ownership, the file cannot be overwritten but CAN be appended to. On 'test3', using the special attributes for files, set the file to be immutable regardless of permissions or ownership.
[user@linuxacademy:attributes/] $ sudo chattr +a test2
[user@linuxacademy:attributes/] $ sudo chattr +i test3
5. Before you go further, list the file attributes (not permissions/ownership) and verify the proper attributes are applied as expected. Using the echo command and output redirection, attempt to overwrite the contents each of the three files and note the results.
[user@linuxacademy:attributes/] $ lsattr
----i--------e-- ./test3
-------------e-- ./test1
-----a-------e-- ./test2
[user@linuxacademy:attributes/] $ echo "Overwrite" > test1
[user@linuxacademy:attributes/] $ echo "Overwrite" > test2
bash: test2: Operation not permitted
[user@linuxacademy:attributes/] $ echo "Overwrite" > test3
bash: test3: Permission denied
6. Attempt to delete 'test1', 'test2' and 'test3'. If the deletion fails for any of the files, set the appropriate special attribute that will allow the deletion to succeed and verify.
[user@linuxacademy:attributes/] $ rm test1
[user@linuxacademy:attributes/] $ rm test2
rm: cannot remove ‘test2’: Operation not permitted
[user@linuxacademy:attributes/] $ rm test3
rm: remove write-protected regular empty file ‘test3’? y
rm: cannot remove ‘test3’: Operation not permitted
[user@linuxacademy:attributes/] $ sudo chattr -a test2 && sudo chattr -i test3
[user@linuxacademy:attributes/] $ rm test2
[user@linuxacademy:attributes/] $ rm test3


##################################################
User and Group Management (15% of Exam)
##################################################
##################################################
Lecture: Create, Delete and Modify Local User Accounts
##################################################
useradd testuser

#now tou have to create a password for the testuser
passwd testuser

adduser #on debian this does the same thing as user add and passwd

userdel -r testuser #this will delete the users home directory, remove home isnt done by default


##################################################
Lecture: Create, Delete and Modify Local Groups
##################################################
cat /etc/group

when you add a user a group for that user is added

#both of these commands do the samething
addgroup

groupadd

#to add a user to a group you can add that user to the group by editing the group file

#groups are really a way to organize users

gpasswd <groupname> #to set a group password

newgrp <groupname>  #this will switch you to that group

chgrp <groupname> <filename> this will change the group owner of the file

##################################################
Lecture: Use sudo to Access the root Account
##################################################
visudo #this command is how you edit the suduers file, this command will verify the file before it will save

# User privilege specification

user ALL=(ALL:ALL)  ALL  #this will allow the user to run elevated commands

#to give elevated privileges to a user you can also add them to the sudo group

##################################################
Lecture: Manage User Accounts
##################################################
#all user information is kept in /etc/passwd

vim /etc.bash.bashrc  #this becomes the users .bashrc  #also used for system wide login changes

vim /etc/skel #this is where a users default home dir gets populated from, you can also make changes to the . files located here

/etc/profile #this is for global configurations

#how to create a user by hand
vipw
#add a new line
testuser:x:1002:1002:,,,:/home/testuser:/bin/bash

:wq

vigr
useruser:x:1002:

:wq

mkdir/home/testuser
cp -r /etc/skel /home/testuser
chown -R testuser.testuser /home/testuser
passwd testuser



##################################################
Lecture: Manage User Processes
##################################################
top #give a running view of all processes and user
20 is the lowest priority
-20 is the highest
init is pid 1


htop #better than top

ps #just shows use what our user is running, just shows all processes running as the current user in the current terminal

ps -aux #this gives use all processes running by all users

ps -axjf #this gives use a tree view of the processes

pgrep #to get the pid of a process

ppid #parent process

kill <pid>
#if you get a operation not permitted it probably because you dont own the process

kill -KILL <pid> #this ends the kill signal to the kernel

-KILL is the same as -9

kill -HUP <pid> #stup and restart

kill -l #this lists all the signals

renice 10 <pid> #10 is the nice value

nice -n 20 /bin/bash #this starts the process and assigns the nice value at the lowest priority

##################################################
Lecture: User Account Attributes
##################################################
#these are located in /etc/passwd

finger <user> #The finger displays information about the system users.  needs to be installed with apt-get or yum

chfn #The chfn command changes user fullname, office room number, office phone number, and home phone number information for a user's account. This information is typically printed by finger(1) and similar programs.

~ chfn joe
Changing the user information for joe
Enter the new value, or press ENTER for the default
Full Name [joe]: joe wagner
Room Number []: 510
Work Phone []: 5558889999
Home Phone []: 444-555-7777
Other []: this is other information

cat /passwd
joe:x:1000:1000:joe wagner,510,5558889999,444-555-7777,this is other information:/home/joe:/usr/bin/zsh

chsh #this will change the shell, The chsh command changes the user login shell. This determines the name of the user's initial login command. A normal user may only change the login shell for her own account; the superuser may change the login shell for any account.

passwd #The passwd command changes passwords for user accounts.

#as a root user
chsh testuser #this user will be able to su but not be able to login
/bin/false

chsh testuser #this user will not be able to login or su
/usr/sbin/nologin


##################################################
Exercise: Using sudo to Manage Access to the root Account
##################################################
1. Logged in as your default user, use the sudo command to list the contents of the '/var/log/syslog' file and note the result.
user@linuxacademy:~$ sudo cat /var/log/syslog
or
user@linuxacademy:~$ sudo more /var/log/syslog
user is not in the sudoers file.  This incident will be reported.
2. Become the root user on the system. Determine if the user user has sudo privileges. If not, grant them by adding them directly to the appropriate file or to the appropriate group. Verify by logging back in as user and rerunning the command from Step 1.
user@linuxacademy:~$ su -
Password:
root@linuxacademy:~# cat /etc/sudoers | grep user
Does the user user appear in the results? Check for groups that have sudo rights.
root@linuxacademy:~# cat /etc/group | grep user
Does the user user appear in any groups that have sudo rights in the above sudoers file?
If neither of the above has the correct entry, add the user to '/etc/sudoers' under root or add to the wheel group and be sure wheel is uncommented in '/etc/sudoers'.
root@linuxacademy:~# exit
user@linuxacademy:~$ sudo cat /var/log/syslog
Aug  8 07:59:46 linuxacademy anacron[12757]: Job `cron.daily' terminated
Aug  8 07:59:46 linuxacademy anacron[12757]: Normal exit (1 job run)
Aug  8 08:00:36 linuxacademy com.ubuntu.OneConf[2513]: WARNING:oneconf.hosts:Error in loading other_hosts file: [Errno 2] No such file or directory: '/home/user/.cache/oneconf/80847e55eaa94d66b911b4cd8c917b24/other_hosts'
3. As the default user, execute the appropriate command using sudo to become the root user without having to know the root password.
user@linuxacademy:~$ sudo su -
[sudo] password for user:
root@linuxacademy:~#
4. Using the user account, execute the proper command to change the current root password without knowing it. Once changed, verify the password by executing a su to the root account.
user@linuxacademy:~$ sudo passwd root
[sudo] password for user: (enter 'user' password here)
Enter new UNIX password:
Retype new UNIX password:
Password Updated.
user@linuxacademy:~$ su -
Password:
root@linuxacademy:~#


##################################################
Exercise: Managing Local User Accounts
##################################################
1. Using the useradd command, create a user called username. During creation, be sure to use the appropriate options to assign the standard '/home' directory folder and specify the shell to use as '/bin/bash'.
root@linuxacademy:~# useradd username -m -s /bin/bash
2. Create a password for this user called 'password'. Copy the appropriate system skeleton files from the /etc directory so that the profile and bash parameters intended for all users exist in that directory. Modify the permissions and ownership of those files once copied appropriately.
root@linuxacademy:~# passwd username
Enter Password: password
root@linuxacademy:~# cd /home/username
root@linuxacademy:~# cp -rT /etc/skel/ .
root@linuxacademy:~# chown username.username .*
3. Log in as that user and verify that the shell prompt looks as expected and the system skeleton files are where they should be and owned by the username user and group. Exit that user and become root again.
root@linuxacademy:~# sudo su - username
username@linuxacademy:~$ ls -al
-rw------- 1 username username      857 Aug  2 17:59 .bash_history
-rw-r--r-- 1 username username      220 Aug  2 16:42 .bash_logout
-rw-r--r-- 1 username username     3760 Aug  2 16:42 .bashrc
username@linuxacademy:~$ exit
4. Using the adduser command, create a user called testuser such that the full name is captured as 'Test User' with a room number of '123'.
root@linuxacademy:~# adduser testuser
Adding user `testuser' ...
Adding new group `testuser' (1003) ...
Adding new user `testuser' (1003) with group `testuser' ...
Creating home directory `/home/testuser' ...
Copying files from `/etc/skel' ...
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
Changing the user information for testuser
Enter the new value, or press ENTER for the default
Full Name []: Test User
Room Number []: 123
Work Phone []:
Home Phone []:
Other []:
Is the information correct? [Y/n] y
Your output may differ slightly regarding User/Group IDs.
5. Log in as that user and verify that the shell prompt looks as expected and the system skeleton files are where they should be and are owned by the testuser user and group. Exit that user and become root again.
root@linuxacademy:~# sudo su - testuser
testuser@linuxacademy:~$ ls -al
-rw------- 1 testuser testuser      857 Aug  2 17:59 .bash_history
-rw-r--r-- 1 testuser testuser      220 Aug  2 16:42 .bash_logout
-rw-r--r-- 1 testuser testuser     3760 Aug  2 16:42 .bashrc
testuser@linuxacademy:~$ exit
6. Add the user testuser to the group called username. Do not edit the groups file directly; use the appropriate options on the usermod command.
root@linuxacademy:~# usermod -aG username testuser
7. Verify that the 'testuser' account has been added as a member of the 'username' group in the appropriate file.
root@linuxacademy:~# cat /etc/group | grep username
username:x:1003:testuser

##################################################
Exercise: Creating Local User Groups
##################################################
1. Verify the user user has an associated user group by listing the contents of the appropriate file and then grep for a match. Note the associated Group ID of the user group, if it exists.
Your user ID may differ:
root@linuxacademy:~# cat /etc/group | grep 'user'
...
user:x:1002:
...
2. Create another user called testuser1. Duplicate that effort by creating testuser2. Be sure to set password for both users and remember the given passwords.
root@linuxacademy:~# useradd [or adduser] testuser1
root@linuxacademy:~# useradd [or adduser] testuser2
root@linuxacademy:~# passwd testuser1
Enter New Password:
Retype New Password:
root@linuxacademy:~# passwd testuser1
Enter New Password:
Retype New Password:
3. Using any text editor you like, add the testuser1 user to the testuser2 group and the testuser2 user to the testuser1 group. Be sure to edit the appropriate file for groups. Verify that the groups display the new members correctly within the file.
root@linuxacademy:~# vi /etc/group
testuser1:x:1003:testuser2
testuser2:x:1004:testuser1
4. Create a directory off the root filesystem called 'permtest'. Change permissions on that directory to world read/write/execute.
root@linuxacademy:~# mkdir /permtest
root@linuxacademy:~# chmod 777 /permtest
or
root@linuxacademy:~# chmod a+rwx /permtest
5. Log in as testuser1 and navigate to the previously-created 'permtest' directory. Create two files, one called 'test1.txt' and the other called 'test2.txt'. Change the file permissions on 'test1.txt' to group read/write/execute. Change the file permissions on 'test2.txt' to group read/execute.
testuser1@linuxacademy:~$ cd /permtest
testuser1@linuxacademy:/permtest$ touch test1.txt test2.txt
or
testuser1@linuxacademy:/permtest$ echo "test1" > test1.txt && echo "test2" > test2.txt
testuser1@linuxacademy:/permtest$ chmod g+rwx test1.txt [or chmod 775 test1.txt]
testuser1@linuxacademy:/permtest$ chmod g+rx test2.txt [or chmod 755 test2.txt]
6. Log out of the testuser1 account and log in to the testuser2 account. Move to the 'permtest' directory. Attempt to remove both files and note the results.
testuser1@linuxacademy:/permtest$ su - testuser2
Password: (enter testuser2 password here)
testuser2@linuxacademy:~$ cd /permtest
testuser2@linuxacademy:/permtest$ rm test1.txt
testuser2@linuxacademy:/permtest$ rm test2.txt
rm: remove write-protected regular file ‘test2.txt’? y

##################################################
Networking (15% of Exam)
##################################################
##################################################
Lecture: Implement Packet Filtering
##################################################
#iptables

iptables -L

iptables -L | grep FORWARD

iptables -P FORWARD DROP

iptables --flush

iptables -L

dropping #it will look like the ip address isnt being used

rejecting #you will get a error message, but its existence is confirmed because you get a error or rejected message

#filter ping, icmp

iptables -A INPUT --protocol icmp --in-interface eth0 -j DROP
iptables -L | grep DROP

ping localhost #you will be able to ping yourself, you never leave the interface

iptables --flush

iptables -A INPUT --protocal icmp --in-interface eth0 -j REJECT

iptables -L | grep REJECT

#from another server ping the ipaddress for the server that we just applied the iptables rules
#you will see "Destination port unreachable"

rejecting is not recommended

##################################################
Lecture: Configure Firewall Settings
##################################################
#on redhat its called firewalld
#on debian its called iptables

#we are on centos

cd /etc/sysconfig
vim iptables-config #this is where the behavior of iptables are located

iptables -L #list rules

iptables -L | grep INPUT

iptables -F INPUT  #this will flush the chain for input on the iprules

iptables --flush #this will flush all rules

iptables -A INPUT  --protocol icmp --in-interface eth0 -j REJECT

iptables -L  | grep -i reject

iptables --flush

iptables -A INPUT  --protocol icmp --in-interface eth0 -j DROP

iptables -A INPUT  -p tcp -s 0/0 --sport 1024:65535 -d 0/0 --dport 80 -j REJECT

iptables - A OUTPUT -p tcp --dport 80 --sport 1024:65535 -j REJECT

iptables --flush

systemctl restart firewalld

iptables-save > /etc/sysconfig/iptables

iptables-restore < /etc/sysconfig/iptables

#when you apply a rule the change is applied immediately, no need to restart.


##################################################
Lecture: Configure Network Services to Start on Boot - systemd
##################################################
#this is more modern than sysvinit

yum install telnet-server

yum install telnet #this installs the client

sysetmctl #this will show you whats installed on the system

systemctl status telnet-server

systemctl enable telnet.socket #this will enable the service to start on reboot

systemctl enable telnet.socket #what enabling does is createst a sym link
Created symlink from /etc/systemd/system/sockets.target.wants/telnet.socket to /usr/lib/systemd/system/telnet.socket.

#now that we have enabled the service we need to start the

#we can test if the socket is listening
ss -tnlp | grep 23 #ss - another utility to investigate sockets, ss is used to dump socket statistics. It allows showing information similar to netstat.  It can display more TCP and state informations than other tools.


systemctl start telnet.socket

systemctl status telnet.socket

systemctl disable telnet.socket #this disables the service from starting on boot


##################################################
Lecture: Configure Network Services to Start on Boot - sysvinit
##################################################
#this is older that systemd

yum install telnet-server

yum install telnet

chkconfig #chkconfig - updates and queries runlevel information for system services #show us the status of all the services on the system
#the debian equivalent is update-rc.d

chkconfig xinetd on #this enables the service, we have to start xinetd because telnet is managed by it
service xinetd start
chkconfig telnet on
service telnet start

chkconfig

chkconfig xinetd off
service xinetd stop

##################################################
Lecture: Monitor Network Performance
##################################################
#netstat has been deprecated the ss command is it replacement

ss -t -a #show all tcp sockets on our server

ss -t -o #-o show timer information

ss -tn sport = :22 #

nmap #nmap - Network exploration tool and security / port scanner

nmap -A #

nmap -A -sS <ipaddress>  #this will not leave any logs on the remote system

iptraf #tells you from a packet

dstat #tell you about cpu ram and disk


##################################################
Lecture: Statically Route IP Traffic
##################################################
netstat -rn #this is the old deprecated way

ip route show   #this is the new way to get the route

route add -net 172.17.0.0 netmask 255.255.255.0 gw 192.168.1.131 dev eth0

netstat -rn

ip route show
ip route add 172.17.42.0/24 via 192.168.1.131 dev eth0

ip route delete 172.170.0.0/24
ip route delete 172.17.42.0/24

ip route show


##################################################
Lecture: Dynamically Route IP Traffic
##################################################
#turn you linux system into an intelligent router
used to be zebra, a fork called quagga

apt-get install quagga

cd /etc/quagga
vim daemons
zebra=1 #this might have change to yes and no
ripd=1

vim zebra.conf
service quagga restart
hostname <hostname>
password quagga

:wq

vim ripd.conf
service quagga restart
hostname <hostname>
password quagga

:wq

service quagga restart

chown quagga:quagavty *.conf
chmod 640 *.conf

telnet localhost 2601
#enter the password you put in the configuration files
enable
configure terminal
inter eth0
ip addr 192.168.1.243/24
write
quit
we have no closed the configuration

#now we need configure the rip daemon
telnet localhost 2602

enable
configure terminal
router rip
version 2
network 192.168.1.0/24
#if we had a secondary network we would but that here
exit
write
exit
exit

cat ripd.conf

ip route show
#the default protocal look the same as a rerular directive


#on a host
ip route add default 192.168.1.243
ip route show
ping 192.168.1.1  #this is the old gateway, we still get a response
ping 192.168.1.243  #this is the quagga server, we will get a response, this is functioning as a router on our networks so we can define all our routes on the quagga server


##################################################
Exercise: Configure Network Services to Start Automatically at Boot: SystemD Method
##################################################
1. Install the telnet client and server application on your distribution.
[root@linuxacademy ~]# yum install -y telnet telnet-server
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
* base: mirrors.advancedhosters.com
* extras: mirror.solarvps.com
* updates: mirror.us.leaseweb.net|
Resolving Dependencies
--> Running transaction check
---> Package telnet.x86_64 1:0.17-59.el7 will be installed
---> Package telnet-server.x86_64 1:0.17-59.el7 will be installed
--> Finished Dependency Resolution

Dependencies Resolved

=================================================================================================================================================================================================================
Package                                               Arch                                           Version                                                 Repository
                                 Size
=================================================================================================================================================================================================================
Installing:
telnet                                                x86_64                                         1:0.17-59.el7                                           base
                                 63 k
telnet-server                                         x86_64                                         1:0.17-59.el7                                           base                                          40 k

Transaction Summary
=================================================================================================================================================================================================================
Install  2 Packages

Total download size: 103 k
Installed size: 168 k
Downloading packages:
(1/2): telnet-0.17-59.el7.x86_64.rpm
                 |  63 kB  00:00:00
(2/2): telnet-server-0.17-59.el7.x86_64.rpm                                                                                                                                               |  40 kB  00:00:00
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Total
       390 kB/s | 103 kB  00:00:00
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Installing : 1:telnet-server-0.17-59.el7.x86_64
                                   1/2
  Installing : 1:telnet-0.17-59.el7.x86_64                                                                                                                                                                   2/2
  Verifying  : 1:telnet-0.17-59.el7.x86_64                                                                                                                                                                   1/2
  Verifying  : 1:telnet-server-0.17-59.el7.x86_64                                                                                                                                                            2/2

Installed:
  telnet.x86_64 1:0.17-59.el7                                                                         telnet-server.x86_64 1:0.17-59.el7

Complete!
 2. Verify that the telnet client is installed and in your path. Display the status of the telnet server service using the appropriate Systemd management command.
[root@linuxacademy ~]# which telnet
/bin/telnet
[root@tcox2 ~]# systemctl status telnet.socket
telnet.socket - Telnet Server Activation Socket
   Loaded: loaded (/usr/lib/systemd/system/telnet.socket; disabled)
   Active: inactive (dead)
     Docs: man:telnetd(8)
   Listen: [::]:23 (Stream)
Accepted: 0; Connected: 0

Aug 26 19:38:25 tcox2.mylabserver.com systemd[1]: Closed Telnet Server Activation Socket.
 3. Start the telnet server and verify, using the installed client, that it is listening for incoming connections. Display the status of the service once you know it is listening using the Systemd management command.
[root@linuxacademy ~]# systemctl start telnet.socket
[root@linuxacademy ~]# telnet localhost
Trying ::1...
Connected to localhost.
Escape character is '^]'.
Kernel 3.10.0-229.11.1.el7.x86_64 on an x86_64
tcox2 login: root
Password:
Connection closed by foreign host.
[root@tcox2 ~]# systemctl status telnet.socket
telnet.socket - Telnet Server Activation Socket
   Loaded: loaded (/usr/lib/systemd/system/telnet.socket; disabled)
   Active: active (listening) since Wed 2015-08-26 19:42:30 UTC; 42s ago
     Docs: man:telnetd(8)
   Listen: [::]:23 (Stream)
Accepted: 1; Connected: 0

Aug 26 19:42:30 tcox2.mylabserver.com systemd[1]: Starting Telnet Server Activation Socket.
Aug 26 19:42:30 tcox2.mylabserver.com systemd[1]: Listening on Telnet Server Activation Socket.
4. Configure the telnet service to start automatically for all multi-user runlevels after boot.
[root@linuxacademy ~]# systemctl enable telnet.socket
ln -s '/usr/lib/systemd/system/telnet.socket' '/etc/systemd/system/sockets.target.wants/telnet.socket'
5. Reboot the server. Verify that the telnet service is running by displaying its status and connecting using the local telnet client. Finally, for security, STOP the telnet service and DISABLE it from starting on boot before ending this exercise.
[root@linuxacademy ~]# reboot
[root@linuxacademy ~]# systemctl status telnet.socket
telnet.socket - Telnet Server Activation Socket
   Loaded: loaded (/usr/lib/systemd/system/telnet.socket; enabled)
   Active: active (listening) since Wed 2015-08-26 19:42:30 UTC; 2min 24s ago
     Docs: man:telnetd(8)
   Listen: [::]:23 (Stream)
Accepted: 1; Connected: 0
Aug 26 19:42:30 tcox2.mylabserver.com systemd[1]: Starting Telnet Server Activation Socket.
Aug 26 19:42:30 tcox2.mylabserver.com systemd[1]: Listening on Telnet Server Activation Socket.
[root@tcox2 ~]# telnet localhost
Trying ::1...
Connected to localhost.
Escape character is '^]'.
Kernel 3.10.0-229.11.1.el7.x86_64 on an x86_64
tcox2 login:
telnet> quit
Connection closed.
[root@linuxacademy ~]# systemctl stop telnet.socket
[root@linuxacademy ~]# systemctl disable telnet.socket
rm '/etc/systemd/system/sockets.target.wants/telnet.socket'




##################################################
Exercise: Monitor Network Performance
##################################################
1. Using the discussed replacement command for the now deprecated netstat utility, run a command with the appropriate options to display the current open, closed, establish and orphaned TCP processes on the system.
[user@linuxacademy:~]$ ss -s
Total: 136 (kernel 0)
TCP:   6 (estab 2, closed 0, orphaned 0, synrecv 0, timewait 0/0), ports 0

Transport Total     IP        IPv6
*         0         -         -
RAW       1         0         1
UDP       7         5         2
TCP       6         4         2
INET      14        9         5
FRAG      0         0         0
2. With that same command, run a scan for all open ports on the system and then another listing processes open by socket.
[user@linuxacademy:~]$ ss -l
Netid State      Recv-Q Send-Q                                                                    Local Address:Port
                                                                   Peer Address:Port
nl    UNCONN     0      0                                                                                  rtnl:4194923                                                                                 *
nl    UNCONN     0      0                                                                                  rtnl:NetworkManager/619                                                                                 *
nl    UNCONN     0      0                                                                                  rtnl:kernel                                                                                  *
nl    UNCONN     0      0                                                                                  rtnl:avahi-daemon/620                                                                                 *
nl    UNCONN     0      0                                                                                  rtnl:4194923

[user@linuxacademy:~]$ ss -pl
Netid State      Recv-Q Send-Q                                                                    Local Address:Port                                                                        Peer Address:Port
nl    UNCONN     0      0                                                                                  rtnl:4194923                                                                                 *
nl    UNCONN     0      0                                                                                  rtnl:NetworkManager/619                                                                                 *
nl    UNCONN     0      0                                                                                  rtnl:kernel                                                                                  *
nl    UNCONN     0      0                                                                                  rtnl:avahi-daemon/620                                                                                 *
nl    UNCONN     0      0                                                                                  rtnl:4194923                                                                             *
3. Run the command that allows you to filter IPv4 traffic by type; show types ESTABLISHED and LISTEN.
[user@linuxacademy ~]$ ss -4 state ESTABLISHED
Netid Recv-Q Send-Q              Local Address:Port                  Peer Address:Port
u_str 0      0                               * 18851                            * 19591
u_str 0      0      /run/systemd/journal/stdout 13776                            * 13775
u_str 0      0      /var/run/dbus/system_bus_socket 16454                            * 1645
[user@linuxacademy ~]$ ss -4 state LISTEN
ss: no socket states to show with such filter.
4. Download and run the dstat command using the appropriate package manager. Using the command, display the current processes, memory and network bandwidth utilization of the server.
[user@linuxacademy ~]$ sudo yum -y install dstat OR sudo apt-get -y install dstat
[user@linuxacademy ~]$ dstat
You did not select any stats, using -cdngy by default.
----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--
usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw
  0   0 100   0   0   0|  12k   39k|   0     0 |   0     0 |  55    97
  0   0 100   0   0   0|   0     0 | 513B  830B|   0     0 |  55   105
  0   0 100   0   0   0|   0    55k| 431B  410B|   0     0 |  57   108
5. Repeat the above command but changing the sampling to run every five seconds and execute only ten iterations of it before stopping.
[user@linuxacademy ~]$ dstat 5 10
You did not select any stats, using -cdngy by default.
----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--|
usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw
  0   0 100   0   0   0|  12k   39k|   0     0 |   0     0 |  55    97
  0   0 100   0   0   0|   0  2355B| 665B  436B|   0     0 |  37    66
  0   0 100   0   0   0|   0    29k| 773B  337B|   0     0 |  41    69
  0   0 100   0   0   0|   0     0 | 573B  337B|   0     0 |  34    58
  0   0 100   0   0   0|   0     0 | 411B  337B|   0     0 |  34    64
  0   0 100   0   0   0|   0     0 | 527B  349B|   0     0 |  36    65
  0   0 100   0   0   0|   0     0 | 413B  349B|   0     0 |  35    66
  0   0 100   0   0   0|   0    22k| 833B  337B|   0     0 |  49    78
  0   0 100   0   0   0|   0     0 |1351B  337B|   0     0 |  75   125
  0   0 100   0   0   0|   0     0 | 597B  337B|   0     0 |  54   105
  0   0 100   0   0   0|   0     0 | 497B  367B|   0     0 |  56   109
6. Run the same command once more to display only network statistics every two seconds, looping through five executions before exiting.
[user@linuxacademy ~]$ dstat -n 2 5
-net/total-
recv  send
621B  182B
580B  150B
371B  150B
694B  150B
737B  180B


##################################################
Service Configuration (10% of Exam)
##################################################
##################################################
Lecture: Provide/Configure Network Shares via NFS/CIFS – Server
##################################################
NFS = network file share
CIFS = Common internet file system

yum install nfs-utils nfs-utils-lib #this wil instal what we need from a server perspective

chkconfig nfs on

service nfs start

#we need to create the dir we want to export to our client servers

cd /var
mkdir share
chmod 755 share

man exports #for /etc/exports

vim /etc/exports
#who we want to access, which directories and under what circumstances

#/home 0.0.0.0/24 #this would mean any ip could access this file system

/home 192.168.1.0/24(rw,no_root_squash)  #rootsquash remaps the root id from the remote system to the anonymous user on the fileshare
/var/share 192.168.1.0/24(ro)  #ro means read only
:wq

exportfs -a

service nfs restart


##################################################
Lecture: Provide/Configure Network Shares via NFS/CIFS – Client
##################################################
cat /etc/exports

yum install nfs-utils nfs-utils-lib

cd /mnt
mkdir nfs_home
mkdir nfs_share
mount <ipaddress of the server>:/<nfs> /mnt/<mount_point?
mount 192.168.1.131:/home mnt/nfs_home/
mount 192.168.1.131:/var/share /mnt/nfs_share/

#now we need to addd them to the fstab file
vim /etc/fstab
192.168.1.131:/home /mnt/nfs_home nfs rw,sync,hard,intr 0 0
192.168.1.131:/var/share /mnt/nfs_share nfs ro,sync,hard,intr 0 0


mount -a #because there is aa fstab entry the mounts will remount

mount <dir_name> #will also mount the dir

##################################################
Lecture: Configure Email Aliases
##################################################
#adding local email aliases
ps aux | grep postfix

#if post fix isnt install
yum install postfix
systemctl enable postfix.service
systemctl start postfix

adduser user2
passwd user2

cd /etc/postfix

vim aliases
user: user,user2
admin: joe
:wq

adduser admin
passwd admin

postalias /etc/postfix/aliases


##################################################
Lecture: Configure an SMTP Service
##################################################
cd /etc/postfix

vim main.cf #this is our man configuration file
myorigin = $HOST

#look at the mydestination option

#transport file defines relationships between domains

vim transport
#go to the end

joe-virt local:
joe-virt.com local:
.joe-vert local:
.joe-virt.com local:

vim /etc/hosts
<add_ipaddress> joe-virt.com joe-virt

postmap /etc/postfix/transport  #when the db gets created it will error if we have a issue in our configs


##################################################
Lecture: Restrict Access to an SMTP Service
##################################################
cd /etc/postfix
vim main.cf

#for debian
vim /usr/share/postfix/main.cf.dist
# require HELO  or ehlo
smtp_helo_require = yes

# reject any not local destinations for sender
smtp_sender_restrictions = permit_mynetworks, reject_unknown_sender_domain

# reject anything that has a bad domain or network address
smtpd_helo_restrictions = permit_mynetworks, reject_invalid_helo_hostname

# reject anything for mail forwording and non_destinations
smtp_recipient_restrictions = permit_mynetworks, reject_unauth_destination

:wq

postmap /etc/postfix/transport

service postfix restart



##################################################
Lecture: Configure an IMAP/IMAPS Service
##################################################
#findout what group postfix runs as

cat /etc/group | grep mail
goups mail #this will also list what groups the user is assigned to

apt-get install dovecot-imapd dovecot-pop3d

vim /etc/dovecot/10-mail.conf
mail_location = mbox:~/mail:INBOX=/var/mail/%u
mail_privileged_group = mail

:wq

cd /etc/dovecot
vim dovecot.conf
protocols = imap pop3 imaps pop3s

:wq

cd /etc/pki/dokecot/dovecot-openssl.cnf #this is where the ssl cert is located on rhel

vim /etc/dovecot/conf.d/10-ssl.conf
#ssl_cert = </etc/dovecot/dovecot.pem
#ssl_key = </etc/dovecot/private/dovecot.pem

service dovecot restart

ss -a | grep dove
or
netstat -nptlu | grep dove

##################################################
Lecture: Verify Email Configuration
##################################################
apt-get install mutt #mutt is used for reading emails from a linux server

mutt -s "This is my test email to a user" user@localhost < /dev/null

ll /home/user #there will now be a mail directory

exit #exit root

mutt #this will display the emails for the user user

echo "test" > test.txt

mutt -s "Test attachment"  user@localhost -a /root/test.txt < /dev/null

exit

mutt

#send an email using telnet
telnet localhost smtp
HELO <host_name>
mail from joe@gmail.com
rcpt to: user@localhost
data
this is a message for user thanks
.
quit

mutt


##################################################
Lecture: Configure SSH-Based Remote Access Using Public/Private Key Pairs
##################################################
ssh-keygen
#the public key you provide someone else, the private key is how the public key authenticates
#the random atr image can also be used to authenticate

ssh-copy-id <remote_ip>

#now test if you can login
ssh <remote_ip>

#your key will now be in the ~/.ssh/authorized_keys

#to set up an account so that your key will login as a different user on a remote machine
ssh-keygen
ssh-copy-id <remote_user>@<remote_ip>

#when you ssh to the server
ssh <remote_user>@<remote_ip>


##################################################
Lecture: Configure HTTP Proxy Server
##################################################
#configuration of squid proxy server

yum install squid squidGuard
#apt-get install squid squid-guard

vim /etc/squid.conf
#to remove comments
grep -Eiv '(^#|^$)' /etc/squid/squid.conf > /etc/squid/squid.edit

#default port for squid is 3128 for proxy connections

acl localhost src 127.0.0.1/32 ::1

:wq

chkconfig squid.conf
service squid start


##################################################
Lecture: Create HTTP Proxy Server Blacklist
##################################################
service squid start

#squid guard it a way of blacklisting

#download a blacklist file from the internet
cd /var/lib/squidGuard/
mkdir blacklists
cd blacklists
cp -a /root/Download/BL/violence . #but we arent we are going to setup a test file
vim testdomains
www.cnn.com
cnn.com
www.news.com
news.com

:wq

cd ..

chown -R squid:squid blacklists/
ll

ll blacklists

squidGuard -C all &  #the & runs it in the background
#testdomains.db will be created
chown -R squid:squid blacklists/

cd /etc/squid
vim squidGuard.conf


##################################################
Lecture: Restrict Access to the HTTP Proxy Server
##################################################
cd /etc/squid
vim squid
#the localnet src says that anything local will have access
#open browser -> manually configure proxy settings ->
#in the acl list
acl noOSX src 192.168.1.75 #customer network to exclude

#find this directive and add "!noOSX"
http_access allow localnet !noOSX

service squid restart

#you will now get a access denied

##################################################
Lecture: Configure an HTTP Client to Automatically Use a Proxy Server
##################################################
#if you are using a proxy server when you make a request it will look like the proxy is the device making the request
browser -> network -> manual proxy configuration -> enter ip address port 3128, use for all 3 protocals

#what it loks like on the logs
cat /var/log/squid/access.log

server squid stop
#squid takes a while to stop because its flushing its caches


##################################################
Lecture: Configure an HTTP Server - RHEL/CentOS
##################################################
yum install httpd

systemctl enable httpd

systemctl start httpd
systemctl status httpd

telnet localhost 80

yum install lynx
lynx http://localhost

cd /etc/httpd
cd conf.d
cd ../conf #main httpd configuration
#you wont see a seperate v host dir, if you want a seperate v host dir
vim httpd. conf
#go to the bottom and add
IncludeOptional vhost.d/*.conf  #this tells httpd to include anything in this diretory

mkdir vhost.d

systemctl restart httpd

systemctl status httpd.service


##################################################
Lecture: Configure an HTTP Server - Debian/Ubuntu
##################################################
apt-get install apache2

telnet localhost 80

chkconfig apache2 on
or
systemctl apache2 on

service apache2 restart

cd /etc/apache2
#any vhosts configurations are already externalized in the:
sites-available
and
sites-enabled

#how do we turn on or off a site
vim apache2.conf


# enable site
sudo a2ensite

# disable site
sudo a2dissite

# enable an apache2 module
sudo a2enmod

# e.g. a2enmod php4 will create the correct symlinks in mods-enabled to allow the module to be used. In this example it will link both php4.conf and php4.load for the user

# disable an apache2 module
sudo a2dismod

# force reload the server:
sudo  /etc/init.d/apache2 force-reload

apt-get install lynx

lynx http://localhost


##################################################
Lecture: Configure HTTP Server Logs
##################################################
the access log can be customized any way that you want

cat /etc/https/logs/access_log


##################################################
Lecture: Configure SSL with HTTP Server - Certificate Creation and Installation
##################################################
#2 types of certificates
# a self signed cert

#a certificate in general is something is provided and encrypts the traffic and secures it between the server and the user making the request
#a self-signed certificate is an identity certificate that is signed by the same entity whose identity it certifies.

yum install mod_ssl

cd /etc/http
mkdir ssl-certs

#this is the command that we need to generate the keys for signing the self signed cert
openssl req -X509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/httpd/ssl-certs/apache.key -out /etc/httpd/ssl-certs/apache.crt #the nodes is actually "no des", thats means they key doesnt have to be encryped its going to remain on this server
#fill out information that it asks you

ll  #we can now see that we have both a key and a certificate file

#now that we have a key and cert signed by us we need to configure apache


##################################################
Lecture: Configure SSL with HTTP Server - Server Setup
##################################################
cd /etc/httpd

#we need to add a named virtual host and the port

cd ..
cd vhost.d
vim myserver.com.conf
NameVirtualHost *:80
NameVirtualHost *:443
<VirtualHost *:80>
        ServerAlias tcox2
        DocumentRoot /var/www/html
        ServerName tcox2.mylabserver.com
</VirtualHost>

<VirtualHost *:443>
        ServerAlias tcox
        DocumentRoot /var/www/html
        ServerName tcox2.mylabserver.com

        SSLEngine on
        SSLCertificateFile /etc/https/ssl-certs/apache.crt
        SSLCertificateKeyFile /etc/httpd/ssl-certs/apache.key
</VirtualHost>

:wq

cat ../conf/httpd.conf | grep vhost #this is to verify that you where you have setup your vhost at

systemctl restart httpd

telnet localhost 80
helo

telnet localhost 443

#now open a browser
#you will get a warning because its a selfsigned cert


##################################################
Lecture: Set Up Name Based Virtual Web Hosts - RHEL/CentOS
##################################################
yum install httpd

systemctl enable httpd

systemctl start httpd

cd /etc/httpd
cd conf
vim httpd.conf
#go to the bottom and add
IncludeOptional vhost.d/*.conf  #this tells httpd to include anything in this diretory

:wq

cd ..
mkdir vhost.d
cd vhost.d
mkdir tcox4
cd tcox4

vim index.html
<HTML>

<HEAD><>/HEAD>

<BODY>

<H2>TCOX4.MYLABSERVER.COM</H2>

</BODY>

</HTML>

:wq

cd /etc/httpd/vhost.d
vim tcox4.mylabserver.com_http.conf
<VirtualHost *:80>
        ServerName tcox4.mylabserver.com
        ServerAlias tcox4

        DocumentRoot /var/www/tcox4
        ErrorLog /var/www/tcox4/error.log
        CustomLog /var/www/tcox4/custom.log combined
</VirtualHost>

:wq

systemctl stop httpd

systemctl start httpd

#use systemctl status httpd to trouble shoot


##################################################
Lecture: Set Up Name Based Virtual Web Hosts with SSL - RHEL/CentOS
##################################################
cd /etc/httpd
yum install mod_ssl

openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/httpd/ssl/apache.key -out /etc/httpd/ssl/apache.crt

cd ssl

cd ..
cd vhost.d
cp tcox4.mylabserver.com_http.conf tcox4.mylabserver.com_https.conf
vim tcox4.mylabserver.com_https.conf
<VirtualHost *:443>
        SSLEngin On
        SSLCertificateFile /etc/httpd/ssl/apache.crt
        SSLCerttificateKeyFile /etc/httpd/ssl/apache.key

        ServerName tcox4.mylabserver.com
        ServerAlias tcox4

        DocumentRoot /var/www/tcox4
        ErrorLog /var/www/tcox4/error.log
        CustomLog /var/www/tcox4/custom.log combined
</VirtualHost>

:wq

systemctl stop httpd
systemctl start httpd

ps aux | grep httpd


##################################################
Lecture: Set Up Name Based Virtual Web Hosts - Debian/Ubuntu
##################################################
apt-get install apache2

cd /var/www/html
#thats where the default index.html page is located
ll
cd ..
mkdir txco5
cd tcox5
vim index.html

<HTML>

<HEAD></HEAD>

<BODY>

<H2>TCOX5.MYLABSERVER.COM</H2>

</BODY>

</HTML>

:wq

cd /etc/apache2
cat apache2.conf

cd sites-available
cp 000-default.conf tcox5.mylabserver.com_http.conf

vim tcox5.mylabserver.com_http.conf
ServerName tcox5.mylabserver.com
ServerAlias tcox5

DocumentRoot /var/www/tcox5

:wq

#enables the site
a2ensite tcox5.mylabserver.com_http.conf

#Now look in sites enabled
ll /etc/apache2/sites-enabled

service apache2 restart

#to disable a site
a2dissite


##################################################
Lecture: Set Up Name Based Virtual Web Hosts with SSL - Debian/Ubuntu
##################################################
cd /etc/apache2
cd mods-available
ll ssl*

ll ../modes-enabled/ssl*
#we can see that we need to enable the mod

a2enmod ssl
ll ../modes-enabled/ssl*

service apache2 restart

cd sites-available

mkdir /etc/apache2/ssl

openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt

cd sites-available

cp default-ssl.conf tcox5.mylabserver.com_https.conf

vim tcox5.mylabserver.com_https.conf
ServerAdmin #change this

DocumentRoot /var/www/tcox5
ServerName tcox5.mylabserver.com
ServerAlias tcox5

SSLEngin on

SSLCertificateFile /etc/apache2/ssl/apache.crt
SSLCertificateKeyFile /etc/apache2/ssl/apache.key

:wq

a2ensite tcox5.mylabserver.com_https.conf

service apache2 restart


##################################################
Lecture: Deploy a Basic Web Application/Restrict Access to a Web Page
##################################################
#we can block access with both the apache configuration and the vhost level

cd /etc/httpd/conf
vim httpd.conf
#under Require all granted
#</Directory>

<Directory //var/www/tcox4/test/>
      Order allow,deny
      Allow from 52.2.215.84
      Allow from 172.31.16.59
      Allow 172.31.16.59
      Allow from 127
</Directory>

:wq

systemctl restart httpd

#Delete above from the stanza from the httpd.conf becayse we are going to restrict access from the vhost

cd ../vhost.d
vim tcox4.mylabserver.com_http.conf
#after DocumentRoot
<Directory /var/www/tcox4/test/>
          Order allow,deny
          Allow from 52.2.215.84
          Allow from 172.31.16.59
          Allow 172.31.16.59
          Allow from 127
</Directory>

:wq

systemctl restart httpd


##################################################
Exercise: Provide/Configure Network Shares via NFS: Server Setup
##################################################
1. Install the NFS server service. Once installed, query the status of the service, enable it for automatic start, start it and verify it is running.
[root@tcox4 ~]# yum install nfs-utils
Loaded plugins: fastestmirror
Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast
base                                                     | 3.6 kB     00:00
extras                                                   | 3.4 kB     00:00
updates                                                  | 3.4 kB     00:00
(1/2): extras/7/x86_64/primary_db                          |  74 kB   00:00
(2/2): updates/7/x86_64/primary_db                         | 3.3 MB   00:01
Determining fastest mirrors
* base: mirrors.advancedhosters.com
* extras: mirror.es.its.nyu.edu
* updates: mirror.us.leaseweb.net
Package 1:nfs-utils-1.3.0-0.8.el7.x86_64 already installed and latest version
Nothing to do
[root@tcox4 ~]# systemctl status nfs-server
nfs-server.service - NFS server and services
   Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; disabled)
   Active: inactive (dead)
[root@tcox4 ~]# systemctl enable nfs-server
ln -s '/usr/lib/systemd/system/nfs-server.service' '/etc/systemd/system/multi-user.target.wants/nfs-server.service'
[root@tcox4 ~]# systemctl start nfs-server
[root@tcox4 ~]# systemctl status nfs-server
nfs-server.service - NFS server and services
   Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; enabled)
   Active: active (exited) since Tue 2015-09-08 21:03:07 UTC; 3s ago
  Process: 1760 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)
  Process: 1759 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)
Main PID: 1760 (code=exited, status=0/SUCCESS)
   CGroup: /system.slice/nfs-server.service
Sep 08 21:03:07 tcox4.mylabserver.com systemd[1]: Starting NFS server and ser...
Sep 08 21:03:07 tcox4.mylabserver.com systemd[1]: Started NFS server and serv...
Hint: Some lines were ellipsized, use -l to show in full
2. Create the NFS common file in the '/etc/default' directory. Add the setting that indicates that IDMAPD is needed for NFS file sharing. Edit the IDMAP configuration file, add the domain of the server (provided on the lab server page).
[root@tcox4 ~]# cd /etc/default/
[root@tcox4 default]# ll
total 12
-rw-r--r--. 1 root root  354 Sep 29  2014 grub
-rw-r--r--. 1 root root 1756 Mar  5  2015 nss
-rw-r--r--. 1 root root  119 Mar  6  2015 useradd
[root@tcox4 default]# vim nfs-common
NEED_IDMAPD=YES
[root@tcox4 default]# cd /etc/
[root@tcox4 etc]# vim idmapd.conf
DOMAIN = SERVER1.mylabserver.com (Again, note your lab server name will be different)
3. Create a directory in the '/mnt' directory called 'share'. In this directory, create a file with some text called 'shared.txt'.
[root@tcox4 etc]# mkdir /mnt/share
[root@tcox4 etc]# chmod 777 /mnt/share
[root@tcox4 etc]# echo "This is a test file" >> /mnt/share/shared.txt
4. Add this directory to the 'exports' file for NFS. Export the file system ONLY to the IP address of the client machine, no other special options are required; limit the mount to that second server's IP only.
[root@tcox4 etc]# vim /etc/exports
/mnt/share 172.31.117.2
5. Restart the NFS server. Run the appropriate command to show the exported mounts on this localhost.
[root@tcox4 etc]# systemctl restart nfs-server
[root@tcox4 etc]# systemctl status nfs-server
nfs-server.service - NFS server and services
   Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; enabled)
   Active: active (exited) since Tue 2015-09-08 21:12:37 UTC; 2s ago
  Process: 1837 ExecStopPost=/usr/sbin/exportfs -f (code=exited, status=0/SUCCESS)
  Process: 1834 ExecStopPost=/usr/sbin/exportfs -au (code=exited, status=0/SUCCESS)
  Process: 1833 ExecStop=/usr/sbin/rpc.nfsd 0 (code=exited, status=0/SUCCESS)
  Process: 1880 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)
  Process: 1879 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)
Main PID: 1880 (code=exited, status=0/SUCCESS)
   CGroup: /system.slice/nfs-server.service

Sep 08 21:12:36 tcox4.mylabserver.com systemd[1]: Starting NFS server and services...
Sep 08 21:12:36 tcox4.mylabserver.com exportfs[1879]: exportfs: No options for /mnt/share 172.31.117.2: suggest 172.31.117.2(sync) to avoid warning
Sep 08 21:12:37 tcox4.mylabserver.com systemd[1]: Started NFS server and services.
[root@tcox4 etc]# showmount -e localhost
Export list for localhost:
/mnt/share 172.31.117.2



##################################################
Exercise: Provide/Configure Network Shares via NFS: Client Setup
##################################################
1. On the SERVER machine (from our previous exercise "Server Setup"), obtain the IP address or name of the Linux Academy lab server the exports are configured on.
[root@tcox4 ~]# ifconfig
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 9001
        inet 172.31.24.77  netmask 255.255.240.0  broadcast 172.31.31.255
        inet6 fe80::cd7:93ff:fec5:fc6f  prefixlen 64  scopeid 0x20
        ether 0e:d7:93:c5:fc:6f  txqueuelen 1000  (Ethernet)
        RX packets 6917  bytes 4045970 (3.8 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 3712  bytes 401716 (392.3 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
2. On the CLIENT machine (our second Linux Academy lab server), run the appropriate command using the IP or name of the SERVER machine to determine what mounts are available for our use.
[user@tcox5 ~]$ showmount -e 172.31.24.77
Export list for 172.31.24.77:
/mnt/share 172.31.117.2
3. Create a directory under '/mnt' called 'share'. Make sure it has 'rwx' permissions.
[root@tcox5 ~]# mkdir share
[root@tcox5 ~]# chmod 777 share -R
4. At the command line, execute a mount command, with the appropriate options and structure, to mount the SERVER exported share in the directory created in Step 3 above. Verify that the mount succeeds by listing the directory and the contents of the test file created in the previous exercise.
[root@tcox5 ~]# mount -t nfs 172.31.24.77://mnt/share share
[root@tcox5 ~]# df -h
Filesystem               Size  Used Avail Use% Mounted on
/dev/xvda1                20G  4.6G   16G  23% /
devtmpfs                 477M     0  477M   0% /dev
tmpfs                    497M   84K  496M   1% /dev/shm
tmpfs                    497M   13M  484M   3% /run
tmpfs                    497M     0  497M   0% /sys/fs/cgroup
172.31.24.77:/mnt/share   20G  4.6G   16G  23% /root/share
[root@tcox5 ~]# ls -al /root/share
total 8
drwxrwxrwx. 2 root root   23 Sep  8 21:10 .
dr-xr-x---. 5 root root 4096 Sep  8 21:15 ..
-rw-r--r--. 1 root root   20 Sep  8 21:10 shared.txt
[root@tcox5 ~]# cat /root/share/shared.txt
This is a test file
5. Create the appropriate entry in the 'fstab' file on the CLIENT system to remount that filesystem's exported shared from SERVER on reboot. Display the result.
[root@tcox5 ~]# vim /etc/fstab
[root@tcox5 ~]# cat /etc/fstab
#
# /etc/fstab
# Created by anaconda on Mon Sep 29 21:48:54 2014
#
# Accessible filesystems, by reference, are maintained under '/dev/disk'
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
UUID=0f790447-ebef-4ca0-b229-d0aa1985d57f /                       xfs     defaults        1 1
/root/swap swap swap sw 0 0
172.31.24.77://mnt/share /mnt/share nfs   defaults  0 0
[root@tcox5 ~]# reboot
(AFTER REBOOT)
[root@tcox5 ~]# df -h
Filesystem               Size  Used Avail Use% Mounted on
/dev/xvda1                20G  4.6G   16G  23% /
devtmpfs                 477M     0  477M   0% /dev
tmpfs                    497M   84K  496M   1% /dev/shm
tmpfs                    497M   13M  484M   3% /run
tmpfs                    497M     0  497M   0% /sys/fs/cgroup
172.31.24.77:/mnt/share   20G  4.6G   16G  23% /root/share



##################################################
Exercise: Install and Configure SMTP Service
##################################################
1. Install the postfix SMTP service.
[root@tcox5 ~]# yum install postfix
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
* base: mirrors.advancedhosters.com
* extras: mirror.es.its.nyu.edu
* updates: mirror.es.its.nyu.edu
Package 2:postfix-2.10.1-6.el7.x86_64 already installed and latest version
Nothing to do
2. Add the name of the mail server (the lab instance) to the main Postfix configuration file and then save and display the setting.
[root@tcox5 ~]# cd /etc/postfix
[root@tcox5 postfix]# ll
total 164
-rw-r--r--. 1 root root 20876 Jun 10  2014 access
-rw-r--r--. 1 root root    32 Sep 11 18:22 aliases
-rw-r--r--. 1 root root 12288 Sep 11 18:22 aliases.db
-rw-r--r--. 1 root root 11681 Jun 10  2014 canonical
-rw-r--r--. 1 root root  9904 Jun 10  2014 generic
-rw-r--r--. 1 root root 21545 Jun 10  2014 header_checks
-rw-r--r--. 1 root root 27176 Jun 10  2014 main.cf
-rw-r--r--. 1 root root  6105 Jun 10  2014 master.cf
-rw-r--r--. 1 root root  6816 Jun 10  2014 relocated
-rw-r--r--. 1 root root 12549 Jun 10  2014 transport
-rw-r--r--. 1 root root 12494 Jun 10  2014 virtual
[root@tcox5 postfix]# vim main.cf
[root@tcox5 postfix]# cat main.cf | grep myorigin
# The myorigin parameter specifies the domain that locally-posted
# myorigin also specifies the default domain name that is appended
#myorigin = $myhostname
#myorigin = $mydomain
myorigin = tcox5.mylabserver.com
3. In the main configuration file, add the following destinations for your mail service in the appropriate location:
  - host.mylabserver.com (note - replace 'host' with your lab server hostname)
  - localhost
  - host (note - replace 'host' with your lab server hostname)
  - localhost.localdomain
  - 127.0.0.1
[root@tcox5 postfix]# vim main.cf
[root@tcox5 postfix]# cat main.cf | grep mydestination
# The mydestination parameter specifies the list of domains that this
#mydestination = $myhostname, localhost.$mydomain, localhost
#mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain
#mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain,
mydestination = tcox5.mylabserver.com, tcox5, localhost.localdomain, localhost, 127.0.0.1
4. In the 'transport' configuration file, change the 'local' configuration values to be appropriate to the current lab server instance you are running.
[root@tcox5 postfix]# vim transport
[root@tcox5 postfix]# tail transport
# AUTHOR(S)
#        Wietse Venema
#        IBM T.J. Watson Research
#        P.O. Box 704
#        Yorktown Heights, NY 10598, USA
#
#                                                                   TRANSPORT(5)
#
tcox5.mylabserver.com   local:
.tcox5.mylabserver.com  local:
5. Run the command to process the configuration file and transport file changes. Restart the postfix service.
[root@tcox5 postfix]# postalias /etc/aliases
[root@tcox5 postfix]# ll
total 164
-rw-r--r--. 1 root root 20876 Jun 10  2014 access
-rw-r--r--. 1 root root    32 Sep 11 18:22 aliases
-rw-r--r--. 1 root root 12288 Sep 11 18:43 aliases.db
-rw-r--r--. 1 root root 11681 Jun 10  2014 canonical
-rw-r--r--. 1 root root  9904 Jun 10  2014 generic
-rw-r--r--. 1 root root 21545 Jun 10  2014 header_checks
-rw-r--r--. 1 root root 27300 Sep 11 18:42 main.cf
-rw-r--r--. 1 root root  6105 Jun 10  2014 master.cf
-rw-r--r--. 1 root root  6816 Jun 10  2014 relocated
-rw-r--r--. 1 root root 12610 Sep 11 18:39 transport
-rw-r--r--. 1 root root 12494 Jun 10  2014 virtual
[root@tcox5 postfix]# systemctl restart postfix
[root@tcox5 postfix]# systemctl status postfix
postfix.service - Postfix Mail Transport Agent
   Loaded: loaded (/usr/lib/systemd/system/postfix.service; enabled)
   Active: active (running) since Fri 2015-09-11 18:44:16 UTC; 17s ago
  Process: 1840 ExecStop=/usr/sbin/postfix stop (code=exited, status=0/SUCCESS)
  Process: 1853 ExecStart=/usr/sbin/postfix start (code=exited, status=0/SUCCESS)
  Process: 1851 ExecStartPre=/usr/libexec/postfix/chroot-update (code=exited, status=0/SUCCESS)
  Process: 1849 ExecStartPre=/usr/libexec/postfix/aliasesdb (code=exited, status=0/SUCCESS)
Main PID: 1925 (master)
   CGroup: /system.slice/postfix.service
           ├─1925 /usr/libexec/postfix/master -w
           ├─1926 pickup -l -t unix -u
           └─1927 qmgr -l -t unix -u
Sep 11 18:44:15 tcox5.mylabserver.com systemd[1]: Starting Postfix Mail Transport Agent...
Sep 11 18:44:16 tcox5.mylabserver.com postfix/master[1925]: daemon started -- version 2.10.1, configuration /etc/postfix
Sep 11 18:44:16 tcox5.mylabserver.com systemd[1]: Started Postfix Mail Transport Agent.
6. Install the mutt command line mail client. Start it up, creating the mailbox as needed. Run the command as the user user and again, create the mailbox needed. Finally, use the mutt command line to send a message to the root user and then display it within that account.
[root@tcox5 postfix]# yum install mutt
Loaded plugins: fastestmirror
Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast
base                                                                                                                                                                                      | 3.6 kB  00:00:00
extras                                                                                                                                                                                    | 3.4 kB  00:00:00
updates                                                                                                                                                                                   | 3.4 kB  00:00:00
(1/2): extras/7/x86_64/primary_db                                                                                                                                                         |  74 kB  00:00:00
(2/2): updates/7/x86_64/primary_db                                                                                                                                                        | 3.3 MB  00:00:00
Determining fastest mirrors
* base: mirrors.advancedhosters.com
* extras: mirror.es.its.nyu.edu
* updates: mirror.es.its.nyu.edu
Resolving Dependencies
--> Running transaction check
...
1. Run 'mutt' as root user, answer 'yes' to creating the mailbox
[root@tcox5 postfix]# mutt -s "Testing..." user@tcox5.mylabserver.com
[root@tcox5 postfix]# su - user
Last login: Fri Sep 11 18:21:52 UTC 2015 from 216.46.60.98 on pts/0
[user@tcox5 ~]$ mutt
From root@tcox5.mylabserver.com  Fri Sep 11 18:47:18 2015
Return-Path: <root@tcox5.mylabserver.com>
X-Original-To: user@tcox5.mylabserver.com
Delivered-To: user@tcox5.mylabserver.com
Received: by tcox5.mylabserver.com (Postfix, from userid 0)
        id 7A7F78880F4; Fri, 11 Sep 2015 18:47:18 +0000 (UTC)
Date: Fri, 11 Sep 2015 18:47:18 +0000
From: root <root@tcox5.mylabserver.com>
To: user@tcox5.mylabserver.com
Subject: Testing...
Message-ID: <20150911184718.GA1930@tcox5.mylabserver.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.5.21 (2010-09-15)
This is a test



##################################################
Exercise: Restrict Access to SMTP Server
##################################################
1. Using the SMTP postfix service configured in previous exercises, find the main configuration file. Add the appropriate configuration entry that disables mail clients that do not 'introduce' themselves with the standard 'HELO' or 'EHLO' announcement prior to sending mail.
[root@tcox5 postfix]# vim main.cf
[root@tcox5 postfix]# cat main.cf | grep smtpd_helo
smtpd_helo_required = yes
2. Restart Postfix to apply the change in Step 1. Using the telnet client, attempt to connect to the SMTP service to send an email without using 'HELO' or 'EHLO' to begin the email session.
[root@tcox5 postfix]# systemctl restart postfix
[root@tcox5 postfix]# telnet localhost 25
Trying ::1...
Connected to localhost.
Escape character is '^]'.
220 tcox5.mylabserver.com ESMTP Postfix
MAIL
503 5.5.1 Error: send HELO/EHLO first
MAIL
503 5.5.1 Error: send HELO/EHLO first
^]

telnet> quit
Connection closed.
3. In the main configuration file, define a variable called 'mynetworks'. Set a comma delimited string of values that contains the following:
  - localhost
  - localhost.localdomain
  - host (Note: your lab hostname will differ)
  - host.mylabserver.com (Note: your lab hostname will differ)
  - 127.0.0.1
[root@tcox5 postfix]# vim main.cf
[root@tcox5 postfix]# systemctl restart postfix
[root@tcox5 postfix]# cat * | grep mynetwork
# The mynetworks parameter specifies the list of "trusted" SMTP
# By default (mynetworks_style = subnet), Postfix "trusts" SMTP
# Specify "mynetworks_style = class" when Postfix should "trust" SMTP
# mynetworks list by hand, as described below.
# Specify "mynetworks_style = host" when Postfix should "trust"
#mynetworks_style = class
#mynetworks_style = subnet
#mynetworks_style = host
mynetworks = localhost, localhost.localdomain, tcox5, tcox5.mylabserver.com, 127.0.0.1
4. Stop the service and rerun the alias DB rebuild command (which verifies the configuration and regenerates the alias DB).
[root@tcox5 postfix]# systemctl stop postfix
[root@tcox5 postfix]# postalias aliases
5. Restrict the email server from accepting any emails for destinations that are NOT local (defined by the accounts/emails in the 'mynetworks' variable in Step 3). Restart the Postfix service to apply your changes.
[root@tcox5 postfix]# vim main.cf
[root@tcox5 postfix]# cat main.cf | grep smtpd_recipient_restrictions
smtpd_recipient_restrictions = permit_mynetworks, reject_unauth_destination
[root@tcox5 postfix]# systemctl restart postfix




##################################################
Exercise: Install and Configure SSL for Apache Web Server - Create Self Signed Certificate
##################################################
1. Install the appropriate package for generating SSL certificate keys and certificates on your distribution.
[root@linuxacademy ~]# yum install mod_ssl
Package installation output here
2. Create a directory within the Apache directory tree for your certificates and keys to reside.
[root@linuxacademy ~]# mkdir /etc/httpd/ssl-certs
3. Using the appropriate OpenSSL command, generate a key ONLY for a site called 'www.mydomain.com' that:
  - expires in two years
  - uses RSA 2048 bit key
  - has the typical x509 type
  - uses the above domain
  - has the administrative contact of 'webmin@mydomain.com'
  - names the key the domain name and .key
  - outputs to the directory created in Step 2
[root@linuxacademy ~]# openssl req -x509 -nodes -days 730 -newkey rsa:2048 -keyout /etc/httpd/ssl-certs/www.mydomain.com.key
Generating a 2048 bit RSA private key
...........+++
................+++
writing new private key to '/etc/httpd/ssl-certs/www.mydomain.com.key'
-----
You are about to be asked to enter information that will be incorporated}
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
State or Province Name (full name) []:NY
Locality Name (eg, city) [Default City]:New York
Organization Name (eg, company) [Default Company Ltd]:www.mydomain.com
Organizational Unit Name (eg, section) []:mydomain
Common Name (eg, your name or your server's hostname) []:www.mydomain.com
Email Address []:webmin@mydomain.com
4.  Using the appropriate OpenSSL command, generate a key AND certificate for a site called www.testdomain.com" that:
  - expires in two years
  - uses RSA 2048 bit key
  - has the typical x509 type
  - uses the above domain
  - has the administrative contact of 'webmin@testdomain.com'
  - outputs to the directory created in Step 2
[root@linuxacademy ~]# openssl req -x509 -nodes -days 730 -newkey rsa:2048 -keyout /etc/httpd/ssl-certs/www.testdomain.com.key -out /etc/httpd/ssl-certs/www.testdomain.com.crt
Generating a 2048 bit RSA private key
...........................................+++
................+++
writing new private key to '/etc/httpd/ssl-certs/www.testdomain.com.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:US
State or Province Name (full name) []:NY
Locality Name (eg, city) [Default City]:New York
Organization Name (eg, company) [Default Company Ltd]:www.testdomain.com
Organizational Unit Name (eg, section) []:testdomain
Common Name (eg, your name or your server's hostname) []:www.testdomain.com
Email Address []:webmin@testdomain.com
5. Check the key files created in Steps 3 and 4 for validity. Verify that the certificate file was created in Step 4.
  - name the key and certificate the domain name and .key and .crt
[root@linuxacademy ssl-certs]# ll
total 20
-rw-r--r--. 1 root root 1456 Aug 25 23:35 apache.crt
-rw-r--r--. 1 root root 1704 Aug 25 23:35 apache.key
-rw-r--r--. 1 root root 1704 Aug 26 18:32 www.mydomain.com.key
-rw-r--r--. 1 root root 1480 Aug 26 18:33 www.testdomain.com.crt
-rw-r--r--. 1 root root 1704 Aug 26 18:33 www.testdomain.com.key
[root@linuxacademy ssl-certs]# cat www.mydomain.com.key
-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDji9FZdLuMiETS
+aCQzdpJnwAERjW/TBBvcFaezULpIzQRMfWaW+46y/Cvt92rTGb2zu4ca+TCNjJk
cT5/s5ooqb8iiBf3q+ttCV42QwOqh/u+lr1kp7ZSncqDBwiR+CTlTpT4sxpWoPBp
TN8dC/eU3QsNvfPY72zEIs1P9ffNPhdOpCSq4q2pafuRMWvS92D+RMsRm4Q9K34z
ykAZwf1Imq4NjBkofoGPxhOXIPJgiXUHz3wpD6roEWo02/Z2mOekNgn0z67EU5vb
YvaeZ/11meHBJnzYDHO0IdvB0ipv/D68G/fzK5FiyF8S5pzswmxaq78absXYIsjF
6W9b/bS/AgMBAAECggEAUmNAhKRId+SrDryFj4iJPdjNF78YHNB8ruy84DivvlwZ
sRQmuiIJCs7msajgIPLD4R8hhbbnGA6phkaee3xbF9gGNYmTLADaeBtJOlpfTHJ6
CxLnNjenQxiQx4pXZwqyyTf/pmCq66zP/0BvFERN+19hbjNVxDlEZ2u2bPpBI9Vl
qtlaIXS4ioFIFi6HJCTZ0l3+ZoBGhCVGQDl0ESbULwjZrwUFz0GjEs/BXGx++hxa
5qEUd5as1iL9jCu8hqzCs7eJSLKyWrPXDjnz0uJMKZJIza2U+KeKw5diwFe9xWNC
gk37RcHaaqPzITVtZx0bgxLpQ50aPot3px1W7UxSUQKBgQD1utM7WU9fKNT5rf2q
wP/4vHnTi6VlXIVukUM+Ah6YhoeKIOYtTdGqCd8wUY+JS3UwL/98A2YsT4M/C9dC
dJa1Vs3e5xapRp1eSq6iPHRsEqz9TiqCaBw4p1E2ryAFChbpO0A7ibUk4LjgtBGS
4WCbCqdSKkOG/nl6bN2AyKG09wKBgQDtDnAS/GFd5R8zlccAtEeAWGhRyQPuAEsn
K4MRNhWhFrtNsuaJD57H6wY0dAOUqUmuvjNqWkEiBZ426Dr+fLP0TnuyARbyCP04
diomb6xPONhu8P1aKTQbeIELLZ5em6TMYuo9goMZNG7z4H4090yZyELdm4H5xn5K
S76WvVs0eQKBgQDYmZ2oKskz8CILE7sN0KHQ9xHLzsQz3KIhHBpRhjzB5ZODxgwe
0wGFCL6bMMl9E+5wU164Saa+WDgwUpekFHDj12gQm1H2VDBS9TGKAA//U1b40PXX
jT2TEqkbsrJevs4DOB8eW/w4TX2pVBBJkDA/edyTKH3teFJL/7of0rn3cQKBgQCT
oi08Nb+xyVLwPnRMRPpOvUBixuzSmY40W83ptyQrScvmrOcULw009nLL0gC04eVI
lZ3Ru1nbBWKuUV0ERseP/BzfE/ylSeHh+v1vKJdIU1+/YAh40TZpcVf0jTmXNBmj
TGsTWaep19TNv176P5WOJIE4IHQHCY53WMreeBlICQKBgH5kDwZhCrN5EzkwkoL2
JuXNsjgOl9hoNYoz5OnDogrQ2tXQiXcfNM50F6PgBGlV6eYlkbPzCom2izBctWIL
aRD0f7aWp+N2XxoveOU5MmQ3bOX0WgVcPlFYkkTLnruoj4gMXbVYzYlVCoPTlQCq
6CF1cOIGJJ7K4th+j19dgMuR
-----END PRIVATE KEY-----
[root@linuxacademy ssl-certs]# cat www.testdomain.com.key
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC3ScJLRnoqZSp9
HMabsvX9qPjzp34Izt1f3pt1+y7fUJKQrzYmB+GzSL6LCNQs33U/7G7chM5tJK9i
Ccx5e/oo9bEPBdrQ6cADoLyb5ybLpJA04TQD8uGeYhsR7VfRQAQsgor2FU7J0pcS
eeO2AmZNmM86GVj3Ecrb7ToaQ8ht9sIiADCjRmGbszpg5fVqSfw0wdSBrtpVEPzw
vgkd68Jrsa343VoZ/fQ3bOOQVKgd5CLjG6COaf4RbLE0g9nSDrVwC8365s8JFrEg
F5bsw1r/kPzDxkFqgcqBO89iPANJlzJn9rbb/JuDo6bxpL93/LmuhgqF+2G+9DLY
L6j02hrTAgMBAAECggEAWJMdgPErIofHM7UPSbj/Zbkdren4X1tQ4f6a1DYx3Zt7
aM4zdceDS/fQlTIMDy9h4yVoIctQUrBSzSb9GIxQRTEOgrsKlsEPmPE5lIHtXqZF
Rji6wVnDrJ2uhUhUkvvDyJrBetCrRZ8ugLBE2fVo6QD6zBHpy2Rey09mL8En//NY
lr6H9hpGUhrMlzsEtd3Py/pPYrRTiLygsn2GNWZ5HRT/wbFMH2NblSBULYo/Nqt4
VOjT38Q05WQ0hRQL2LSKjQgH1dS6axt4PzgFpizYtXy6AH7nqhBOQugb1NaOrk/0
etLCfnfTelwtMQR0QaaucBHbD4t4WxK5Hd2/6uuqoQKBgQDr9ZL18uxa6AuPk82Y
OmybgTBiM+lDp6wB3OiKevcEAqPcoIcleCN3KTpSsFk0e6nyXsyC9aPgSUmiZOTQ
HZJCe4UwaE+HCuvWRTW5tcZa/eAfavT4vLfMB0bNIghIgTkl/PPnzJ2nmZ7PxtNx
gFqlB27Qs+JJq+zWncCfO3o3MQKBgQDG2vbUj9LGuI94BdmM+ae9sPC2BiAiMwPT
kPmMOZAhFZx2K45P2cCZOrAJmN8prprnYsuSqut4mUUxirVMpKoTeyMdE53yoOW5
rzknlfoXTrgm0hCY+gd0kZ8UVUeX/GjK6hE+IM23TCR7PI4G07p9rbE3TbmNc+mG
JHkYWV/5QwKBgQCU7x5hq4FQJ+MULwC4MzhWNwbpFUcI8w545ozIy7CakWgIXDKx
jdEk55rukmzb2ap9VyTTDGTxrpCRtglO6ztkRz7cPRrlbBlL18d/fqLC0Dfk3Mff
MI76cyVXWUHNMfN2bOEu0FI6dZZuI1tW6uNMAxMJHGGairAlDtGEMDCGIQKBgH6x
HrVKdIV7LJzRTUuN+5rVUmcF/A8N5ZAzO2plejg55pc7JM4m85gsVd+nb/bEcZid
zwlAsAkDzZvEvcF434rN1w89YlIkxHfK9WUNHmsfEiBZkY2FLp7L8EgqFRT2EWXG
PvoQOEBh2JRTfkFHP/e2Y8PSVzeR8+Qs9KHYv1a1AoGAXa+9WR9ScDNzPXkbt+RT
APVvqp4cqSbIjZRgcFbCtjtI7lswf3mee6JpQ79zyq8fGpYF+TmoQ1eo/sMem8RK
J1sc46PpnliUKoSXu9pNQIyYy1nt8qw4c6fHdyT3EBZzkNjX5sziIoHT/YvwMWIo
Wq5aIavUYmB98LqpVJdXrEk=
-----END PRIVATE KEY-----
[root@linuxacademy ssl-certs]# cat www.testdomain.com.crt
-----BEGIN CERTIFICATE-----
MIIEGTCCAwGgAwIBAgIJANuK6rSPZOS7MA0GCSqGSIb3DQEBCwUAMIGiMQswCQYD
VQQGEwJVUzELMAkGA1UECAwCTlkxETAPBgNVBAcMCE5ldyBZb3JrMRswGQYDVQQK
DBJ3d3cudGVzdGRvbWFpbi5jb20xEzARBgNVBAsMCnRlc3Rkb21haW4xGzAZBgNV
BAMMEnd3dy50ZXN0ZG9tYWluLmNvbTEkMCIGCSqGSIb3DQEJARYVd2VibWluQHRl
c3Rkb21haW4uY29tMB4XDTE1MDgyNjE4MzM0N1oXDTE3MDgyNTE4MzM0N1owgaIx
CzAJBgNVBAYTAlVTMQswCQYDVQQIDAJOWTERMA8GA1UEBwwITmV3IFlvcmsxGzAZ
BgNVBAoMEnd3dy50ZXN0ZG9tYWluLmNvbTETMBEGA1UECwwKdGVzdGRvbWFpbjEb
MBkGA1UEAwwSd3d3LnRlc3Rkb21haW4uY29tMSQwIgYJKoZIhvcNAQkBFhV3ZWJt
aW5AdGVzdGRvbWFpbi5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
AQC3ScJLRnoqZSp9HMabsvX9qPjzp34Izt1f3pt1+y7fUJKQrzYmB+GzSL6LCNQs
33U/7G7chM5tJK9iCcx5e/oo9bEPBdrQ6cADoLyb5ybLpJA04TQD8uGeYhsR7VfR
QAQsgor2FU7J0pcSeeO2AmZNmM86GVj3Ecrb7ToaQ8ht9sIiADCjRmGbszpg5fVq
Sfw0wdSBrtpVEPzwvgkd68Jrsa343VoZ/fQ3bOOQVKgd5CLjG6COaf4RbLE0g9nS
DrVwC8365s8JFrEgF5bsw1r/kPzDxkFqgcqBO89iPANJlzJn9rbb/JuDo6bxpL93
/LmuhgqF+2G+9DLYL6j02hrTAgMBAAGjUDBOMB0GA1UdDgQWBBSaiIVWlliuXL3H
chZokdjr0CGnoDAfBgNVHSMEGDAWgBSaiIVWlliuXL3HchZokdjr0CGnoDAMBgNV
HRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQByP63DkZI/Ha2pViTQ8lVglq6o
WMrttmTjFuEPLMdDeSyRdpMlLXsbOn1geUfpZLwXVkDxrN1ySww9+eueTbxycMNh
wwTmB9fFfEUf5M2zuHehsd6BTT7SpKCF11sY4UxId7z1JW5/4/K8B6E9n2Rr9tlO
m2uK4PSRC5fyuZKX59mDgm7goTh40FOd+yJsNhzOUW+Y6k/FsOPqAiNUAt3PSn9q
KwHxSgpnOfUtx3exR3popmY+8thKITaGZzXFsFnucPAdSrUzkncczG/463f68MLl
ckKE+MCO07/6vvPMAu3jCHz0lLlp84qrQN29HkQ1A82CRnfF03GH+GvNMOzU
-----END CERTIFICATE-----




##################################################
Exercise: Configuring SSH-Based Remote Access Using Public/Private Key Pairs
##################################################
1. Once you have started your Linux Academy lab servers and logged in with the user account and password provided, generate a public and private key pair on 'Server1'. Verify the key pair was created by changing to the appropriate directory and listing the files.
$user> ssh-keygen
$user> cd .ssh
$user> ls -al
total 24
drwx------   5 tcox  staff   170 Sep 27 21:37 .
drwxr-xr-x+ 47 tcox  staff  1598 Oct 18 12:44 ..
-rw-------   1 tcox  staff  1675 Dec 23  2015 id_rsa
-rw-r--r--   1 tcox  staff   410 Dec 23  2015 id_rsa.pub
-rw-r--r--   1 tcox  staff   764 Oct 16 13:01 known_hosts
2. Exchange the public key with 'Server2' and the user account on that server. Verify that the identity appearing in the appropriate key file matches the user and system name/IP of the originating 'Server1'.
$user> ssh-copy-id user@Server2
$user> cat .ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8/aA3J63987AcYMhBZHT3yrAQOBbDuGUM26UsvKibFbfFfkXykNFSUI+n5becwOohkmOpKQ6O5Ip68/TDYe0aETmidPk0tPs81ILMoYp2hJZYF+DZdlK4DzPiHZKU7UY2JCY
0Wu9IpngPqlHDAE9YJi87+hVIoZn0721jA7GXCW+hgEVILwonaHtIcWqAtAQACIjoOS1POESZqCbmrTnTzb4rz/n9uA+1Jygwdua/tcwbtKfNloZKtp0YuRhYQFFcUf/xlSBynzD3pmbliub2hyDy7G3CSliBdjQpEV1AXlr1D2
PvKgqeQEkqcjG1pkbaaXqOxNbyHuEsipMqpSIN user@Server1
3. Verify that you are able to log in to 'Server2' from 'Server1' with the user account without entering a password. Check the hostname file to be sure you are logged in to 'Server2'.
$user> ssh Server2
$user> cat /etc/hostname
Server2
4. Create a file on 'Server1' using any method you choose. Use secure copy to copy that file to 'Server2'. Confirm the copy succeeds without password entry.
$user> echo "testing" > test.txt
$user> scp test.txt user@Server2:/home/user
5. Using secure copy, copy the file from Step 4 back to 'Server1' from 'Server2', renaming it to something else during the copy process; verify that no password was required.
$user> scp user@Server2:/home/user/test.txt newxfr.txt


##################################################
Exercise: Install and Configure and Apache Web Server: RedHat/CentOS
##################################################
1. Using the appropriate package manager, install the latest repository available version of Apache web server.
[root@linuxacademy ~]# yum -y install httpd
Loaded plugins: fastestmirror
Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast
base                                                                                           | 3.6 kB  00:00:00
extras                                                                                         | 3.4 kB  00:00:00
updates                                                                                        | 3.4 kB  00:00:00
(1/2): extras/7/x86_64/primary_db                                                              |  74 kB  00:00:00
(2/2): updates/7/x86_64/primary_db                                                             | 3.3 MB  00:00:01
Determining fastest mirrors
* base: mirrors.advancedhosters.com
* extras: mirror.trouble-free.net
* updates: mirror.us.leaseweb.net
Resolving Dependencies
--> Running transaction check
---> Package httpd.x86_64 0:2.4.6-31.el7.centos will be installed
--> Processing Dependency: httpd-tools = 2.4.6-31.el7.centos for package: httpd-2.4.6-31.el7.centos.x86_64
--> Processing Dependency: /etc/mime.types for package: httpd-2.4.6-31.el7.centos.x86_64
--> Processing Dependency: libaprutil-1.so.0()(64bit) for package: httpd-2.4.6-31.el7.centos.x86_64
--> Processing Dependency: libapr-1.so.0()(64bit) for package: httpd-2.4.6-31.el7.centos.x86_64
--> Running transaction check
---> Package apr.x86_64 0:1.4.8-3.el7 will be installed
---> Package apr-util.x86_64 0:1.5.2-6.el7 will be installed
---> Package httpd-tools.x86_64 0:2.4.6-31.el7.centos will be installed
---> Package mailcap.noarch 0:2.1.41-2.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
======================================================================================================================
Package                     Arch                   Version                                Repository            Size
======================================================================================================================
Installing:
httpd                       x86_64                 2.4.6-31.el7.centos                    base                 2.7 M
Installing for dependencies:
apr                         x86_64                 1.4.8-3.el7                            base                 103 k
apr-util                    x86_64                 1.5.2-6.el7                            base                  92 k
httpd-tools                 x86_64                 2.4.6-31.el7.centos                    base                  79 k
mailcap                     noarch                 2.1.41-2.el7                           base                  31 k
Transaction Summary
======================================================================================================================
Install  1 Package (+4 Dependent packages)
Total download size: 3.0 M
Installed size: 10 M
Downloading packages:
(1/5): apr-1.4.8-3.el7.x86_64.rpm                                                              | 103 kB  00:00:00
(2/5): apr-util-1.5.2-6.el7.x86_64.rpm                                                         |  92 kB  00:00:00
(3/5): mailcap-2.1.41-2.el7.noarch.rpm                                                         |  31 kB  00:00:00
(4/5): httpd-tools-2.4.6-31.el7.centos.x86_64.rpm                                              |  79 kB  00:00:00
(5/5): httpd-2.4.6-31.el7.centos.x86_64.rpm                                                    | 2.7 MB  00:00:00
----------------------------------------------------------------------------------------------------------------------
Total                                                                                 5.7 MB/s | 3.0 MB  00:00:00
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Installing : apr-1.4.8-3.el7.x86_64                                                                             1/5
  Installing : apr-util-1.5.2-6.el7.x86_64                                                                        2/5
  Installing : httpd-tools-2.4.6-31.el7.centos.x86_64                                                             3/5
  Installing : mailcap-2.1.41-2.el7.noarch                                                                        4/5
warning: /etc/mailcap created as /etc/mailcap.rpmnew
warning: /etc/mime.types created as /etc/mime.types.rpmnew
  Installing : httpd-2.4.6-31.el7.centos.x86_64                                                                   5/5
  Verifying  : httpd-tools-2.4.6-31.el7.centos.x86_64                                                             1/5
  Verifying  : apr-1.4.8-3.el7.x86_64                                                                             2/5
  Verifying  : mailcap-2.1.41-2.el7.noarch                                                                        3/5
  Verifying  : httpd-2.4.6-31.el7.centos.x86_64                                                                   4/5
  Verifying  : apr-util-1.5.2-6.el7.x86_64                                                                        5/5
Installed:
  httpd.x86_64 0:2.4.6-31.el7.centos
Dependency Installed:
  apr.x86_64 0:1.4.8-3.el7           apr-util.x86_64 0:1.5.2-6.el7      httpd-tools.x86_64 0:2.4.6-31.el7.centos
  mailcap.noarch 0:2.1.41-2.el7
Complete!
2. Once installed, enable the Apache web service so that it starts automatically on boot.
[root@linuxacademy ~]# systemctl enable httpd
ln -s '/usr/lib/systemd/system/httpd.service' '/etc/systemd/system/multi-user.target.wants/httpd.service'
3. Using the appropriate service management command and syntax, start the Apache web server process. Verify the web server is listening on the default port; install other command line-based software if needed.
[root@linuxacademy ~]# systemctl enable httpd
ln -s '/usr/lib/systemd/system/httpd.service' '/etc/systemd/system/multi-user.target.wants/httpd.service'
[root@linuxacademy ~]# systemctl start httpd
[root@linuxacademy ~]# yum install -y telnet
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
* base: mirrors.advancedhosters.com
* extras: mirror.trouble-free.net
* updates: mirror.us.leaseweb.net
Resolving Dependencies
--> Running transaction check
---> Package telnet.x86_64 1:0.17-59.el7 will be installed
--> Finished Dependency Resolution

Dependencies Resolved

======================================================================================================================
Package                   Arch                      Version                            Repository               Size
======================================================================================================================
Installing:
telnet                    x86_64                    1:0.17-59.el7                      base                     63 k

Transaction Summary
======================================================================================================================
Install  1 Package

Total download size: 63 k
Installed size: 113 k
Downloading packages:
telnet-0.17-59.el7.x86_64.rpm                                                                  |  63 kB  00:00:00
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Installing : 1:telnet-0.17-59.el7.x86_64                                                                        1/1
  Verifying  : 1:telnet-0.17-59.el7.x86_64                                                                        1/1

Installed:
  telnet.x86_64 1:0.17-59.el7

Complete!
[root@linuxacademy ~]# telnet localhost 80
Trying ::1...
Connected to localhost.
Escape character is '^]'.
helo
501 Not Implemented
Not Implemented
helo to / not supported.
Connection closed by foreign host.
4. Edit the appropriate Apache web server configuration file. Specify the inclusion of a directory called 'vhost.d' that uses configuration files ending in ".conf" to be included in the web server configuration.
[root@linuxacademy /etc/httpd/conf]# vim httpd.conf
NOTE: Add the following line to the end of the file:
IncludeOptional vhost.d/*.conf
5. Create the new vhost directory indicated in Step 4; make sure it has matching permissions with other configuration directories in the appropriate Apache file structure.
[root@linuxacademy /etc/httpd/]# mkdir /etc/httpd/vhost.d && chmod 755 /etc/httpd/vhost.d
6. Restart the Apache web server and make sure the service restarts without error. Once again, verify the default port is listening.
[root@linuxacademy /etc/httpd/]# systemctl restart httpd
[root@linuxacademy /etc/httpd/]# telnet localhost 80
Trying ::1...
Connected to localhost.
Escape character is '^]'.
helo


501 Not Implemented

Not Implemented
helo to / not supported.

Connection closed by foreign host.




##################################################
Exercise: Install and Configure Apache Web Server: Debian/Ubuntu
##################################################
1. Using the appropriate package manager, install the Apache web server.
root@linuxacademy:~# apt-get install apache2
Reading package lists... Done
Building dependency tree
Reading state information... Done
Suggested packages:
  apache2-doc apache2-suexec-pristine apache2-suexec-custom apache2-utils
The following NEW packages will be installed:
  apache2
0 upgraded, 1 newly installed, 0 to remove and 4 not upgraded.
Need to get 0 B/87.6 kB of archives.
After this operation, 473 kB of additional disk space will be used.
Selecting previously unselected package apache2.
(Reading database ... 113119 files and directories currently installed.)
Preparing to unpack .../apache2_2.4.7-1ubuntu4.5_amd64.deb ...
Unpacking apache2 (2.4.7-1ubuntu4.5) ...
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
Processing triggers for ureadahead (0.100.0-16) ...
Processing triggers for ufw (0.34~rc-0ubuntu2) ...
Setting up apache2 (2.4.7-1ubuntu4.5) ...
Enabling module mpm_event.
Enabling module authz_core.
Enabling module authz_host.
Enabling module authn_core.
Enabling module auth_basic.
Enabling module access_compat.
Enabling module authn_file.
Enabling module authz_user.
Enabling module alias.
Enabling module dir.
Enabling module autoindex.
Enabling module env.
Enabling module mime.
Enabling module negotiation.
Enabling module setenvif.
Enabling module filter.
Enabling module deflate.
Enabling module status.
Enabling conf charset.
Enabling conf localized-error-pages.
Enabling conf other-vhosts-access-log.
Enabling conf security.
Enabling conf serve-cgi-bin.
Enabling site 000-default.
* Starting web server apache2
                                         *
Processing triggers for ureadahead (0.100.0-16) ...
Processing triggers for ufw (0.34~rc-0ubuntu2) ...
2. Start the Apache web server process. Verify the web server is listening on the default port; install other command line-based software if needed.
[root@linuxacademy ~]# service apache2 start|
root@tcox1:~# apt-get install telnet
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  telnet
0 upgraded, 1 newly installed, 0 to remove and 4 not upgraded.
Need to get 67.1 kB of archives.
After this operation, 167 kB of additional disk space will be used.
Get:1 http://us-east-1.ec2.archive.ubuntu.com/ubuntu/ trusty/main telnet amd64 0.17-36build2 [67.1 kB]
Fetched 67.1 kB in 0s (4,756 kB/s)
Selecting previously unselected package telnet.
(Reading database ... 113306 files and directories currently installed.)
Preparing to unpack .../telnet_0.17-36build2_amd64.deb ...
Unpacking telnet (0.17-36build2) ...
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
Setting up telnet (0.17-36build2) ...
update-alternatives: using /usr/bin/telnet.netkit to provide /usr/bin/telnet (telnet) in auto mode
[root@linuxacademy ~]# telnet localhost 80
Trying ::1...
Connected to localhost.
Escape character is '^]'.
helo
501 Not Implemented
Not Implemented
helo to / not supported.
Connection closed by foreign host.
3. Restart the Apache web server and make sure the service restarts without error. Once again, verify the default port is listening.
[root@linuxacademy /etc/httpd/]# service apache2 restart
[root@linuxacademy /etc/httpd/]# telnet localhost 80
Trying ::1...
Connected to localhost.
Escape character is '^]'.
helo
501 Not Implemented
Not Implemented
helo to / not supported.
Connection closed by foreign host.




##################################################
Exercise: Setting Up Name Based Virtual Web Hosts: Debian/Ubuntu HTTP
##################################################
1. Make sure that your system has Apache installed. Verify that the server is running, listening for HTTP connections on port 80.
root@tcox5:~# ps aux | grep http
root      1986  0.0  0.0  10460   932 pts/1    S+   17:08   0:00 grep --color=auto http
root@tcox5:~# ps aux | grep apache
root      1546  0.0  0.3  89172  4056 ?        Ss   17:05   0:00 /usr/sbin/apache2 -k start
www-data  1549  0.0  0.4 378328  4880 ?        Sl   17:05   0:00 /usr/sbin/apache2 -k start
www-data  1550  0.0  0.4 378328  4880 ?        Sl   17:05   0:00 /usr/sbin/apache2 -k start
root      1988  0.0  0.0  10460   932 pts/1    S+   17:08   0:00 grep --color=auto apache
root@tcox5:~# telnet localhost 80
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
helo
501 Not Implemented
helo to /index.html not supported.
Apache/2.4.7 (Ubuntu) Server at 127.0.0.1 Port 80
Connection closed by foreign host.
2. Move to the appropriate directory and list the available vhosts. Create a new vhost called 'XXX.mylabserver.com', where 'XXX' matches the name of your Linux Academy lab server, as displayed in your server tab. Add the .conf extension to the end of the file. As part of the name, differentiate the HTTP version of the file so that we can create a separate configuration for HTTPS in a later exercise.
root@tcox5:/etc/apache2# cd sites-available/
root@tcox5:/etc/apache2# cp 000-default.conf tcox5.mylabserver.com_http.conf
root@tcox5:/etc/apache2/sites-available# ll
total 32
drwxr-xr-x 2 root root 4096 Aug 29 16:52 ./
drwxr-xr-x 9 root root 4096 Aug 29 16:46 ../
-rw-r--r-- 1 root root 1332 Jan  7  2014 000-default.conf
-rw-r--r-- 1 root root 6437 Jan  7  2014 default-ssl.conf
-rw-r--r-- 1 root root 1312 Aug 29 16:31 tcox5.mylabserver.com_http.conf
-rw-r--r-- 1 root root 6473 Aug 29 16:52 tcox5.mylabserver.com_https.conf
3. Edit that configuration file so that it contains the appropriate sections and variables for the site path, error and access logs, the server name and any aliases. Display the contents once completed.
root@tcox5:/etc/apache2/sites-available# cat tcox5.mylabserver.com_https.conf
ServerAdmin webmaster@localhost

DocumentRoot /var/www/tcox5
ServerName tcox5.mylabserver.com
ServerAlias tcox5

ErrorLog ${APACHE_LOG_DIR}/error.log
CustomLog ${APACHE_LOG_DIR}/access.log combined
4. Create a directory to contain your custom vhost site files. Once created, add the following HTML code to a file in that directory called 'index.html':
  - XXX.MYLABSERVER.COM
  - Please note: replace 'XXX' above with the name of your Linux Academy Lab Server as indicated in the server tab of the site
root@tcox5:/etc/apache2/sites-available# mkdir /var/www/tcox5
root@tcox5:/etc/apache2/sites-available# echo "TCOX5.MYLABSERVER.COM" > /var/www/tcox5/index.html
5. Execute the appropriate command to enable that new VHOST configuration on the site. Restart the web server. Once restarted, browser (by NAME) to the site and verify that the file created in Step #4 is what appears.
root@tcox5:/etc/apache2/sites-available# sudo a2ensite tcox5.mylabserver.com_http.conf
root@tcox5:/etc/apache2/sites-available# sudo a2ensite tcox5.mylabserver.com_http.conf
Enabling site tcox5.mylabserver.com_http.
To activate the new configuration, you need to run:
  service apache2 reload
root@tcox5:/etc/apache2/sites-available# service apache2 reload
* Reloading web server apache2                                                                                                                               *
Note: Here you will have to open a browser and go to the site named in your vhost.



##################################################
Exercise: Setting Up Name Based Virtual Web Hosts: Debian/Ubuntu HTTPS
##################################################
1. Make sure that your system has Apache Web Server installed. Verify that the server is running, listening for HTTP connections on port 80. Enable the ssl module.
root@tcox5:~# ps aux | grep http
root      1986  0.0  0.0  10460   932 pts/1    S+   17:08   0:00 grep --color=auto http
root@tcox5:~# ps aux | grep apache
root      1546  0.0  0.3  89172  4056 ?        Ss   17:05   0:00 /usr/sbin/apache2 -k start
www-data  1549  0.0  0.4 378328  4880 ?        Sl   17:05   0:00 /usr/sbin/apache2 -k start
www-data  1550  0.0  0.4 378328  4880 ?        Sl   17:05   0:00 /usr/sbin/apache2 -k start
root      1988  0.0  0.0  10460   932 pts/1    S+   17:08   0:00 grep --color=auto apache
root@tcox5:~# telnet localhost 80
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
helo
501 Not Implemented
helo to /index.html not supported.
Apache/2.4.7 (Ubuntu) Server at 127.0.0.1 Port 80
Connection closed by foreign host.
root@tcox5:~# a2enmod ssl
Considering dependency setenvif for ssl:
Module setenvif already enabled
Considering dependency mime for ssl:
Module mime already enabled
Considering dependency socache_shmcb for ssl:
Enabling module socache_shmcb.
Enabling module ssl.
See /usr/share/doc/apache2/README.Debian.gz on how to configure SSL and create self-signed certificates.
To activate the new configuration, you need to run:

  service apache2 restart
root@tcox5:~# service apache2 restart
2. Move to the appropriate directory and list the available vhosts. Create a new vhost called 'XXX.mylabserver.com', where 'XXX' matches the name of your Linux Academy lab server, as display in your server tab. Add the .conf extension to the end of the file. As part of the name, differentiate the HTTPS version of the file so that we can create a separate configuration for HTTP in a later exercise.
root@tcox5:/etc/apache2# cd sites-available/
root@tcox5:/etc/apache2/sites-available# ll\
total 32
drwxr-xr-x 2 root root 4096 Aug 29 16:52 ./
drwxr-xr-x 9 root root 4096 Aug 29 16:46 ../
-rw-r--r-- 1 root root 1332 Jan  7  2014 000-default.conf
-rw-r--r-- 1 root root 6437 Jan  7  2014 default-ssl.conf
-rw-r--r-- 1 root root 1312 Aug 29 16:31 tcox5.mylabserver.com_http.conf
-rw-r--r-- 1 root root 6473 Aug 29 16:52 tcox5.mylabserver.com_https.conf
3. Edit the configuration file so that it contains the appropriate sections and variables for the site path, error and access logs, the necessary SSL extensions for our certificate, the server name and any aliases. Display the contents once completed.
root@tcox5:/etc/apache2/sites-available# cat tcox5.mylabserver.com_https.conf
(CONTENTS FOLLOW)
ServerAdmin webmaster@localhost

DocumentRoot /var/www/tcox5
ServerName tcox5.mylabserver.com
ServerAlias tcox5

ErrorLog ${APACHE_LOG_DIR}/error.log
CustomLog ${APACHE_LOG_DIR}/access.log combined

SSLEngine on

SSLCertificateFile /etc/apache2/ssl/apache.crt
SSLCertificateKeyFile /etc/apache2/ssl/apache.key

<FilesMatch "\.(cgi|shtml|phtml|php)$">
SSLOptions +StdEnvVars
SSLOptions +StdEnvVars

BrowserMatch "MSIE [2-6]" \
nokeepalive ssl-unclean-shutdown \
downgrade-1.0 force-response-1.0
# MSIE 7 and newer should be able to use keepalive
BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown
4. Create a directory to contain your custom vhost site files. Once created, add the following HTML code to a file in that directory called 'index.html':
  -XXX.MYLABSERVER.COM
  - Please note: Replace 'XXX' above with the name of your Linux Academy lab server, as indicated in the server tab of the site
  - Create a directory called ssl in your '/etc/apache2' directory. Create a self-signed certificate and key using the OpenSSL utility called apache.key and apache.crt.
root@tcox5:/etc/apache2/sites-available# mkdir /var/www/tcox5
root@tcox5:/etc/apache2/sites-available# echo "TCOX5.MYLABSERVER.COM" > /var/www/tcox5/index.html
root@tcox5:/etc/apache2/sites-available# mkdir /etc/apache2/ssl
root@tcox5:/etc/apache2/sites-available# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt
5. Execute the appropriate command to enable the new vhost configuration on the site. Restart the web server. Once restarted, browse, by NAME, to the site and verify that the file created in Step 4 is what appears.
root@tcox5:/etc/apache2/sites-available# sudo a2ensite tcox5.mylabserver.com_https.conf
root@tcox5:/etc/apache2/sites-available# sudo a2ensite tcox5.mylabserver.com_https.conf
Enabling site tcox5.mylabserver.com_https.
To activate the new configuration, you need to run:
  service apache2 reload
root@tcox5:/etc/apache2/sites-available# service apache2 reload
* Reloading web server apache2                                                                                                                               *
(NOTE) Here you will have to open a browser and go to the site named in your vhost.



##################################################
Exercise: Setting Up Name Based Virtual Web Hosts: Red Hat/CentOS HTTP
##################################################
1. Make sure that your system has Apache web server installed. Verify that the server is running, listening for HTTP connections on port 80.
[root@tcox4 httpd]# telnet localhost 80
Trying ::1...
Connected to localhost.
Escape character is '^]'.
helo
501 Not Implemented
helo to /index.html not supported.
Connection closed by foreign host.
2. Move to the appropriate directory and list the available vhosts. Create a new vhosts called 'XXX.mylabserver.com', where "XXX" matches the name of your Linux Academy lab server as display in your server tab. Add the '.conf' extension to the end of the file. As part of the name, differentiate the HTTP version of the file so that we can create a separate configuration for HTTPS in a later exercise.
[root@tcox4 httpd]# cd vhost.d
[root@tcox4 vhost.d]# ll
total 8
-rw-r--r--. 1 root root 118 Aug 29 17:22 tcox4.mylabserver.com_http.conf
-rw-r--r--. 1 root root 228 Aug 29 17:44 tcox4.mylabserver.com_https.conf
[root@tcox4 vhost.d]# cat tcox4.mylabserver.com_http.conf
3. Edit that configuration file so that it contains the appropriate sections and variables for the site path, error and access logs, the server name and any aliases. Display the contents once completed.
(NOTE: VirtualHost *:80 Definition)
ServerName tcox4.mylabserver.com
ServerAlias tcox4

DocumentRoot /var/www/tcox4
4. Create a directory to contain your custom vhost site files. Once created, add the following HTML code to a file in that directory called 'index.html'.
  -XXX.MYLABSERVER.COM
  - Please note: replace 'XXX' above with the name of your Linux Academy lab server as indicated in the server tab of the site
[root@tcox4 httpd]# mkdir /var/www/tcox5
[root@tcox4 httpd]# echo "XXX.MYLABSERVER.COM" >> /var/www/tcox5/index.html
5. Execute the appropriate command to enable that new vhost configuration on the site. Restart the web server. Once restarted, browser, by NAME, to the site and verify that the file created in Step 4 is what appears.
[root@tcox4 httpd]# systemctl restart httpd
(NOTE: You will have to open a web browser and navigate to the site by NAME to see the new index.html page we created)


##################################################
Exercise: Setting Up Name Based Virtual Web Hosts: Red Hat/CentOS HTTPS
##################################################
1. Make sure that your system has Apache installed. Verify that the server is running and listening for HTTP connections on port 80. Install the appropriate SSL utility/application.
[root@tcox4 httpd]# ps aux | grep http
root      6276  0.0  0.7 236484  7164 ?        Ss   16:02   0:00 /usr/sbin/httpd -DFOREGROUND
apache    6278  0.0  0.3 236616  3556 ?        S    16:02   0:00 /usr/sbin/httpd -DFOREGROUND
apache    6279  0.0  0.3 236616  3556 ?        S    16:02   0:00 /usr/sbin/httpd -DFOREGROUND
apache    6280  0.0  0.3 236616  3556 ?        S    16:02   0:00 /usr/sbin/httpd -DFOREGROUND
apache    6281  0.0  0.3 236616  3556 ?        S    16:02   0:00 /usr/sbin/httpd -DFOREGROUND
apache    6282  0.0  0.4 236616  4312 ?        S    16:02   0:00 /usr/sbin/httpd -DFOREGROUND
apache    7299  0.0  0.3 236616  3552 ?        S    16:34   0:00 /usr/sbin/httpd -DFOREGROUND
root     14519  0.0  0.0 112640   964 pts/0    R+   18:30   0:00 grep --color=auto http
[root@tcox4 httpd]# telnet localhost 80
Trying ::1...
Connected to localhost.
Escape character is '^]'.
helo
501 Not Implemented
helo to /index.html not supported.
Connection closed by foreign host.
[root@tcox4 httpd]# yum install mod_ssl
(Package installation details here...)
2. Move to the appropriate directory and list the available vhosts. Create a new vhosts called "XXX.mylabserver.com", where 'XXX' matches the name of your Linux Academy lab server, as display in your server tab. Add the .conf extension to the end of the file. As part of the name, differentiate the HTTPS version of the file so that we can create a separate configuration for HTTP in a later exercise.
[root@tcox4 httpd]# cd vhost.d
[root@tcox4 vhost.d]# ll
total 8
-rw-r--r--. 1 root root 118 Aug 29 17:22 tcox4.mylabserver.com_http.conf
-rw-r--r--. 1 root root 228 Aug 29 17:44 tcox4.mylabserver.com_https.conf
3. Edit that configuration file so that it contains the appropriate sections and variables for the site path and error and access logs, as well as the necessary SSL extensions for our certificate, the server name and any aliases. Display the contents once completed.
[root@tcox4 vhost.d]# cat tcox4.mylabserver.com_https.conf
(VirtualHost *:443 Config Here)
SSLEngine On
SSLCertificateFile /etc/httpd/ssl/apache.crt
SSLCertificateKeyFile /etc/httpd/ssl/apache.key

ServerName tcox4.mylabserver.com
ServerAlias tcox4

DocumentRoot /var/www/tcox4
4. Create a directory to contain your custom vhost site files. Once created, add the following HTML code to a file in that directory called 'index.html':
  - XXX.MYLABSERVER.COM
  - Replace 'xxx' above with the name of your Linux Academy Lab Server as indicated in the server tab of the site
  - Create a directory called 'ssl' in your /etc/apache2 directory. Create a self-signed certificate and key using the OpenSSL utility, called apache.key and apache.crt.
[root@tcox4 vhost.d]# mkdir /var/www/tcox4 && mkdir /etc/httpd/ssl
[root@tcox4 vhost.d]# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/httpd/ssl/apache.key -out /etc/httpd/ssl/apache.crt
[root@tcox4 vhost.d]# echo "XXX.MYLABSERVER.COM" >> /var/www/tcox4/index.html
5. Execute the appropriate command to enable the new vhost configuration on the site. Restart the web server. Once restarted, browse (by name) to the site and verify that the file created in Step 4 is what appears.
[root@tcox4 vhost.d]# systemctl restart httpd
(NOTE: You will have to open a browser and browse to the HTTPS site by NAME to see the new file and certificate message)


##################################################
Storage Management (10% of Exam)
##################################################
##################################################
Lecture: List, Create, Delete and Modify Storage Partitions
##################################################
#how to partition a disk on your system
#the easiest way to add a disk after a partition is to use  gpartd, gnome partition editor

fdisk -l  #list all of the available disks on the system

fdisk /dev/sdb
p #means print
m #menue
l #list partition types, 82 and 83 are the ones we are interested in
n #add a new partition
p
1
enter #choose default
enter #choose default
m
p
v #verify
w #write the table to disk

fdisk -l /dev/sdb

#Next we need to format the partition

##################################################
Lecture: Create, Migrate and Remove Physical/Logical/Virtual Volumes/Add New Partitions and Logical Volumes
##################################################
fdisk -l  #to list all of the disks on our system
df -h #to see what disks are mounted

fdisk -l /dev/sdb

mkfs -t ext4 /dev/sdb1

#now we need to mount the device
#mnt and media are the two most common places to see mount drives
cd /mnt
mkdir diskb1
mount -t ext4 /dev/sdb1 /mnt/diskb1

df -h

fdisk -l /dev/sdc

mkfs -t ext3 /dev/sdc1

mkfs -t ext3 /dev/sdc2

mkdir diskc1 diskc2

mount -t ext3 /dev/sdc1 /mnt/diskc1

mount -t ext3 /dev/sdc2 /mnt/diskc2

df -h

umount /mnt/diskc2 #this unmounts the c2 partition

df -h

mount /dev/sdc2 /mnt/disk2 #we didnt pass in the -t because ext3 file system has builtin kernel support


##################################################
Lecture: Configure Systems to Mount File Systems at or During Boot
##################################################
df -h #this will list all currently mounted file systems

/dev/disk/by-uuid #here we can see the uuid's for our disks

vim /etc/fstab
UUID=hgfsdhsfhsf    /mnt/diskb1     ext4      defaults    1 1 #the default mount type of 1 1

:wq

mount diskb1 #we can now mount by name because the information that we provided to fstab, the mount command scan that file

umount disk1

mount -a #this will mount anything that is defined but unmounted in the fstab file

##################################################
Lecture: Create and Assemble Volume Groups/Add or Extend Volumes and Filesystems/Assemble Volume and RAID Groups
##################################################
#a logical volume is 1 or more disks that appeasr to the file system to be contguois space

fdisk -l

df -h #verify that none of the drives are mounted

fdisk /dev/sdb
p
n
p
1
t
L
8e #linux lvm
p
w

fdisk /dev/sdc
n
p
1
t
8e
w

fdisk /dev/sdd
n
p
1
t
8e
w

fdisk -l

#now prepasre new disks for logical volume manager using pvcreate

pvcreate /dev/sdb1 /dev/sdc1 /dev/sdd1  #what this does is creates the logical volume assembly for these drives

#if you wanted to remove, if you added them as a group make sure that you remove them as a group
pvremove /dev/sdb1 /dev/sdc1 /dev/sdd1

pvdisplay

#create a volume group
vgcreate myvolumes /dev/sdb1 /dev.sdc1 /dev/sdd1

vgdisply #to display the volume group

vgscan #vgscan — scan all disks for volume groups and rebuild caches

vgrename myvolumes mydatavolumes

vgscan

vgdisplay

lvcreate --name firstgroup --size 15G mydatavolumes

lvdisplay

lvscan

lvscan
mkfs -t ext3 /dev/mydatavolumes/firstgroup

mount -t ext3 /dev/mydatavolumes/firstgroup /mnt/dev

df -h

#add another disk to the volume group
#first we need to unmount the filesystem, you cant extend the volume if the file system is mounted
umount tmp

df -h

vgdisplay

vgextend mydatavolumes /dev/sde1

vgdisplay

pvscan

lvdisplay

lvextend /dev/mydatavolumes/firstgroup /dev/sde1

lvdisplay

resize2fs /dev/mydatavolumes/firstgroup

e2fsck -f /dev/mydatavolumes/firstgroup

resize2fs /dev/mydatavolumes/firstgroup

mount -t ext3 /dev/mydatavolumes/firstgroup tmp

df -h


##################################################
Lecture: Create and Configure Swap Space
##################################################
#look at the swap available on our file system
df -h

cat /proc/swaps

fdisk -l

#you want to have the amount of ram and add 2gb of swap, this why if your system has to do a full kernel dump of the memory it has enough space

fdisk /dev/sdb
p
n
i
enter
t
82
p
w

mkswap /dev/sdb1

swapon -v /dev/sdb1

cat /proc/swaps

cat /etc/fstab

ll /dev/disk/by-uuid

vim /etc/fstab
UUID=<UUID> swap swap defaults 0 0

swapoff /dev/sdb1

cat /proc/swaps

mount -a

df -h


##################################################
Lecture: Create and Configure Encrypted Partitions
##################################################
#Verify that the encryped fle sysetm isa loaded
grep -i config_dm_crypt /boot/config-$(uname-r)
CONFIG_DM_CRYPT=m

#its installed, lets check if the module is loaded
lsmod | grep dm_crypt

#if its not loaded we need to do a modprobe dm_crypt

#to setup and use our partition we need to use cryptsetup
yum install cryptsetup
#you will see luks, which means linux unified key setup

fdisk -l

#setup a partition on the disk
fdisk /dev/sdb
n
p
1
enter
w

fdisk -l

#now we need to use cryptsetup
cryptetup -y luksFormat /dev/sdb1
YES
passphrase
passphrase

cat /proc/crypto #this will show us what the default encryption for our drives are

#now we need to open the partition
cryptsetup luksOpen /dev/sdb1 myEncryption

mkfs -t ext4 /dev/mapper/myEncryption

cd /mnt
mkdir encrypt
mount /dev/mapper/myEncryption /mnt/encrypt

df -h

umount encrypt

cryptsetup luksClose myEncryption

#the way these work is you have to mount and unmout the drive to use and protect it


##################################################
Lecture: Create, Mount and Unmount Standard Linux Filesystems
##################################################
cat /etc/fstab



##################################################
Lecture: Configure Systems to Mount Standard, Encrypted and Network File Systems on Demand
##################################################
#mount nfs
yum install nfs-utils nfs-utils-lib

vim /etc/fstab
192.168.1.32:/NFS_SHARE /mnt/tmp nfs default 0 0

#for samba
yum install samba-client samba-common cifs-utils
smbclient -U tcox -L share

mount to tmp

#create a credentials file
echo "username=tcox" > /mnt/.smbcredentials
echo "password=password" >> /mnt/.smbcredentials
chmod 600 /mnt/.smbcredentials

vim /etc/fstab
//192.168.1.60/news   /mnt/tmp      cifs    credentials=/mnt/.smbcredentials, defaults 0 0

:wq

mount -a
df -h

##################################################
Lecture: Diagnose and Correct Filesystem Problems
##################################################
fsck #fsck - check and repair a Linux filesystem
#this must be run on a unmounted file system

fsck -a /dev/sdb1 #-a means automatically clean the file system

echo $? #prints the exit code for a command


##################################################
Lecture: Design and Test Backup/Recovery Strategies - Part I
##################################################
dd #Copy a file, converting and formatting according to the operands.

df -h


dd if=/dev/sdb1 of=/root/sdb1.img

####
dd if=/dev/sr0 of=/root/vmtools.iso


##################################################
Lecture: Design and Test Backup/Recovery Strategies - Part II
##################################################
dd if=/root/sdb1.img of=/mnt/diskc1



##################################################
Exercise: Configure Systems to Mount Standard, Encrypted and Network File Systems on Demand: Encryption
##################################################
1. Check to see if your system is set up for encryption (kernel module). If needed, verify and/or load the appropriate kernel module for support. Finally, install the cryptsetup package for use.
[root@tcox4 ~]# grep -i config_dm_crypt /boot/config-$(uname -r)
CONFIG_DM_CRYPT=m
[root@tcox4 ~]# lsmod | grep dm_crypt
[root@tcox4 ~]# modprobe dm_crypt
[root@tcox4 ~]# lsmod | grep dm_crypt
dm_crypt               23138  0
dm_mod                104038  3 dm_log,dm_mirror,dm_crypt
[root@tcox4 ~]# yum install cryptsetup
Loaded plugins: fastestmirror
base                                                                                                                                  | 3.6 kB  00:00:00
extras                                                                                                                                | 3.4 kB  00:00:00
updates                                                                                                                               | 3.4 kB  00:00:00
Loading mirror speeds from cached hostfile
* base: mirrors.advancedhosters.com
* extras: mirror.es.its.nyu.edu
* updates: mirror.us.leaseweb.net
Package cryptsetup-1.6.6-3.el7.x86_64 already installed and latest version
Nothing to do
2. Using the fdisk utility, check to be sure there is an available drive on your lab server with no partitions. If not, be sure to use the mount one on your lab serve using the servers dashboard.
[root@tcox4 ~]# fdisk -l
Disk /dev/xvda: 21.5 GB, 21474836480 bytes, 41943040 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0x000aec37
    Device Boot      Start         End      Blocks   Id  System
/dev/xvda1   *        2048    41929649    20963801   83  Linux
Disk /dev/xvdf: 1073 MB, 1073741824 bytes, 2097152 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
3.  Use the fdisk utility to create a new Linux partition on the drive you find in Step #2 above. Print out the partition table and be sure to write it to disk before exiting 'fdisk'.
[root@tcox4 ~]# fdisk /dev/xvdf
Welcome to fdisk (util-linux 2.23.2).

Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.

Device does not contain a recognized partition table
Building a new DOS disklabel with disk identifier 0x7499ffd4.

Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): p
Partition number (1-4, default 1): 1
First sector (2048-2097151, default 2048):
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151):
Using default value 2097151
Partition 1 of type Linux and of size 1023 MiB is set

Command (m for help): p

Disk /dev/xvdf: 1073 MB, 1073741824 bytes, 2097152 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0x7499ffd4

    Device Boot      Start         End      Blocks   Id  System
/dev/xvdf1            2048     2097151     1047552   83  Linux

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.
4. Using the Linux Unified Key Setup Method and the cryptsetup utility, prepare the newly-created partition from Step 3. Create a reference name called 'my_encrypted_partition'. Again, using the cryptsetup utility, open the partition so that it can be formatted, and then format it as an EXT3 partition.
[root@tcox4 ~]# cryptsetup -y luksFormat /dev/xvdf1

WARNING!
========
This will overwrite data on /dev/xvdf1 irrevocably.

Are you sure? (Type uppercase yes): YES
Enter passphrase:
Verify passphrase:
[root@tcox4 ~]# cryptsetup luksOpen /dev/xvdf1 my_encrypted_partition
Enter passphrase for /dev/xvdf1:
[root@tcox4 ~]#  mkfs.ext3 /dev/mapper/my_encrypted_partition
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
65408 inodes, 261376 blocks1
3068 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=268435456
8 block groups
32768 blocks per group, 32768 fragments per group
8176 inodes per group
Superblock backups stored on blocks:
32768, 98304, 163840, 229376

Allocating group tables: done
Writing inode tables: done
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done
5. Mount the drive using a directory called 'enc' in the '/mnt' directory, using the named mapper reference created in Step 4. Create a file called 'test.txt' in the newly-mount partition and display it. Unmount the partition. Finally, attempt to mount the drive directly (by device name, not mapper) and review the error message to verify the encryption.
[root@tcox4 ~]# cd /mnt
[root@tcox4 mnt]# mkdir enc
[root@tcox4 mnt]# mount /dev/mapper/my_encrypted_partition enc
[root@tcox4 mnt]# df -h
Filesystem                          Size  Used Avail Use% Mounted on
/dev/xvda1                           20G  4.6G   16G  23% /
devtmpfs                            477M     0  477M   0% /dev
tmpfs                               497M   84K  496M   1% /dev/shm
tmpfs                               497M   13M  484M   3% /run
tmpfs                               497M     0  497M   0% /sys/fs/cgroup
/dev/mapper/my_encrypted_partition  989M  1.3M  937M   1% /mnt/enc
[root@tcox4 mnt]# mount | grep partition
/dev/mapper/my_encrypted_partition on /mnt/enc type ext3 (rw,relatime,seclabel,data=ordered)
[root@tcox4 mnt]# echo "Hello" > /mnt/enc/testfile.txt
[root@tcox4 mnt]# cat /mnt/enc/testfile.txt
Hello
[root@tcox4 mnt]# umount enc
[root@tcox4 mnt]# cryptsetup luksClose my_encrypted_partition
[root@tcox4 mnt]# mount /dev/xvdf1 enc
mount: unknown filesystem type 'crypto_LUKS'
[root@tcox4 mnt]#


##################################################
Exercise: Configure Systems to Mount Standard, Encrypted and Network File Systems on Demand: Standard Filesystem
##################################################
1. Using the fdisk utility, check to be sure there is an available drive on your lab server with no partitions currently. If not, be sure to use your lab server tab to create one.
root@tcox1:~# fdisk -l


Disk /dev/xvda: 16.1 GB, 16106127360 bytes
255 heads, 63 sectors/track, 1958 cylinders, total 31457280 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000

    Device Boot      Start         End      Blocks   Id  System
/dev/xvda1   *       16065    31455269    15719602+  83  Linux

Disk /dev/xvdf: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders, total 2097152 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000

Disk /dev/xvdf doesn't contain a valid partition table
2.  Use the gdisk utility to create a new Linux partition on the drive you found in Step 1. Print out the partition table and be sure to write it to the disk before exiting gdisk.
root@tcox1:~# gdisk /dev/xvdf
GPT fdisk (gdisk) version 0.8.8

Partition table scan:
  MBR: not present
  BSD: not present
  APM: not present
  GPT: not present

Creating new GPT entries.

Command (? for help): p
Disk /dev/xvdf: 2097152 sectors, 1024.0 MiB
Logical sector size: 512 bytes
Disk identifier (GUID): AE372F98-80BF-4F9F-84BB-B9D0F087124E
Partition table holds up to 128 entries
First usable sector is 34, last usable sector is 2097118
Partitions will be aligned on 2048-sector boundaries
Total free space is 2097085 sectors (1024.0 MiB)

Number  Start (sector)    End (sector)  Size       Code  Name

Command (? for help): n
Partition number (1-128, default 1): 1
First sector (34-2097118, default = 2048) or {+-}size{KMGTP}:
Last sector (2048-2097118, default = 2097118) or {+-}size{KMGTP}:
Current type is 'Linux filesystem'
Hex code or GUID (L to show codes, Enter = 8300):
Changed type of partition to 'Linux filesystem'

Command (? for help): w

Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING
PARTITIONS!!

Do you want to proceed? (Y/N): y
OK; writing new GUID partition table (GPT) to /dev/xvdf.

The operation has completed successfully.
3. Format the partition as an 'ext3' filesystem. Give it a volume label of 'testpart'. Verify that a UUID has been created for it once it has been formatted.
root@tcox1:~# mke2fs -t ext3 -L testpart /dev/xvdf1
mke2fs 1.42.9 (4-Feb-2014)
Filesystem label=testpart
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
65536 inodes, 261883 blocks
13094 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=268435456
8 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks:
32768, 98304, 163840, 229376

Allocating group tables: done
Writing inode tables: done
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done

root@tcox1:~# ls -al /dev/disk/by-uuid/
total 0
drwxr-xr-x 2 root root  80 Sep  7 16:27
.
drwxr-xr-x 6 root root 120 Sep  7 16:25
..
lrwxrwxrwx 1 root root  11 Sep  7 16:27
09f1cbe8-2a81-4d2f-b7c1-5181a506c6b4
 ->
../../xvdf1

|
lrwxrwxrwx 1 root root  11 Sep  7 15:52
a09befc1-cf11-45ac-b1f4-52736ff06125
 ->
../../xvda1
4. Mount the drive using a directory called 'std' in the '/mnt' directory using the drive created in Step 3. Create a file called 'test.txt' in the newly-mounted partition and display it.
root@tcox1:~# cd /mnt
root@tcox1:/mnt# mkdir std
root@tcox1:/mnt# mount -t ext3 /dev/xvdf1 /mnt/std
root@tcox1:/mnt# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1       15G  2.4G   12G  17% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
udev            492M   12K  492M   1% /dev
tmpfs           100M  804K   99M   1% /run
none            5.0M     0  5.0M   0% /run/lock
none            497M   80K  497M   1% /run/shm
none            100M   16K  100M   1% /run/user
/dev/xvdf1      991M  1.3M  939M   1% /mnt/std
root@tcox1:/mnt# echo "Hello World" >> /mnt/std/test.txt
root@tcox1:/mnt# cat /mnt/std/test.txt
Hello World
5. Unmount the partition. Verify that the drive is no longer mounted and that the file created in Step 4 is no longer there.
root@tcox1:/mnt# umount std
root@tcox1:/mnt# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1       15G  2.4G   12G  17% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
udev            492M   12K  492M   1% /dev
tmpfs           100M  804K   99M   1% /run
none            5.0M     0  5.0M   0% /run/lock
none            497M   80K  497M   1% /run/shm
none            100M   16K  100M   1% /run/user
root@tcox1:/mnt# ls -al /mnt/std
total 8
drwxr-xr-x 2 root root 4096 Sep  7 16:28
.
drwxr-xr-x 3 root root 4096 Sep  7 16:28
..



##################################################
Exercise: Creating Swap Partitions
##################################################
1. The linuxacademy.com lab servers already have swap enabled, so first run swapoff to disable the /swapfile in the /etc/fstab file.
[root@localhost etc]# swapoff -a
swapoff -a will disable the swap space listed in /etc/fstab
2. Remove the entry /swapfile from the /etc/fstab file.
[root@localhost etc# vim fstab
#
# /etc/fstab
# Created by anaconda on Fri Oct 17 18:33:48 2014
#
# Accessible filesystems, by reference, are maintained under '/dev/disk'
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
UUID=668dbd02-c201-44bc-be76-f606fc9ab8db /                       xfs     defaults        1 1
3. Verify there is no current swap space available.
[root@localhost etc]# free -m
             total       used       free     shared    buffers     cached
Mem:           992        225        767         12          1         82
-/+ buffers/cache:        141        851
Swap:            0          0          0
4. Using fdisk create a partition that uses the entire /dev/xvdf disk; make sure to label the device correctly.
[root@localhost dev]# fdisk xvdf
Welcome to fdisk (util-linux 2.23.2).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.
Device does not contain a recognized partition table
Building a new DOS disklabel with disk identifier 0x69baf224.

Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p):
Using default response p
Partition number (1-4, default 1):
First sector (2048-2097151, default 2048):
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151):
Using default value 2097151
Partition 1 of type Linux and of size 1023 MiB is set

Command (m for help): t
Selected partition 1
Hex code (type L to list all codes): 82
Changed type of partition 'Linux' to 'Linux swap / Solaris'

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.
[root@localhost dev]#
5. Format the device with the swap signature.
[root@localhost dev]# mkswap /dev/xvdf1
Setting up swapspace version 1, size = 1047548 KiB
no label, UUID=5713eae2-de6b-4485-af5d-1c659765cd92
6. Activate the swap space.
[root@localhost dev]# swapon /dev/xvdf1
[root@localhost dev]# free -m
             total       used       free     shared    buffers     cached
Mem:           992        216        776         12          0         79
-/+ buffers/cache:        135        857
Swap:         3046          0       3046
7. Add swap space to the /etc/fstab so that it is a persistent mount.
[root@localhost dev]# blkid
/dev/xvda2: UUID="" TYPE="xfs" PARTUUID="9146b810-9a31-4c10-a206-01b0bbaca807"
/dev/xvdf1: UUID="" TYPE="swap"
Grab the UUID to mount the swap device.
[root@localhost dev]# vim /etc/fstab
#
# /etc/fstab
#
UUID=668dbd02-c201-44bc-be76-f606fc9ab8db /                       xfs     defaults        1 1
UUID=YOUR-UUID swap  swap    defaults 0 0
8. Activate the swap space that is added in the /etc/fstab file.
Since we activated it manually already let's manually deactivate it then activate it based on the /etc/fstab file.
[root@localhost dev]# swapoff /dev/xvdf1
Now activate it persistently based off the /etc/fstab entry:
[root@localhost dev]# swapon -a
-a will activate all swap spaces located in the /etc/fstab.


##################################################
Exercise: Assembling Partitions as LVM Devices
##################################################
1. Ensure LVM utilities are installed on the system.
[root@localhost #] yum install lvm2
2. Create a partition that uses the entire disk space on /dev/xvdf.
[root@localhost dev]# fdisk /dev/xvdf Welcome to fdisk (util-linux 2.23.2).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.
Device does not contain a recognized partition table.
Building a new DOS disklabel with disk identifier 0x0631abd7.
Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p):
Using default response p
Partition number (1-4, default 1):
First sector (2048-2097151, default 2048):
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151):
Using default value 2097151
Partition 1 of type Linux and of size 1023 MiB is set
Command (m for help): t
Selected partition 1
Hex code (type L to list all codes): 8e
Changed type of partition 'Linux' to 'Linux LVM'
Command (m for help): w
The partition table has been altered!
Calling ioctl() to re-read partition table.
Syncing disks.
3. Create a physical volume and a new volume group named battlestar out of the /dev/xvdf1 partition.
[root@localhost #] pvcreate /dev/xvdf1
[root@localhost #] vgcreate battlestar /dev/xvdf1
4. Create a new LVM volume that is approximately 500M in size (generally you will want it to be 2 to 2.5 times the size of your physical memory but this is a lab).
[root@localhost dev]# lvcreate -n swap -L 500M battlestar
5. Format the new LVM volume with a swap signature.
[root@loclhost dev] #  mkswap /dev/battlestar/swap
Setting up swapspace version 1, size = 511996 KiB
no label, UUID=679ea5a2-c652-458a-8726-6e3970d1f58f // (Note use your UUID provded not the one here)
6. Add an entry into the /etc/fstab file using the UUID of the LVM device to create a persistent swap mount.
#
# /etc/fstab
UUID=668dbd02-c201-44bc-be76-f606fc9ab8db /                       xfs     defaults        1 1
UUID=679ea5a2-c652-458a-8726-6e3970d1f58f swap swap defaults 0 0
7. Run the swapon command that enables all swap entires in the /etc/fstab file.
[root@localhost dev]# swapon -a
8. Verify swap space is working.
[root@localhost dev]# free -m
Or
[root@localhost dev]# swapon -s
[root@localhost dev]# cat /proc/swaps
10. Reboot and test.
[root@localhost dev]# reboot



##################################################
Virtualization (5% of Exam)
##################################################
##################################################
Lecture: Configure a Hypervisor to Host Virtual Guests
##################################################
when installing kvm it can only be installed on a physical system

#Check your system
egrep -c '(vmx|svm)' /proc/cpuinfo
#just has to be ay numnber > 0

sudo apt-get install -y qemu-kvm qemu libvirt-bin virtinstall bridge-utils virt-manager virt-viewer

#how to enable virtual host networking
lsmod | grep vhost
modprobe vhost_net
lsmod | grep vhost


##################################################
Lecture: Configure Virtual Networking to Support Virtualized Guests
##################################################
cd /etc/network
vim interfaces
:wq

mv interfaces interfaces_backup
mv interfaces_bridged interfaces
vim interfaces
auto lo
iface lo inet loopback
#Enable Bridge Networking
auto eth0
dns-nameservers 10.0.0.30
iface br0 inet static
address 10.0.0.30
netmask 10.0.0.0
netmask 10.0.0.255
broadcast 10.0.0.255
gateway 10.0.0.1
dns-nameservers 10.0.0.30
bridge_ports eth0
bridge_stp off
auto br0

:wq

reboot

ifconfig

#looking for virbr0

lsmod | grep vhost

virt-manager

#click on create a new vm
#connect to local host


##################################################
Lecture: Install Linux Systems as Virtual Guests
##################################################
click on create a new vm
connect to local host
local install media
use iso images




##################################################
Lecture: Start, Stop and Modify the Status of a Virtual Machine/Access a VM Console/Configure Systems to Launch At Boot Time - GUI
##################################################
there is auto start checkbox

you need to make sure that libvirtd has started on startup



##################################################
Lecture: Start, Stop and Modify the Status of a Virtual Machine/Access a VM Console/Configure Systems to Launch At Boot Time - CLI
##################################################
virsh #virtual shell

virt-manager &
virsh start UbuntuTrustyTahr

virsh list

virt-viewer UbuntuTrustyTahr
#if you close the window youre just closing the viewer

virsh shutdown UbuntuTrustyTahr

virsh destroy UbuntuTrustyTahr #to destroy the machine

virsh autostart UbuntuTrustyTahr virt-manager
#you will see that the autostart box is checked


##################################################
Lecture: Resize RAM or Storage of Virtual Machine/Evaluate Virtual Machine Memory Usage
##################################################
top -p <pid> #this wil show use the resources that a processs is using
















##################################################
