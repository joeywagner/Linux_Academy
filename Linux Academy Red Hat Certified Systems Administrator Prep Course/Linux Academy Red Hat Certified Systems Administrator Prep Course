##################################################
Linux Academy Red Hat Certified Systems Administrator Prep Course
##################################################
There is one that is taking place at tlg learning in seattle on friday april 20th and friday 11 may starting at 9am


##################################################
Introduction
##################################################
Understand and use essential tools
Access a shell prompt and issue commands with correct syntax
Use input-output redirection (>, >>, |, 2>, etc.)
Use grep and regular expressions to analyze text
Access remote systems using ssh
Log in and switch users in multiuser targets
Archive, compress, unpack, and uncompress files using tar, star, gzip, and bzip2
Create and edit text files
Create, delete, copy, and move files and directories
Create hard and soft links
List, set, and change standard ugo/rwx permissions
Locate, read, and use system documentation including man, info, and files in /usr/share/doc
Note: Red Hat may use applications during the exam that are not included in Red Hat Enterprise Linux for the purpose of evaluating candidate's abilities to meet this objective.

Operate running systems
Boot, reboot, and shut down a system normally
Boot systems into different targets manually
Interrupt the boot process in order to gain access to a system
Identify CPU/memory intensive processes, adjust process priority with renice, and kill processes
Locate and interpret system log files and journals
Access a virtual machine's console
Start and stop virtual machines
Start, stop, and check the status of network services
Securely transfer files between systems

Configure local storage
List, create, delete partitions on MBR and GPT disks
Create and remove physical volumes, assign physical volumes to volume groups, and create and delete logical volumes
Configure systems to mount file systems at boot by Universally Unique ID (UUID) or label
Add new partitions and logical volumes, and swap to a system non-destructively

Create and configure file systems
Create, mount, unmount, and use vfat, ext4, and xfs file systems
Mount and unmount CIFS and NFS network file systems
Extend existing logical volumes
Create and configure set-GID directories for collaboration
Create and manage Access Control Lists (ACLs)
Diagnose and correct file permission problems

Deploy, configure, and maintain systems
Configure networking and hostname resolution statically or dynamically
Schedule tasks using at and cron
Start and stop services and configure services to start automatically at boot
Configure systems to boot into a specific target automatically
Install Red Hat Enterprise Linux systems as virtual guests
Configure systems to launch virtual machines at boot
Configure network services to start automatically at boot
Configure a system to use time services
Install and update software packages from Red Hat Network, a remote repository, or from the local file system
Update the kernel package appropriately to ensure a bootable system
Modify the system bootloader

Manage users and groups
Create, delete, and modify local user accounts
Change passwords and adjust password aging for local user accounts
Create, delete, and modify local groups and group memberships
Configure a system to use an existing authentication service for user and group information

Manage security
Configure firewall settings using firewall-config, firewall-cmd, or iptables
Configure key-based authentication for SSH
Set enforcing and permissive modes for SELinux
List and identify SELinux file and process context
Restore default file contexts
Use boolean settings to modify system SELinux settings
Diagnose and address routine SELinux policy violations

sander van vugt rhcsa

 michael jang

##################################################
Lecture: About This Course and How to Prepare
##################################################
##################################################
Lecture: Lab Servers and Following Along
##################################################
get chrome plugin from the plugin store

realvnc viewer



##################################################
Essential Tools
##################################################
##################################################
Lecture: Access a Shell Prompt and Issue Commands
##################################################
man ls

man cal  #display a calendar

man mv

date +%d


##################################################
Lecture: Use Input/Output Redirection
##################################################
cat /etc/motd

cat /etc/motd /etc/issue # this will concatenate both files

cat /etc/motd /etc/issue > /home/user/motd-issue #this will combine both files and redirect them
> #this means overwrite
>> #this means append

cat /etc/os-release

> #this represents standard output, it wont output error, for that we need to use 2>

gfdsgds 2> error.txt #redirect error, we wont see it on the screen, we redirected it to the file

gdfsg 2> /dev/null #redirect to nothing

dfshsfdgh 2>> error.txt #append error to the file

gfdsg &> output.out

fgdzgsfdg 2>&1 #redirects standard output and standard error
the | allows use to accept standard output but not standard error

head #default first 10 lines of a file

head -n 50 messages #this will send the first 50 lines of messages

less messages  #this will start at the top and allow us to page

tail #default last 10 lines of a file


##################################################
Lecture: Use grep and Regular Expressions to Analyze Text
##################################################
grep '^#' /etc/ssh/sshd_confg #this will search for everything with # at the beginning of a line, the ^ means the beginning

grep -i 'rsaauth' /etc/ssh/sshd_confg

grep -v '^#' #the -v means inverse, it will find everything that doesn't start with a hash

grep 'world$' fie #this will reture all lines that end with world

grep '[^linux]' #do not match anything that is in the brackets

grep -i '^linuxacademy$' #search for lines that start and end

grep [Ll]inuxacademy  #if it starts with a L or l, return the pattern

grep '[^linux]' #return whats not in the bracket

?  #means the preceding item is optional and is matched at least one time

grep -E '(a)+' file  #extended regular expressions, the + means match whats before the + one or more times

grep 'l...x' file #any string that starts with l has 3 characters and ends with a x

cat /etc/passwd

grep ':$' /etc/passwd  #find lines that end in :

grep 'nolonin$' /etc/passwd

grep systemd messages | grep 'start'


##################################################
Lecture: Access Remote Systems Using SSH
##################################################
touch file{1..4}.txt  #this will create multiple files at the same time, the {} will allow you to create multiple files at one time

vim /etc/ssh/sshd_config
#PermitRootLogin #if uncommented root user could login remotely, its bad practice to enable root login, its a security hole

#if you make a change in the sshd_conf
systemctl restart sshd

#issue a command to a remote server
ssh user@<ipaddress> <command>

scp <file> user@<ipaddress>:~/  #this will put the file in the users home directory

sftp user@<ipaddress>   #sftp uses port 22 which is secure
get <file_name> #this will download it to our local machine

put <file_name> #this will put this file on to a remote machine

ctrl+r  #this is how you can search your command history


##################################################
Lecture: Log in and Switch Users in Multiuser Targets
##################################################
systemctl get-default
multi-user.target #what this represents is a grouping of unit configuration files or services that are to start when you system starts or switches to the multi use target, the mutiuser target lets multiple users be logged into the same system

su #allows us to login as another user, but  it didn't load all of my profile information,

.bash_profile #is a customization script for login shells, this is where you should put custom environment variables
#the .bash_profile is the is know as the login  shell customization file.

#when you first login to a system remotely for the first time, we are indeed in a login shell
#but when we change a user, su, we are not in a login shell, we can tell because the .bash_profile doesn't run and the bach_profile is considered login shell customization file
#the .bashrc is loaded when we enter into an interactive shell, su=.bashrc is loaded

#if you use any of the 3 commands below you will enter a login shell
su - #this represents login shell, so the .bash_profile will be loaded#also
su -l
#and
su --login

#if you wanted to login to root but keep the .bash_profile customizations of your user just use 'su'

#Global bash  profile customization script
vim /etc/profile #these scripts are executed when any user logs in


##################################################
Lecture: Archive, Compress, Unpack and Uncompress Files Using tar, star, gzip and bzip2
##################################################
#tar allows us to create archives, but it doesn't compress, we need to use gzip for that

#we can gzip a file but we cant gzip a directory, we can recessively gzip all the files in a directory but that will make a compressed file for each file in the directory

tar -cvf myarchive.tar directy1/ myfile1 myfile2 #-cvf means create verbose file, this command will create a tar of the contents of directy1 and myfile1 and myfile2

man tar
tar [OPTION...] [FILE]...  #we know we can enter multiple files because of the ... after [FILE]

#what files are in my archive
tar -tf myarchive.tar  #this will list the contents of a tar

#to compress
gzip myachive.tar

#to archive and compress at the same time, the z flag says to use gzip
tar -cvzf myarchive1.tar.gz directy1/ myfile1 myfile2

#to uncompress
gunzip myarchive1.tar.gz
or
gzip -d myarchive1.tar.gz #the -d means decompress

tar -xzvf myarchive.tar.gz  #this will extract it, filter it through gzip -d, verbosely, file

#NOTE if you extract a file and there is a file with the same name in the extraction location it will over write that file

#before you extract if you want to see the difference between your directory and your archive
tar -dvf myachive.tar.gz

#the -j flag with tar will use the bizip2 compression utility

gzip <file1> <file2> #this will create 2 .gz files

gzip -l <file1> #this will show compression information about a archive

gzip -d and gunzip are the same

#star utility, another archiving utility, works well with large data sets
yum install star

star -c -f=myarchive.tar directory1/ file1.txt file2.txt  #the -c creates a new archive, the -f is file name

star -t -f=myarchive.tar  #the -t will list the contents of myarchive.tar

#you can now filter the tar through gzip
gzip myarchive.tar

#to unzip the archive
gunzip myarchive.tar.gz
or
gzip -d myarchive.tar.gz

#use star to uncompress
star -x -f=myarchice.tar  #star will not allow us to over write files on our system if the system files are newer or the same, it give us a layer of protection

#star does not remove the .tar, it extracts the data from it

star -x -f=myarchive.tar file1.txt  #this will extract just file1.txt from our archive

star -cz -f=mycompressedarchive.tar directory1/ file1.txt file2.txt  #this will archive and compress with one command


###TIP
alias rm #alias and command will show what the command and flags the command is using

##################################################
Lecture: Create and Edit Text Files
##################################################
yum install nano

yum search emacs

#vi vim,  vi is always installed on linux
#when you open vi you are in command mode
#xmode, esc+:

yy = yank, copy a line

p = paste on the line after cursor
P = paste on line above cursor
u = undo
dd = cuts line
5dd = cut 5 lines

cw = change word, it also puts you into insert mode

cc = cuts line and puts us into insert mode

shift+r, capital R, is replace mode, you can write over text thats already there

:%s/line/word #replace the first occurrence of line with word

:%s/word/hello/g  #replace all occurrences of a line with with word, globally, thats what the g is for

:!ls  #to issue a command from within vi


vipw and vigr
The vipw and vigr commands edit the files /etc/passwd and /etc/group, respectively. If the -s flag is specified, these commands will edit the shadow (secure) versions of their files: /etc/shadow and /etc/gshadow, respectively.

##################################################
Lecture: Create, Delete, Copy and Move Files and Directories
##################################################
touch #the touch command is used to change a files time stampA

touch file{1..7}.txt  #use the {} to create multiple files at the same time

mkdir dir{1..5} #to create multiple files at the same time

mkdir -p /dir/dir1/dir2 #the dash -p means make the parent directory if its not there

#install the tree command

yum install tree
#tree is use to see directory and file structure


##################################################
Lecture: Create Hard and Soft Links
##################################################
#2 types of links
symbolic link
when you vim a sym link you are actually opening the target file

ln -s <target> <link>
ln -s /etc/motd motd
lrwxrwxrwx. 1 root root      9 Apr 16 17:45 motd -> /etc/motd

#if you move /etc/motd you will break the link, if the source target is moved the link is broken
#you can have any number of links to the same target
#symbolic links can link across file systems

#permissions
#the link will look like it has 777, but the permissions on the target matter


hard link
ln #if you don't pass an option or flag by default a hard link will be created

#a hard link is a link to a specific inode location on your file system

#hard links cant cross file systems

ln <target> <link>

lrwxrwxrwx. 1 root root      9 Apr 16 17:45 motd -> /etc/motd  #the 1 is the number of links to an inode

#if you change permissions on one file it will change the other, because it is linked to the same inode

#if you delete one the other will still be there because the other file is linked into that inode information
#as long as there is something linking to that inode information the data will exist
#hard links link directly to the inode source on the hard drive
#if the source or target link still exists then the data is available on the inode till all links to that inode are no longer available
#all hard links linking to the same inode will have the same data time as well as permissions
#after a new hardlink is created it is not possible to determine which one was the original

##################################################
Lecture: List, Set and Change Standard UGO/RWX Permissions
##################################################
drwxr-xr-x    5 a1248202  NA\Domain Users   170B Dec 22  2016 certs
-rw-r--r--    1 a1248202  NA\Domain Users     0B Jul 11  2016 chefout.txt
#The d indicatests a directory
#the - indicates that its a file
#a l indicates that its a sim link


-rw-r--r-- Each one of these slots is called bits
#the first bit indicates what type of resource that it is
#then the next three represent the owner of the file
#the next three represent the group who owns the file
#and the last three represents other, everybody else on the system

default permissions are defined by umask

#symbolic notation
u = user
g = group
o = other
a = all

getent #The  getent  command displays entries from databases supported by the Name Service Switch libraries, which are configured in /etc/nsswitch.conf.

getent group #this will list all groups

/etc/getent #will also contain the same information as the getent command

usermod -G finance user #the uppercase G means primary group

#permissions inherit the permissions of the parent directory

chown -R

#how would you remove the execute permissions on everything except directories
#answer is the X, X means that execute should only be on directories and not on files
chmod ug+X -R finance #this will give execute on only finance and the directories under finance for the user and group



#octal permissions
777  rwx


#set gid
#you want the file run as the user who owns the file not the user running the file

#any user can run the program, but not all users have access to the program

s = the s bit means guid bit

chmod u+s test.txt #sets the guid on the user

#set guid bit with octal

chmod 4500 test.txt #sets the user
chmod 2500 test.txt #sets the group
chmod 6500 test.txt #sets the guid for both the user and the group

#the sticky bit
chmod +t test1/  #sets the sticky bit on the directory test1

sticky bit means that any user can add to the directory but only the user that owns the file can delete it

#octal notation sticky bit
chmod 1777 test.txt
chmod 7777 test.txt #to set all 3 sticky bit and the set uid and set guid


##################################################
Lecture: List, Set and Change Standard UGO/RWX Permissions: umask
##################################################
umask #this is where the default permissions when a file or directory get created are stored

[root@joeywagner-gmail-com1 ~]# umask
0022

#when we change it its not persistent with umask
#umask is masking the permissions that we dont want the file to have
file start with 666
directories start with 777

if we want rw on a file give the umask 0
-rw-r--r--. 1 root root          0 Nov  3 18:52 test
022 for rw r r
the special bit is assumed 0

#for directories x will allow a user to cd into the dir but they wont be able to list the contents of that dir

#if you use the umask command to change file permissions it is not persistant

[root@joeywagner-gmail-com1 ~]# umask 266
[root@joeywagner-gmail-com1 ~]# touch file1
-r--------. 1 root root          0 Apr 17 00:28 file1

#if you want to preeminently edit the umask edit the /etc/bashrc
if [ $UID -gt 199 ] && [ "`/usr/bin/id -gn`" = "`/usr/bin/id -un`" ]; then
       umask 002 #regular user
    else
       umask 022 #privilage users
    fi

#To make both login and nonlogin umask changes persistent we need to change the umask in both the /etc/bashrc and the /etc/profile directories

##################################################
Lecture: Locate, Read and Use System Documentation with man, info and /usr/share/doc
##################################################
man passwd

apropos passwd #if nothing is returned you need to update the mandb

mandb #mandb - create or update the manual page index caches

apropos - search the manual page names and descriptions

apropos passwd
chpasswd (8)         - update passwords in batch mode
fgetpwent_r (3)      - get passwd file entry reentrantly
getpwent_r (3)       - get passwd file entry reentrantly
gpasswd (1)          - administer /etc/group and /etc/gshadow
grub2-mkpasswd-pbkdf2 (1) - Generate a PBKDF2 password hash.
lpasswd (1)          - Change group or user password
pam_localuser (8)    - require users to be listed in /etc/passwd
passwd (1)           - update user's authentication tokens
sslpasswd (1ssl)     - compute password hashes
passwd (5)           - password file
passwd2des (3)       - RFS password encryption
pwhistory_helper (8) - Helper binary that transfers password hashes from passwd or shadow to opasswd
smbpasswd (5)        - The Samba encrypted password file
smbpasswd (8)        - change a user's SMB password
vncpasswd (1)        - change the VNC password

man -k passwd #is the same thing as apropos


#new linux documentation is moving to info

/usr/share/info #info searches this location

info passwd #if there isnt a page for a command in the /usr/share/info, info will pull up the man page for the command

n #this will take you to the next info page "node"
u #takes you to the top level, "top page"
p #allows you to go back one level

the ? is going to show you how to navigate info

info --apropos=tee
info coreutils tee

#if we install a program and it doesnt have info or man pages look in /usr/share/doc

locate passwd #this will search everything that is related to passwd
updatedb #to update the locate db

which passwd #this will show use the full path to the program

whatis passwd #whatis - display manual page descriptions

whereis passwd  #whereis - locate the binary, source, and manual page files for a command

rpm -qd packagename #q=query d=documentation #if we installed a package via rpm

##################################################
Lecture: Finding Files with Locate and Find
##################################################
yum install mlocate  #mlocate is the name of the package for locate

locate #is a fast and cached searching tool, the cache is updated by a cron on a regular basis
updatedb #to update the locate cache

find /etc -name motd

find /etc -user user

find / -user user

find / -mtime -3 #files that have been modified in the last 3 days

stat /usr/shate/httpd #stat - display file or file system status

[root@joeywagner-gmail-com1 etc]# stat passwd
  File: ‘passwd’
  Size: 1629      	Blocks: 8          IO Block: 4096   regular file
Device: ca02h/51714d	Inode: 392705      Links: 1
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)
Context: system_u:object_r:passwd_file_t:s0
Access: 2017-04-17 22:05:22.212000000 -0400
Modify: 2017-04-16 21:52:26.222053925 -0400
Change: 2017-04-16 21:52:26.224053951 -0400
 Birth: -


find / -mtime -3 #files that have been modified greater than 3 days ago

id user #get the id for a user
[root@joeywagner-gmail-com1 etc]# id joe
uid=1002(joe) gid=1002(joe) groups=1002(joe),10(wheel)

find / -uid 1002

find / -user joe

find / -user joe -type f #find files

find / -user joe -type d #find directories

find / -user joe -type f -exec cat {} \;  #{} represents the file thats returned, the \ ends the command

find / -user joe -type f -exec cp {} /home/mary  \;

find /home/ -user joe -type f -exec rm {} \;

#the find command is going to be slower than the locate command but its much more powerful

##################################################
Exercise: Understanding umask
##################################################

Note: This can be performed on a LinuxAcademy.com Red Hat 7 Enterprise lab server.

When a process creates a directory or file, the respective object-created permissions are set by the process. This means that if a text editor creates a file, it creates it with required permissions. It does not need to execute permissions to create the file. When working with umask, it is safe to assume that you are masking those default permissions, with files starting at 666 and directories starting at 777. When you use umask, you are "masking" the default permissions.

1.  View current umask permissions and then, for the current shell session, set umask permissions to 0.
2.  Navigate to the /tmp directory and touch file1 and mkdir dir1. View current permissions.
3.  Mask permissions for the "other" users to write a file when created, then touch file2 and view permissions.
4.  Mask write access for group members and the write for "other" permissions, then touch file3 and view permissions.
5.  Mask read and write permissions for the owner of a file, then touch file4 and mkdir dir3 and view permissions.
6.  Mask all permissions, including execute permissions, on new directories, then touch file5.
7.  Mask read/write access for group for non-privileged users and other permissions and make these changes persistent.

##################################################

1. View current umask permissions and then, for the current shell session, set umask permissions to 0.
[root@localhost ~]# umask
0022
[root@localhost ~]# umask 0
[root@localhost ~]# umask
0000
Note: umask adds leading zeros


2. Navigate to the /tmp directory and touch file1 and mkdir dir1. View current permissions.
[root@localhost user]# cd /tmp
[root@localhost tmp]# touch file1
[root@localhost tmp]# mkdir dir1
[root@localhost tmp]# ls -l
total 0
drwxrwxrwx. 2 root root 6 May  1 11:10 dir1
-rw-rw-rw-. 1 root root 0 May  1 11:10 file1


3. Mask permissions for the "other" users to write a file when created, then touch file2 and view permissions.
Tip: If file permissions start at 666, and you want to "remove/mask" permissions for other users to read and write, then you need to subtract the octoal notation representing write permissions, which is 2.
[root@localhost tmp]# umask 002
[root@localhost tmp]# touch file2
[root@localhost tmp]# ls -l
total 0
drwxr-xr-x. 2 root root 6 May  1 11:10 dir1
-rw-rw-rw-. 1 root root 0 May  1 11:10 file1
-rw-rw-r--. 1 root root 0 May  1 11:13 file2


4. Mask write access for group members and the write for "other" permissions, then touch file3 and view permissions.
[root@localhost tmp]# umask 022
[root@localhost tmp]# touch file3
[root@localhost tmp]# ls -l
-rw-r--r--. 1 root root 0 May  1 11:16 file3
[root@localhost tmp]#


5. Mask read and write permissions for the owner of a file, then touch file4 and mkdir dir3 and view permissions.
[root@localhost tmp]# umask 600
[root@localhost tmp]# touch file4
[root@localhost tmp]# mkdir dir3
[root@localhost tmp]# ls -l
total 0
d--xrwxrwx. 2 root root 6 May  1 11:18 dir3
----rw-rw-. 1 root root 0 May  1 11:18 file4

6. Mask all permissions, including execute permissions, on new directories, then touch file5.
[root@localhost tmp]# umask 777
[root@localhost tmp]# touch file5
Tip: Setting umask 666 would mask all permissions on files but leave execute on directories. Directories need execute permissions for someone to change into the directory.


7. Mask read/write access for group for non-privileged users and other permissions and make these changes persistent.
[root@localhost ]#vim /etc/bashrc
if [ $UID -gt 199 ] && [ "`id -gn`" = "`id -un`" ]; then
    umask 066
else
    umask 022
fi
[root@localhost ]#vim /etc/profile
if [ $UID -gt 199 ] && [ "`id -gn`" = "`id -un`" ]; then
    umask 066
else
    umask 022
fi


##################################################
Exercise: Archiving and Compressing Files
##################################################
Note: This lab can be performed on a LinuxAcademy.com Red Hat 7 lab server.

1.  While working in the user root's home directory, create a tar archive of the entire /var/log directory and name the tar file "logs.tar".
2.  List the contents of the tar archive into standard output.
3.  Using gzip, compress the tar file.
4.  Extract the contents of the "logs.tar.gz" directory into /root/var/log.
5.  Using star, create an archive of the contents of the newly-created log directory in /root/var/log into a file called "user-logs.tar". Be sure to preserve the entire path structure so that the archive indicates exactly where the file belonged. i.e. /root/var/log should preceed every file in the archive.
6.  List the contents of the tar file.
7.  Compress the star archive into a bzip2 compressed file.
8.  Decompress the star archive into the /root home directory.


##################################################

1. While working in the user root's home directory, create a tar archive of the entire /var/log directory and name the tar file "logs.tar".
[root@localhost ~]# tar -cvf logs.tar /var/log


2. List the contents of the tar archive into standard output.
[root@localhost ~]# tar -tf logs.tar


3. Using gzip, compress the tar file.
[root@localhost ~]# gzip logs.tar


4. Extract the contents of the "log.tar.gz" directory into /root/var/log.
[root@localhost ~]# tar -zxvf logs.tar.gz


5. Using star, create an archive of the contents of the newly-created log directory in /root/var/log into a file called "user-logs.tar". Be sure to preserve the entire path structure so that the archive indicates exactly where the file belonged. i.e. /root/var/log should preceed every file in the archive.
[root@localhost ~]# yum install star
[root@localhost ~]# star -c /root/var/log f=user-logs.tar
star: 205 blocks + 0 bytes (total of 2099200 bytes = 2050.00k).


6. List the contents of the tar file.
[root@localhost ~]# star -t f=user-logs.tar


7. Compress the star archive into a bzip2 compressed file.
[root@localhost ~]# yum install bzip2
[root@localhost ~]# bzip2 user-logs.tar


8. Decompress the star archive into the /root home directory.
[root@localhost root]# star -bz -x f=user-logs.tar.bz2


##################################################
Exercise: Finding Files with locate and find
##################################################
Note: This lab can be completed using a LinuxAcademy.com Lab server of any distribution.

1.  Download and install the locate utility.
2.  Using the locate utility, search for the "motd" file on the system.
3.  Add a new user on the system called "mary".
4.  Using the find utility, remove all files owned by mary.
5.  Using the find utility, find all files that were modified in the last 3 days.


##################################################


1. Download and install the locate utility.
[root@anthony1 ~]# yum install mlocate


2. Using the locate utility, search for the "motd" file on the system.
[root@localhost ~]# locate motd
/etc/motd
...


3. Add a new user on the system called "mary".
[root@localhost ~]# useradd mary


4. Using the find utility, remove all files owned by mary.
[root@localhost ~]# find / -user mary -exec rm {} \;


5. Using the find utility, find all files that were modified in the last 3 days.
[root@localhost ]# find / -mtime -3


##################################################
Quiz: Understand and use essential tools
##################################################
1) Chown apache:apache -R /var/www recursively sets the owner to all files and directories under /var/www/ to apache and the group ownership to apache.

Correct

Correct answer
True

2) Which directory contains the info files from which the info program reads?

Correct

Correct answer
/usr/share/info

3) How would you append the text "service=on" to the /etc/motd file?

Correct

Correct answer
echo "service=on" >> /etc/motd

4) What command would you use to install the star utility?

Correct

Correct answer
yum install star

5) You need to set the execute bit on the finance directory and any subdirectories it might contain, but not on the files within them. This change must apply to all users. What methods might you use?

Correct

Correct answer
chmod a+X -R finance, chmod -R a+X finance

6) You need to search for man pages that relate to the postfix service. Which command will do this?

Correct

Correct answer
whatis postfix, apropos postfix

7) How would you dump the contents of the /var/log/messages file into standard output, grep for all lines that contain "Memory" and then redirect the grep'ed result to /home/user/log.txt?

Correct

Correct answer
cat /var/log/messages | grep -i memory > /home/user/log.txt


##################################################
Operate Running Systems
##################################################
##################################################
Lecture: Boot, Reboot and Shutdown a System
##################################################
#newer redhat systems use systemd for initialization of services

init 0 #run level zero, this stops the system, init is deprecated

reboot #reboot the system, shuts down the OS, goes through the grub initialization process, init ramfs, restarts all of the core services then hands it off to systemd

systemctl reboot

shutdown -P #poweroff
shutdown -r #reboot
shutdown -r +5  system going down for a reboot #reboot in 5 min and sends a message, uses wall to send a message
shutdown -c #this will cancel our reboot

shutdown -r 00:00 #reboot at 12am
#shutdown time is in 24hr clock

shutdown -r +0 #this means reboot now

systemctl halt #this will stop the system

halt #this does the same thing as shutdown -h

shutdown -h now #this halts now

#for the test the instructor would know the shutdown command

#targets are what the system navigates into and out of run levels

#the targets are located at /usr/lib/systemd

init 0 #this will halt the system

systemctl poweroff

poweroff


##################################################
Lecture: Boot Systems into Different Targets Manually
##################################################
systemd has replaced sysvinit

systemd allows us to boot services in parallel so it have faster boot times compared to sysvinit
systemd has paralyzation bootup

#the concept of run levels has been depreciated

all the processes for a graphical user interface are contained in one dependency group, unit configuration file

systemctl -t help #to see that the unit configuration files available

cd /usr/lib/systemd/system  #these are unit configuration file that are shipped with our configuration

vim sshd.service
[Unit]
Description=OpenSSH server daemon
Documentation=man:sshd(8) man:sshd_config(5)
After=network.target sshd-keygen.service
Wants=sshd-keygen.service

[Service]
Type=notify
EnvironmentFile=/etc/sysconfig/sshd
ExecStart=/usr/sbin/sshd -D $OPTIONS
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure
RestartSec=42s
RestartPreventExitStatus=255

[Install]
WantedBy=multi-user.target

#to list target dependencies
systemctl list-dependencies multi-user.target

#all a target is is a grouping of configuration files

#4 common targets
multi-user.target #text based interface
graphical.target
emergency.target  #Boots us into a root command prompt and it mount s the file system as a read only file system
rescue.target  #launches into single user environment with the minimum requirements loaded inorder for use to trouble shoot and fix issues

#to switch between targets
systemctl isolate multi-user.target


#set the default target
systemctl set-default <target_name>

########### You need to pay attention to this, you need to memorize how to do this ######################
#get your current default
systemctl get-default

reboot

#interrupt the boot process

#press E to edit the selected item

#browse until you see the linux16 line, this is the kernel command line
#goto the end of this line and add:
systemd.unit=rescue.target

#now hit ctrl X to continue the boot process
#ctrl D to continue


##################################################
Lecture: Interrupt the Boot Process to Gain Access to a System
##################################################
#below is how we will change the root password if we loose it
#reboot system
#press any key to interrupt the boot process, highlight the kernel that you want to boot into and press the 'e' key

#we are going to interrupt the boot process and enter in the init ram debug shell

#find the linux16

#after the utf-8 append rd.break, press ctrl+x, this will continue the boot process

#now we are in our initramfs

ls

mount -oremount,rw /sysroot

cd /sysroot

chroot /sysroot #this is called a local jail

passwd
#new password

#because we are in /sysroot, we have not loaded selinux yet, so when we modified our /etc/passwd using the passwd command, we actually changed the context of selinux, the context of our files tells selinux who has permissions to view and execute certain items, because of this we need to relabel all our files when the system boots up next
#To have a relabel execute on boot we just have to make that file exist.  If we dont do this our password change will have not been successful

touch /.autorelabel #selinux will now relabel our files

exit
exit
#now it will reboot the system

##################################################
Lecture: Identify CPU/Memory Intensive Processes, Adjust Process Priority and Kill Processes - Part 1
##################################################
#pgrep and pkill

ps #to find process running on the system

pgrep gnome #this will list the process id
pgrep gnome -l #this will list id and the process name

yum install httpd

systemctl start httpd

pgrep httpd
pgrep httpd -l

vim test

#in another terminal

pgrep -u user -l  #this will list all the processes that the user user is running

pgrep -u user -l vim  #this will find the vim process

pgrep -v -u root -l #this means list all processes not owned by the root user, -v means inverse

pkill <process_name>

pkill httpd
pgrep httpd

#kill signals
kill -l #this will list all of the available signals

sigterm means kill the process cleanly, its a nice kill signal, that the process do what it needs to then stop

pkill -15  #its generally the best way to kill a program

pkill -9 #this means kill the process, kill it now, sigkill

pkill -SIGKILL  #there is no way you can block that signal, it is not recommended because processes dont terminate cleanly

kill -SIGHUP  #like closing a terminal signal, means hang up, like closing a termial window

SIGINT #ctrl+c #means keyboard interrupt

SIGQUIT #

kill -SIGTERM

SIGCONT  #stop and start the process again

SIGSTOP  #stop the process

SIGTSTP #this sends a stop that can be ignored

#to kill the the programs a user is using, we are going to cleanly boot a user from the system
w #to get the users pts number

#this will kill all processes that the user has started
pkill -t pts/1 #this will close all of the users programs that they launched from a terminal window, the user will still be connected because sshd isnt launched from a terminal window

pkill -u joe sshd #this will boot the user off the system


##################################################
Lecture: Identify CPU/Memory Intensive Processes, Adjust Process Priority and Kill Processes - Part 2
##################################################
#a simple script to send it to the command line
(while true; do echo -n "My Program" >> ~/output.file; sleep 1; done) &

jobs #see what processes are running in the background

kill -SIGSTOP %1  #to stop the job
jobs

kill -SIGCONT %1  #to continue the job
jobs

kill %1  #we will see that the process has been terminated

#######
systemctl start httpd

ps #display processes started by this user for this terminal session

#man the ps command
#ps without the '-' infornt of the flag is bsd style syntax

ps aux #dump all processes with user

kill <pid>  #default signal is -15

#when we kill a process like httpd if we dont kill the parent process a new process will spawn, pkill is better suited for this

pkill httpd

####
ps auo pid,comm,nice  #these are header options

ps axo pid,comm,nice  #these are what header options to pull #this will give use the pid, the command that started the process and nice level

ps -u root  #this will show all processes owned by the user root

w  #to see what users are on the system

ps -aux | grep pst/1  #to get the the processes started by that user

kill -9 <pid>  #to kill the users bash session

##################################################
Lecture: Identify CPU/Memory Intensive Processes, Adjust Process Priority and Kill Processes - Part 3
##################################################
ps axo pid,comm,nice | grep httpd

-20  #the most favorable niceness, the highest priority
19  #the least favorable niceness
#The default niceness for processes is inherited from its parent process and is usually 0

#it gives the process priority to cpu utilization, but this is really just a suggestion for the linux kernel, it doesnt always abide by it exactly.
#it give us the abilty to make a process complete faster

dd if=/dev/zero of=/root/test.file bs=1M count=1024  #we are going to create a 1GB size file
cd /root  #we can see that the file has been created

ps axo pid,comm,nice | grep httpd  #we can see that httpd is running with a nice priority of 10



nice -n 0 httpd  #this will start the httpd service with a nice level of 0

systemctl stop httpd

pgrep httpd  #we can see that there are still processes running

pkill -9 httpd  #this will kill every httpd process

nice -n 0 httpd  #this will start the httpd service with a nice level of 0, every other process that our httpd program start will have this niceness

ps axo pid,comm,nice | grep httpd

#renice is used if you want to change the niceness but you dont want to stop the process and boot the users to do it

renice -n 10 2879  #this will change the nice level for 1 httpd process

renice -n 10 $(pgrep httpd)  #this will pass all of the httpd processes to renice, this is hoing to renice and the subshell is going to grep for all of the httpd processes and pass is back to our nice command

ps axo pid,comm,nice | grep httpd | xargs renice -n 10  #this will do the samething as the above command

#####
dd if=/dev/zero of=/root/test.file bs=1M count=1024 #this will create a 1GB file

time nice -n 19 tar -cvf test.tar test.file  #lowest priority

time nice -n -20 tar -cvf test.tar test.file #highest priority

#one thing to remember is that only privileged users have the ability to give a process more favor
#a regular user can decrease the favorability, but not increase

##################################################
Lecture: Identify CPU/Memory Intensive Processes, Adjust Process Priority and Kill Processes - Part 4
##################################################
w #show users logged in, number of users logged in, system load average and uptime

uptime                                ##past 60 sec  5min   15min  ####  this shows use the percentage of cpu processing being used
17:11:26 up  2:44,  2 users,  load average: 0.00, 0.01, 0.05   #number of users logged in, system load average and uptime



cat /proc/cpuinfo  #to find the number of cpu

#on a physical server
egrep -c '(vmx|svm)' /proc/cpuinfo

(while true; do echo -n "my program"  >> ~/output.file; done) &  #this should steadily start to increase our cpu utilization

#how to calculate load

cat /proc/cpuinfo | grep "model name" | wc -l  #we can get the number of processors because each one will have a model name

#we are doing this again, the instructor switched to his physical server because the lab server over utilized its cpu
(while true; do echo -n "my program"  >> ~/output.file; done) &  #this should steadily start to increase our cpu utilization

#now we can use the w command or uptime, get the load for the last 60 seconds and divide that by the number of cpu on the system

#Example:
.38/2  #the load from 60 sec divided by the number of cpu
2.19/2  #we can see that now we are using more than 100% of our processor

#we want to kill the job
job  #to get the job numbers

kill %1
kill %2  #etc till they killed

cpuload/number of processors


#####top command  #with this command we can see what process is using a lot of processing on our system
m #toggle memory
t #task
l #uptime
B  #bold

#the RES column is the non swap physical memory our process is using
#the SHR column is the shared memory size, which is the amount of shared memory available to a task
#the NI column is the processes niceness level

r #will give us the ability to renice a process while in top, then enter in the pid, then top will ask for the nice level that we want to set
N  #this will sort the processes by memory used
k #then enter in the pid to kill the process

top -n 2  #this means update this number of times and quit top

top -d 2 #this will set the number of seconds between top updates

##################################################
Lecture: Locate and Interpret System Log Files and Journals
##################################################
cd /var/log  #where or system logs are located

tail -f #this will show us the last 10 logs and it will follow the log and output any new logs

head -n 20 #this will out put the first 20 lines of a log

tail -n 20  #to view the last 20 lines of a message

#journeld logs all events on our system

systemd-journald  #systemd-journald is a system service that collects and stores logging data. It creates and maintains structured, indexed journals
       based on logging information that is received from a variety of sources:

       ·   Kernel log messages, via kmsg

       ·   Simple system log messages, via the libc syslog(3) call

       ·   Structured system log messages via the native Journal API, see sd_journal_print(4)

       ·   Standard output and standard error of system services

       ·   Audit records, via the audit subsystem

journalctl #to view the logs that systemd-journald has collected, everything thats in our journal daemon, journald is not persistent and is created out on reboot

#When we reboot the contents of our journald are removed

#for journald to be persistant, to maintain persistant storage
vim /etc/systemd/journal.conf
#uncomment
Storage=auto

:wq

systemctl restart systemd-journald.service



#when its not persistant the logs are stored in /run/log/journald
#when its persistant the logs are stored in /var/log/journal

#everything that would go into a system log will go to our journal log

journalctl -n  #this will show use the last 10 lines of events

journalctl -xn  #x provides more information, it provides additional information text from the message catalog, if they are available

journalctl -f #this will show use the last 10 lines of the file and its going to continue following

#this is just to create loggging
systemctl restart httpd
systemctl status httpd  #at the end of the status we will see some of the logs from journald, as it relates to that specific service

journalctl _SYSTEM_UNIT=httpd.service  #we can use journalctl for any unit system configuration file
journalctl _SYSTEM_UNIT=something.socket

/usr/lib/systemd  #this is where our unit configuration files are located
also
systemctl -t help


#if you dont remember where our unit configuration types are available are they are in /usr/lib/systemd
#we can also do:
systemctl -t help

vim /etc/rsyslog.conf  #the logging service used to create the logging
#in the rsyslog.conf some login has system priority

#in rsyslog.conf the first part is called the facility, the type of program that is grating the log is called the facility, the facility is how we define what log files go where

journalctl -p info  #this will show us everything that has gone through rsyslog to write to a regular log file that has the priority of info

journalctl --since=yesterday  #this will show all log files since yesterday


#this shows us information about our boot process
systemd-analyze blame  #systemd-analyze may be used to determine system boot-up performance statistics and retrieve other state and tracing information from the system and service manager, and to verify the correctness of unit files.

blame #will show us how long each unit configuration took and what unit configuration files are configured


##################################################
Lecture: Access a Virtual Machine's Console
##################################################
#to access the console we need to use the gui, but to stop and start virtual machines we can do that from the command line

applications > systemtools > virtual machine manager > double click on the running machine




##################################################
Lecture: Start and Stop Virtual Machines
##################################################
#open a terminal
virsh "enter"
help #this will list all of the available commands

list --all  #this will list all of the virtual machines, stopped virtual machines as well

list  #will list only the running machines

shutdown <vm_name>  #the virtual machine is also referred to as a domain

start client

list #you will see that its running

virt-manager #this is what the virt manager program is named, if you want to launch virst manager from the command line enter this in th terminal


##################################################
Lecture: Start, Stop and Check the Status of Network Services
##################################################
systemctl list-units | grep network

systemctl restart network.service #if we add .service to the command, default is  to assume .service
systemctl is-enabled network #to check the status

systemctl status httpd
systemctl enable httpd
systemctl status httpd
systemctl is-enabled httpd
systemctl start httpd
systemctl status httpd

##################################################
Lecture: Securely Transfer Files Between Systems
##################################################
#####scp and sftp

scp filetotransfer user@hostip:/home/user

scp filetotransfer user@hostip:~/dir1

#scp uses port 22, scp=secure copy protocol

#####
sftp   #we need openssh installed, uses port 22
ftp   #uses port 21 which is a plain text port

sftp user@remoteip
#we are now in sftp
? #will list all available commands, we can generally use commands like we are on our local machine

get filename  #you will have downloaded it to your machine

put filename #this will put the file on the remote machine


##################################################
Exercise: Working with Systemd and Targets
##################################################
1.  Install the httpd package.
2.  View all active targets on the system.
3.  View all targets installed on the disk.
4.  Display the current default target.
5.  Change the default target to the multi-user target if the multi-user target is available.
6.  View all available systemd configuration units.
7.  Find the status of the sshd service.
8.  List all active service unit configuration files.
9.  Determine if the httpd service is active.
10.  Determine if the httpd service is enabled, and, if it is not, enable it.
11.  View enabled and disabled settings for all units of the type "service".
12.  List all service unit configuration files, whether they are active or not.

##################################################


1. Install the httpd package.
[root@localhost]# yum install httpd

2. View all active targets on the system.
[root@localhost]# systemctl list-units --type=target

3. View all targets installed on the disk.
[root@localhost]# systemctl list-units --type=target --all

4. Display the current default target.
[root@localhost]# systemctl get-default

5. Change the default target to the multi-user target if the multi-user target is available.
[root@localhost]#  systemctl list-units --type=target | grep multi-user.target
multi-user.target   loaded active active Multi-User System
root@localhost]# systemctl set-default multi-user.target

6. View all available systemd configuration units.
[root@localhost]# systemctl -t help

7. Find the status of the sshd service.
[root@localhost]# systemctl status sshd.service

8. List all active service unit configuration files.
[root@localhost]# systemctl --type=service
or
[root@localhost]# systemctl list-units --type=service

9. Determine if the httpd service is active.
[root@localhost]# systemctl is-active httpd

10. Determine if the httpd service is enabled, and, if it is not, enable it.
[root@localhost]# systemctl is-enabled httpd

11. View enabled and disabled settings for all units of the type "service".
[root@localhost]# systemctl list-unit-files --type=service --all

12. List all service unit configuration files, whether they are active or not.
[root@localhost]# systemctl list-units --all
OR
[root@localhost]# systemctl list-units --type=service --all


##################################################
Exercise: Recovering the Root Password
##################################################
1.  Interrupt the boot process to gain access to the system and reset the root password. Hint: You need to edit through the GRUB menu.


##################################################

1. Start or reboot a system to get into the boot menu.

2. Press any key to stop the auto selection of a menu item.

3. Ensure the kernel you intend to boot into is highlighted and press the E key to edit the entry.

4. Navigate to the "linux16" kernel line and hit the End key to go to the end of the line.

5. Append rd.break to the linux16 kernel line.

6. Hit Ctrl + X to continue.

7. The system boots into an emergency mode that has the /sysroot directory mounted as read only.

8. Mount the /sysroot directory with read and write permissions.
mount -oremount, rw /sysroot

9. Switch into chroot jail and set the /sysroot as the root file system.
chroot /sysroot

10. Reset the root password.
passwd root

11. Clean up. Make sure that all unlabled files get relabeled during the boot process for SELinux.
touch /.autorelabel

12. Exit chroot jail.
exit

13. Exit the initramfs debug shell.
exit

Troubleshooting Notes

If the password did not change after reboot:
The touch /.autorelabel command was missed or performed incorrectly.
The file system was not mounted as read/write so the changes made were not persistent.


##################################################
Exercise: Interrupting the Boot Process to Change the Boot Target
##################################################
1.  Start the system and boot into the initial command. (This works by also just turning on the machine).
2.  Reboot the system and at the GRUB menu hit E to enter into edit mode.
3.  Modify the "Linux Kernel" line to instruct the system to boot into the rescue target.

##################################################

1. Start or reboot a system to get to the boot menu.

2. Press any key to stop the auto selection of a GRUB item.

3. Ensure the kernel you intend to boot into is highlighted and press the E key to edit the entry.

4. Navigate to the "linux16" kernel line and hit the End key to go to the end of the line.

5. Append the new target to the linux16 kernel line.
systemd.unit=rescue.target

6. Continue booting into the system with Ctrl + X.


##################################################
Exercise: Powering Off Systems
##################################################

1.  Using the shutdown command, schedule a shutdown for five minutes from now and notify all users on the system of the shutdown.
2.  Using the shutdown command, reboot the machine immediately without delay.
3.  Using systemctl, shutdown the system.
4.  Schedule the system for a shutdown at 1:00 A.M. in the morning.
5.  Cancel the scheduled 1:00 A.M. shutdown.
6.  Using systemctl, reboot the the system.
7.  Using any method of your choice, power off the system.


##################################################


1. Using the shutdown command, schedule a shutdown for five minutes from now and notify all users on the system of the shutdown.
[root@localhost]# shutdown +5 shutdown messages goes here

2. Using the shutdown command, reboot the machine immediately without delay.
[root@localhost]# shutdown -r now
[root@localhost]# shutdown -r

3. Using systemctl, shutdown the system.
[root@localhost]# shutdown now
or
[root@localhost]# shutdown +0
Alternatively, not using the shutdown command:
[root@localhost]# init 0
[root@localhost]# systemctl halt

4. Schedule the system for a shutdown at 1:00 A.M. in the morning.
[root@localhost]# shutdown 01:00

5. Cancel the scheduled 1:00 A.M. shutdown.
[root@localhost]# shutdown -c

6. Using systemctl, reboot the the system.
[root@localhost]# systemctl reboot

7. Using any method of your choice, power off the system.
[root@localhost]# systemctl halt
[root@localhost]# systemctl poweroff
[root@localhost]# shutdown -P
[root@localhost]# init 0


##################################################
Exercise: pgrep, pkill, kill and jobs
##################################################
Exercise 1
1. As the root user, create a job running in the background of your current terminal. Execute the following script for that program process to be created:

(while true; do echo "My program" > ~/output.file; done) &
2. View the current jobs running in the background of your terminal.

3. Stop the process from running, without killing the process, using the kill command.

4. View the stopped jobs in the background.

5. Start the process again using the kill command.

6. Kill the process without allowing any blocking of the kill command.

Exercise 2
1. Download and install the httpd service.

2. Start the httpd service (or ensure that it is running).

3. As the root user, grep for all processes that are running as the root user and display the process names.

4. As the user user, start the vi program at the terminal.

5. As the root user, in your second terminal window, grep for all processes running under the user "user" and include the process names.

6. As the root user, grep for the "httpd" process.

7. As the root user, kill all of the "user" user's processes and boot that user from the system.


##################################################


Exercise 1

1. As the root user, create a job running in the background of your current terminal. Execute the script for that program process to be created.
[root@localhost]# (while true; do echo "My program" > ~/output.file; done) &

2.View the current jobs running in the background of your terminal.
[root@localhost ~]# jobs
[1]-  Running   ( while true; do< echo -n "My program" >> ~/output.file; done ) &

3. Stop the process from running, without killing the process, using the kill command.
[root@localhost]# kill -SIGSTOP %1 (%1 is the job number, if the job was 2 it would be %2)

4. View the stopped jobs in the background.
[root@localhost ~]# jobs
[1]+  Stopped     ( while true; do echo -n "My program" >> ~/output.file; done ) &

5. Start the process again using the kill command.
[root@localhost]# kill -SIGCONT %1

6. Kill the process without allowing any blocking of the kill command.
[root@localhost]# kill -SIGKILL %1

Exercise 2

1. Download and install the httpd service.
[root@localhost]# yum install httpd

2. Start the httpd service (or ensure that it is running).
[root@localhost]# systemctl start httpd

3. As the root user, grep for all processes that are running as the root user and display the process names.
[root@localhost]# pgrep -u root -l

4. As the user user, start the vi program at the terminal.
[user@localhost]# vi

5. As the root user, in your second terminal window, grep for all processes running under the user "user" and include the process names.
[root@localhost ~]# pgrep -u user -l
3690 dconf-service
3694 vim
...etc additional output cut off.

6.As the root user, grep for the "httpd" process.
[root@localhost]# pgrep httpd

7. As the root user, kill all of the "user" user's processes and boot that user from the system.
[root@localhost ~]# w
 14:15:59 up 20:55,  4 users,  load average: 0.00, 0.01, 0.05
USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT
user pts/0     Mon22    2:58m  0.05s  0.05s bash
[root@localhost ]# pkill -t pts/0
This kills every process started from the user's terminal, but it does not boot the user. Now find all running processes left, which should either be Bash or SSH.
[root@localhost]# pgrep -u user
[root@localhost]# pkill -u user ssh



##################################################
Exercise: nice, renice and ps
##################################################
1.  Ensure that you have the httpd package installed on the system.
2.  Ensure the httpd service is not running.
3.  Start the httpd service with the most favorable nice possible.
4.  View the current nice of the httpd service using the ps command and grep command together.
5.  Renice all httpd processes and set the nice level to 0.



##################################################

1. Ensure that you have the httpd package installed on the system.
[root@localhost]# yum install httpd

2. Ensure the httpd service is not running.
[root@localhost]# systemctl stop httpd

3. Start the httpd service with the most favorable nice possible.
[root@localhost]# nice -n -20 httpd

4. View the current nice of the httpd service using the ps command and grep command together.
[root@localhost]# ps axo pid,comm,nice | grep httpd
or
[root@localhost]# ps axo pid,comm,nice --sort=-nice | grep httpd
This allows you to sort by nice level.

5. Renice all httpd processes and set the nice level to 0.
[root@localhost]# renice -n 0 $(pgrep httpd)


##################################################
Exercise: Monitoring and Calculating CPU Load Averages
##################################################
1.  View the system uptime and load average.
2.  View the system uptime and load average in such a way that it also shows what users are logged in to the system and what the user is doing.
3.  Using the proc file system and wc, display the number of processors your system has. This is important to calculate the load average of the system.
4.  Calculate the 1, 5, and 15 minute CPU load averages for the system.


##################################################

1. View the system uptime and load average.
[root@localhost ~]# uptime
 09:53:07 up 16:32,  3 users,  load average: 1.02, 1.00, 0.69

2. View the system uptime and load average in such a way that it also shows what users are logged in to the system and what the user is doing.
[root@localhost ~]# w
 09:53:37 up 16:33,  3 users,  load average: 1.01, 1.00, 0.70
USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT
user  pts/1     09:18    1.00s  0.10s  5.32s /usr/libexec/gnome-terminal-server

3. Using the proc file system and wc, display the number of processors your system has. This is important to calculate the load average of the system.
[root@localhost]# grep "model name" /proc/cpuinfo | wc -l

4. Calculate the 1, 5, and 15 minute CPU load averages for the system.
There are two processes as a result of our previous command.
[root@localhost ~]# grep "model name" /proc/cpuinfo | wc -l
2
For each, processor 1 is 100%. If you have 1 processor and your load average is 1.2 then your load is greater than 100%. If you have 2 processors and your load is 2 then your load is 100%.
[root@localhost ~]# uptime
 09:42:20 up 16:21,  3 users,  load average: 1.04, 0.72, 0.35
Per CPU load average calculation formula: load average / # of cpu
Per CPU load average calculation 1 Minute load average: 1.04 / 2 = 52%
Per CPU load average calculation 5 Minute load average: .72 / 2 = 36%
Per CPU load average calculation 15 Minute load average: .35 / 2 = 17.5%


##################################################
Exercise: Working with top
##################################################
Set up: On the command prompt, start the following script:

[root@localhost]# (while true; do echo -n "my program" >> /dev/null; done;) &

1.  On a LinuxAcademy.com lab server start the top program.
2.  The top program shows all running processes on the system but sorts them. Using your keyboard, browse up and down to view the processes.
3.  Sort all processes by memory percentage.
4.  Sort all processes by CPU usage.
5.  Renice the process for the script started at the beginning of the exercise. The command is  "bash", as displayed in the top program. Set the nice level to -20.
6.  Kill the bash script using top.

##################################################


1. On a LinuxAcademy.com lab server start the top program.
[root@localhost]# top

2. The top program shows all running processes on the system but sorts them. Using your keyboard, browse up and down to view the processes.
Use the keyboard up and down arrows to navigate

3. Sort all processes by memory percentage.
Press "Shift" + "M"

4. Sort all processes by CPU usage.
Press "Shift" + "P"

5. Renice the process for the script started at the beginning of the exercise. The command is  "bash", as displayed in the top program. Set the nice level to -20.
Press the "R" key, enter the process id of the process you want to renice, and set the nice level.

6. Kill the bash script using top.
Press the "K" key and enter the process ID of the process you wish ti kill, then press enter.

##################################################
Hands-on Lab: Kill or Adjust Process Priorities
##################################################
1. Create a file with the following command:


dd if=/dev/urandom of=testfile count=20 bs=1024k

2. Create a file called cputest.sh with the following code:


#!/bin/sh
i=0
while [ 1 ]
do
md5sum testfile
i=`expr $i + 1`
echo "Iteration: $i"
done

3. Make the script executable:


chmod 755 cputest.sh

4. Run the command:


sh ./cputest.sh

#we can see the program running in top
# we can kill the script with
kill <pid>

or

killall <script_name>

#change the priority of the test
nice -12 ./cputest.sh

#to change the priority of a running script
renice 16 -p <pid>

sudo renice -16 -p <pid>  #or  the root user has to do it


##################################################
Exercise: Virtual Machines
##################################################
1. Download and install the proper packages to manage virtual machines on a Red Hat 7 machine. Ensure you install the GUI as well as the command line interface.
[root@localhost]# yum install virt-manager qemu-kvm qemu-img libvirt libvirt-python python-virtinst libvirt-client
or
[root@localhost]# yum grouplist hidden // This will show virtualization packages
[root@localhost]# yum groupinstall "Virtualization Client"
[root@localhost]# yum groupinstall "Virtualization Tools"
[root@localhost]# yum groupinstall "Virtualization Platform"
Note: This can prevent you from having to memorize packages or as a backup in the exam if you forget the packages required.

2. Ensure that the virtual machine services start when the system boots and is currently running.
[root@localhost]# systemctl start libvirtd
[root@localhost]# systemctl enable libvirtd
Tip: In the exam, if you have to start a service, ALWAYS enable the service.

3. Create a CentOS-based virtual machine using the GUI.
[root@localhost]# virt-manager

4. Configure the virtual machine to auto start whenever the system starts.
[root@localhost]# virsh
[root@localhost]# virsh autostart vmname
or, at the virsh commandline:
Virsh # autostart vmname

5. Reboot and test the configuration.
[root@localhost]# reboot

##################################################
Quiz: Operate running systems
##################################################
1) -20 is the most favorable for a given process.

Correct

Correct answer
True

2) Which man page shows specific configuration options for a service unit configuration?

Correct

Correct answer
man systemd.service

3) How do you find all man pages associated with systemd?

Correct

Correct answer
apropos systemd

4) The command systemctl set-default sets the default target for the system at boot time.

Correct

Correct answer
True

5) Which command(s) would list all service unit configuration files regardless of whether they are active or not?

Correct

Correct answer
systemctl --type=service --all

6) How do you view the disabled/enabled settings of all units with the type "service"?

Correct

Correct answer
systemctl list-unit-files --type=service

7) Which command(s) would perform a reboot on the system?

Correct

Correct answer
systemctl reboot, reboot, shutdown -r

8) Which command(s) would reboot the system five minutes from now and notify all users on the system of the impending reboot?

Correct

Correct answer
shutdown -r +5 rebooting!

9) How can you list the active state of all loaded service unit configuration files?

Correct

Correct answer
systemctl list-units --type=service

10) Systemctl halt shuts down and halts the system.

Correct

Correct answer
True

11) Which command(s) would list unit configuration files that are dependencies for the network target?

Correct

Correct answer
systemctl list-dependencies network.target

12) Which man page shows information about unit configuration files and their locations?

Correct

Correct answer
systemd.unit

13) How can you list all failed service unit configuration files?

Correct

Correct answer
systemctl --failed --type=service

14) What line in the bootloader entry do you need to edit after interrupting the boot process to change the current boot target?

Correct

Correct answer
linux16

15) Which command(s) would show all available targets on the system?

Correct

Correct answer
systemctl list-unit-files --type=target

16) Which "niceness" is the least favorable for a process?

Correct

Correct answer
19

17) Which command(s) would power off the system?

Correct

Correct answer
poweroff, systemctl poweroff, shutdown -P

18) Which command(s) would move the system into the graphical.target?

Correct

Correct answer
systemctl isolate graphical.target

19) What is the percentage load average for the following processor count and given load for the 5 minute load average? [root@localhost]# uptime 09:55:50 up 16:35, 3 users, load average: 4.05, 3.03, 3.75 [root@localhost ~]# grep "model name" /proc/cpuinfo | wc -l 5

Correct

Correct answer
60%

20) Which command creates or updates the manual page index caches; something you should run after installing new man pages?

Correct

Correct answer
mandb

21) As part of the application build-out on your Red Hat 7 Enterprise system, you have a process that is running backend maintenance tasks. These maintenance tasks are not important and shouldn't take priority over other tasks on the system. How might you tell the system to assign CPU usage to this process only after other higher priority items have been completed or only if they do not need the CPU?

Correct

Correct answer
Set the nice priority to 19 on the process using renice, nice or top.

22) Where are the configuration files for systemd located?

Correct

Correct answer
/usr/lib/systemd/system, /etc/systemd/system

23) Which command(s) display available systemd unit types?

Correct

Correct answer
systemctl -t help

24) Which command displays all available kill signals?

Correct

Correct answer
kill -l

25) If your system is currently in the graphical.target, which command(s) would move it out of the graphical.target and into the multi-user.target?

Correct

Correct answer
systemctl isolate multi-user.target

26) Only a privileged user can run a process with lower niceness.

Correct

Correct answer
True




##################################################
Configure Local Storage
##################################################
##################################################
Lecture: List, Create and Delete Partitions on MBR and GPT Disks
##################################################
#MBR based device can only have 4 primary partitions, each partition can only be 2TiB max, 32 bit based

#GPT runs on a uefi device, 128 primary partitions, each partition can be as large as 8ZB, 64 bit based

#Mount a drive to the lab vm

cd /dev  #this is where we can see attached devices

#fisk is the tool we use to manage MBR based partition

#the first sector is where our disk starts, by default its 2048, the beginning of a hard drive is reserved for mbr information about the disk
#to zero a mbr dd if=/dev/zero of /dev/sdb bs=512 count=1
dd if=/dev/zero of /dev/sdb bs=512 count=1

fdisk /dev/xvdf
m
n
enter
enter
#specify the last sector
+500M

#change partition system id
l #to list partition types
t
83  #this is generic linux partition type
w #write the changes to disk

ll #we can now see that we have a new partition /dev/xvdf1

#we have more space left on the device, we can create another partition
fdisk xvfd
n
enter
enter
enter
enter
+500M
w

ls #now we can see both partitions xvdf1 and xvdf2

#now we need to format the partitions with a file system
mkfs -t xfs xvdf1  #redhat likes use to use xfs

df -h

blkid  #this will list available block storage devices

mkdir /mnt/mymount
mount /dev/xvdf1 /mnt/mymount  #we can now start writing data to the mounted device

umount /mnt/mymount #to anmount the device

mount /dev/xvdf1 /mnt/mymount

##delete a partition
fdisk xvdf
d
2 #to delete the second partition
w

####Best practice after we do anything with a partition is to run partprobe
partprobe  #reloads partition information from our proc dir

###

umount /mnt/mymount
#if we use the uuid we will guarentee that we are getting the correct device
blkid

mounmt --help

mount -U <block_id> /mnt/mymount

#####GPT partitions
#two tools to create GPT based partitions
parted
gdisk  #use gdisk on the exam because its more straight forward

gdisk /dev/xvdf
?
n
enter
enter
+500M #last sector
l #show partition tables
8300
w
y

ls #we can now see the new partition

mkfs -t xfs xvdf1

mkdir /mnt/mymount
mount /dev/vxdf1 /mnt/mymount

blkid

mount -U <blkid>


### to delete a partition
umount /mnt/mymount
gdisk /xvdf
d
w

ls #we see that we no longer have the partition


##################################################
Lecture: Create and Remove Physical Volumes, Assign Physical Volumes to Volume Groups and Create and Delete Logical Volumes
##################################################
Using the live lab, its lower in the lessons but the same section

a label is placed on the first part of the volume that provides metadata about that volume, it is placed in the second 512 sector on the physical volume,
you can have multiple copies on the metadata
once you configure the number of copies you can not change it
the first copy is stored at the beginning of the device but the second copy is stored at the end on the device, its stored at the end because this helps protect of accidental over writing of the data

lvm works by creating a virtual storage layer on top of physical devices

extents #is the smallest unit of storage

logical volumes are allocated into logical extents, that are the same size as the physical extents, it maps to it, that sis how the logical volume communicates to the physical volume data

#the first thing we are going to do
gdisk xvdf
n
enter
enter
8e00  #linux lvm
w

gdisk xvdg
n
enter
enter
8e00
w

#now we need to define our physical volumes for lvm

pvcreate /dev/xvdf1  /dev/xvdg1

pvdisplay #to view all of our available volumes

#now we need to create a volume group
vgcreate battlestar /dev/xvdf1 /dev/xvdg1

vgdisplay

lvcreate -n galactica -L 10G battlestar    #L means size, l means extents

lvdisplay

xfs can only be increased not decreased
ext4 can be increased and decreased

lvcreate -n galactica -L 5G battlestar

mkfs -t xfs galactica

mkdir /mnt/mymount

mount /dev/battlestar/galactica /mnt/mymount

umount /mnt/mymount

lvdisplay

###remove logical volume
lvremove /dev/battlestar/galactica

###Remove volume group
vgdisplay

vgremove battlestar

pvremove /dev/xvdg1 /dev/xvdf1


##################################################
Lecture: Configure Systems to Mount File Systems at Boot by UUID or Label
##################################################
cd /dev
fdisk xvdf
n

p

+500M
n
p

+500M
w
#now we have 2 partitions

mkfs -t xfs xvdf1
mkfs -t ext4 xvdf2

blkid

#create a lable on a xfs file system
xfs_admin -L filesystem1 /dev/xvdf1
xfs_admin -l /dev/xvdf1 #this will show us the label

#Create a label on our ext4 file system
e2label
or
tune2fs  #use this because the flags are the same as on our xfs_admin tool
tune2fs -L filesystem2 /dev/xvdf2
tune2fs -l /dev/xvdf2 #this will show use the label

#Now we want to create persistent mounts on our system
vim /etc/fstab
#the columns are space separated, they do not have to line up
#man fstab #look at the mount options

UUID=<UUID_ofdevice> /mnt/mount1  xfs defaults 1 2

:wq

mkdir /mnt/{mount1,mount2}

mount -a

####mount with a file system label
vim /etc/fstab
LABEL=filestystem2  ext4  defaults 1 2

:wq

mount -a


##################################################
Lecture: Add New Partitions and Logical Volumes and Swap to a System Non-Destructively
##################################################
#use the test instance from start the self paced  Creating Swap Space from a LVM Volume, because it has multiple disks attached to it

#we are going to create a LVM swap space as well as a regular disk swap space

cd /dev  #we can see that we have 3 disks attached top our device

#we are going to create a logical volume

#we are going to use the xvdf disk as our logical volume

free -m  #this will show us our available physical memory and our available swap disk

#the kernel will only move processes to swap if they are using idle amounts of memory,

#how much swap to use, its best practice to use 2-2.5 times your total free memory

#create a partition, we are going to use all of the disk
fdisk xvdf
p
enter
enter
l
t
8e
w

#now we need to create the physical volume
pvcreate /dev/xvdf1

#show the physical volumes
pvdisplay

#we cant create a logical volume without a volume group
#create a volume group
vgcreate battlestar /dev/xvdf1

#show the volume groups
vgdisplay

#now we can create our lvm
lvcreate -n swap -L 2G battlestar

#show the logical volume
lvdisplay

#prepare the logical volume to be our swap space, we need to do that by formatting it with a swap signiture
mkswap /dev/battlestar/swap   #this will give us the uuid to use in our fstab to mount

#we can issue the swap command or the mount command and it will temporarily add it to our system, how ever that doesnt make it persistent
#before we add it to fstab lets test if it works
swapon /dev/battlestar/swap

free -m

swapoff /dev/battlestar/swap

free -m

vim /etc/fstab
UUID=############  swap  swap 0 0 #the 0 0 means we dont want to dump or run fsck on our swap

:wq

swapon -a #to turn on all swap in our   /etc/fstab


#we have no learned how to add swap thats a logical volume, now lets learn how to do it as a regular device
cd /dev

fdisk xvdg
n
p
enter
enter
+3G
L
82
t
82
w

#now we need to formate the device to have a swap signature
mkswap /dev/xvdg1  #again this will give us our UUID

swapon /dev/xvdg1

free -m

swapoff /dev/xvdg1


#how do we make this persistant
blkid

#add the device to /etc/fstab
vim /etc/fstab
UUID=#########   swap swap  0 0

:wq

swapon -a

free -m

#to get information or status of our device
swapon -s

#you can also get the same information from /proc/swaps



##################################################
Hands-on Lab: Managing Logical Volumes on Red Hat Enterprise 7
##################################################
#to partition the disk
gdisk xvdf
n
use the default partition number
first sector
last sector
hex code 8e00 linux lvm
w

#repeat the steps for xvdg
gdisk xvdg
n
use the default partition number
first sector
last sector
hex code 8e00 linux lvm
w


#Initialize the disk
pvcreate /dev/xvdf1 /dev/xvg1

#create a volume group
vgcreate battlestar /dev/xvdf1 /dev/xvdg1

vgdisplay

#create the logical volume
lvcreate -n galactica -L 20G battlestar

lvdisplay

#viewing your work
cd battlestar
ll

#mounting the logical volume
mkfs -t xfs /dev/battlestar/galactica

mkdir /mnt/mymount
mount /dev/battlestar/galactica /mnt/mymount

df -h

#Extending logical volumes and groups
gdisk xvdj
n
use the default partition number
first sector
last sector
hex code 8e00 linux lvm
w

#run partprobe to register the new partition with the kernel
partprobe

#Create the physical volume
pvcreate /dev/xvdj1

#now we need to add it to the battle star group
vgextend /dev/xvdj1

vgdisplay

#expand the galactica logical volume
lvextend -L 59G /dev/battlestar/galactica

lvdisplay

#grow the file system
xfs_growfs /mnt/mydir

#to confirm
df -h




##################################################
Hands-on Lab: Add and Remove Volumes, Partition Disks, and Work with LVM
##################################################
ll /dev/xvd*

gdisk

yum install gdisk -y

gdisk /dev/xvdf
n
default
default
L
8e00  Linux LVM
w
y

gdisk /dev/xvdj
n
default
default
L
8e00  Linux LVM
w
y

#Create the physical volume
pvcreate /dev/xvdf1 /dev/xvdj1

pvdisplay

#Create the volume group
vgcreate log_vg /dev/xvdf1 /dev/xvdj1

vgdisplay

#create the logical volume
lvcreate -n log_lv -L 10GB log_vg

lvdisplay

#format the volume
mkfs -t ext4 /dev/log_vg/log_lv

#Make the mount point
mkdir /mnt/log_files

mount /dev/log_vg/log_lv /mnt/log_files

df -h

#Remove the logical volume
umount /mnt/log_files

lvremove /dev/log_vg/log_lv

vgremove log_vg

vgdisplay

pvremove /dev/xvdf1 /dev/xvdj1




##################################################
Exercise: Working with MBR Partitions
##################################################
1.  Start a Red Hat 7 lab server and mount a new disk. Once completed, log in to the system and navigate to the /dev directory.
2.  Create a primary Linux partition that is 500M in size on the attached disk.
3.  Set the partition type for a basic Linux volume.
4.  Write changes and exit.
5.  Issue the command to list the block device and its UUID.
6.  Create an XFS filesystem on the disk.
7.  Mount the partition to /mnt/mymount.
8.  Configure the disk to mount to the /mnt/mymount mount point automatically during system boot.


##################################################



1. Start a Red Hat 7 lab server and mount a new disk. Once completed, log in to the system and navigate to the /dev directory.
[root@localhost] cd /dev

2. Create a primary Linux partition that is 500M in size on the attached disk.
[root@localhost] fdisk xvdf

Command (m for help): n
Partition type:    p   primary (0 primary, 0 extended, 4 free)    e   extended Select (default p): p
Partition number (1-4, default 1):
First sector (2048-2097151, default 2048):
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151): +500M
Partition 1 of type Linux and of size 500 MiB is set
Command (m for help):

3. Set the partition type for a basic Linux volume.
Command (m for help): t
Selected partition 1 Hex code (type L to list all codes): 83
Changed type of partition 'Linux' to 'Linux' (notice the default is already Linux).

4. Write changes and exit.
Command (m for help): w
The partition table has been altered! Calling ioctl() to re-read partition table. Syncing disks.

5. Issue the command to list the block device and it's UUID (Universally Unique Identifier).
[root@localhost] blkid

6. Create an XFS filesystem on the disk.
[root@localhost] mkfs -t xfs /dev/xvdf1

7. Mount the partition to /mnt/mymount.
[root@localhost] mkdir /mnt/mymount
[root@localhost] mount /dev/xvdf1 /mnt/mymount
[root@localhost] df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda2      6.0G  3.9G  2.1G  65% /
devtmpfs        482M     0  482M   0% /dev
tmpfs          497M     0  497M   0% /dev/shm
tmpfs           497M   13M  484M   3% /run
tmpfs          497M     0  497M   0% /sys/fs/cgroup
/dev/xvdf1 497M   26M  472M   6% /mnt/mymount

8. Configure the disk to mount to the /mnt/mymount mount point automatically during system boot.
[root@localhost] blkid
/dev/xvdf1: UUID="" TYPE="xfs"
[root@localhost] vim fstab
UUID="your uuid here" /mnt/mymount xfs defaults 1 1
[root@localhost] umount /mnt/mymount
[root@localhost] mount -a
[root@localhost] df -h
Filesystem Size Used Avail Use% Mounted on
/dev/xvda2 6.0G 3.9G 2.1G 65% /
devtmpfs 482M 0 482M 0% /dev
tmpfs 497M 13M 484M 3% /run
tmpfs 497M 0 497M 0% /sys/fs/cgroup
/dev/xvdf1 497M 26M 472M 6% /mnt/mymount


##################################################
Exercise: Working with GPT Partitions
##################################################
1.  Start a Red Hat 7 LinuxAcademy.com lab server and "mount" a new disk. Once completed, log in to the system and navigate to the /dev directory.
2.  Create a primary Linux partition that is 500M in size on the attached disk and define the partition type during the create process.
3.  Write changes and exit.
4.  Issue the command to list the block device and its UUID.
5.  Create an XFS filesystem on the disk.
6.  Mount the partition to /mnt/mymount.
7.  Configure the disk to mount automatically during system boot to the /mnt/mymount mount point.


##################################################


1. Start a Red Hat 7 LinuxAcademy.com lab server and "mount" a new disk. Once completed, log in to the system and navigate to the /dev directory.
[root@localhost]# cd /dev

2. Create a primary Linux partition that is 500M in size on the attached disk.
[root@localhost]# gdisk xvdf
GPT fdisk (gdisk) version 0.8.6
Partition table scan:
  MBR: not present
  BSD: not present
  APM: not present
  GPT: not present
Creating new GPT entries.
Command (? for help): n
Partition number (1-128, default 1):
First sector (34-2097118, default = 2048) or {+-}size{KMGTP}
Last sector (2048-2097118, default = 2097118) or {+-}size{KMGTP}: +500M
Current type is 'Linux filesystem'
Hex code or GUID (L to show codes, Enter = 8300): 8300
Changed type of partition to 'Linux filesystem'

3. Write changes and exit.
Command (? for help): w
Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING
PARTITIONS!!
Do you want to proceed? (Y/N): Y
OK; writing new GUID partition table (GPT) to xvdf.
The operation has completed successfully.

4. Issue the command to list the block device and its UUID.
[root@localhost]# blkid

5. Create an XFS filesystem on the disk.
[root@localhost]# mkfs -t xfs /dev/xvdf1.

6. Mount the partition to /mnt/mymount.
[root@localhost]# mkdir /mnt/mymount
[root@localhost]# mount /dev/xvdf1 /mnt/mymount

7. Configure the disk to mount automatically during system boot to the /mnt/mymount mount point.
[root@localhost]# blkid
/dev/xvdf1: UUID="" TYPE="xfs"
[root@localhost]# vim /etc/fstab
UUID="your uuid here" /mnt/mymount        xfs     defaults 1 1
[root@localhost]# umount /mnt/mymount
[root@localhost]# mount -a
[root@localhost]# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda2      6.0G  3.9G  2.1G  65% /
devtmpfs        482M     0  482M   0% /dev
tmpfs           497M   13M  484M   3% /run
tmpfs           497M     0  497M   0% /sys/fs/cgroup
/dev/xvdf1      497M   26M  472M   6% /mnt/mymount


##################################################
Exercise: Creating Persistent Mounts with File System Labels
##################################################
1.  Attach a LinuxAcademy.com external device to the lab server.
2.  Create two partitions, 500M each, on the device.
3.  On the "xvdf1" partition, create an XFS file system.
4.  On the "xvdf2" partition, create an EXT4 file system.
5.  On the "xvdf1" partition, label the filesystem as "filesystem1".
6.  On the "xvdf2"partition, label the filesystem as "filesystem2".
7.  Create a persistent mount in the /etc/fstab file with defaults as the mount option for the xvdf1 partition and use the mount point /mnt/mount1.
8.  Create a persistent mount in the /etc/fstab file with defaults as the mount option for the xvdf2 partition and use the mount /mnt/mount2. Set the fsck check to 2 and the dump to 1.


##################################################

1. Attach a LinuxAcademy.com external device (mount) to the lab server.

2. Create two partitions, 500M each, on the device.
[root@localhost dev]# fdisk /dev/xvdfWelcome to fdisk (util-linux 2.23.2).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.
Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p):
Using default response p
Partition number (1-4, default 1):
First sector (2048-2097151, default 2048):
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151): +500M
Partition 1 of type Linux and of size 500 MiB is set

Command (m for help): n
Partition type:
   p   primary (1 primary, 0 extended, 3 free)
   e   extended
Select (default p):
Using default response p
Partition number (2-4, default 2):
First sector (1026048-2097151, default 1026048):
Using default value 1026048
Last sector, +sectors or +size{K,M,G} (1026048-2097151, default 2097151): +500M
Partition 2 of type Linux and of size 500 MiB is set

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.

3. On the "xvdf1" partition, create an XFS file system.
[root@localhost dev]# mkfs -t xfs xvdf1

4. On the "xvdf2" partition, create an EXT4 file system.
[root@localhost dev]# mkfs -t ext4  xvdf2

5. On the "xvdf1" partition, label the filesystem as "filesystem1".
[root@localhost dev]# xfs_admin -L "filesystem1" /dev/xvdf1
[root@localhost dev]# xfs_admin -l /dev/xvdf1
label = "filesystem1"

6. On the "xvdf2"partition, label the filesystem as "filesystem2".
[root@localhost dev]# tune2fs -L "filesystem2" /dev/xvdf2
or
[root@localhost dev]# e2label /dev/xvdf2
filesystem2

7. Create a persistent mount in the /etc/fstab file with defaults as the mount option for the xvdf1 partition and use the mount point /mnt/mount1.
LABEL=filesystem1 /mnt/mount1 xfs defaults 1 2

8. Create a persistent mount in the /etc/fstab file with defaults as the mount option for the xvdf2 partition and use the mount /mnt/mount2. Set the fsck check to 2 and the dump to 1.
LABEL=filesystem2 /mnt/mount2 ext4 defaults 1 2


##################################################
Exercise: Creating Swap Space
##################################################
1.  Create a LinuxAcademy.com lab server and mount a disk.
2.  The LinuxAcademy.com lab servers already have swap enabled, so first run swapoff to disable the /swapfile in the /etc/fstab file.
3.  Remove the entry /swapfile from the /etc/fstab file.
4.  Verify there is no current swap space available.
5.  Using fdisk, create a partition that uses the entire /dev/xvdf disk; make sure to label the device correctly.
6.  Format the device with the swap signature.
7.  Activate the swap space.
8.  Add swap space to the /etc/fstab so that it is a persistent mount.
9.  Activate the swap space that is added in the /etc/fstab file.

##################################################

1. Create a LinuxAcademy.com lab server and mount a disk.

2. The LinuxAcademy.com lab servers already have swap enabled, so first run swapoff to disable the /swapfile in the /etc/fstab file.
[root@localhost etc]# swapoff -a
Note: swapoff -a disables the swap space listed in /etc/fstab.

3. Remove the entry /swapfile from the /etc/fstab file.
[root@localhost etc# vim fstab
#
# /etc/fstab
# Created by anaconda on Fri Oct 17 18:33:48 2014
#
# Accessible filesystems, by reference, are maintained under '/dev/disk'
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
UUID=668dbd02-c201-44bc-be76-f606fc9ab8db /                       xfs     defaults        1 1

4. Verify there is no current swap space available
[root@localhost etc]# free -m
             total       used       free     shared    buffers     cached
Mem:           992        225        767         12          1         82
-/+ buffers/cache:        141        851
Swap:            0          0          0

5. Using fdisk, create a partition that uses the entire /dev/xvdf disk; make sure to label the device correctly.
[root@localhost dev]# fdisk xvdf
Welcome to fdisk (util-linux 2.23.2).

Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.

Device does not contain a recognized partition table
Building a new DOS disklabel with disk identifier 0x69baf224.

Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p):
Using default response p
Partition number (1-4, default 1):
First sector (2048-2097151, default 2048):
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151):
Using default value 2097151
Partition 1 of type Linux and of size 1023 MiB is set

Command (m for help): t
Selected partition 1
Hex code (type L to list all codes): 82
Changed type of partition 'Linux' to 'Linux swap / Solaris'

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.

6. Format the device with the swap signature.
[root@localhost dev]# mkswap /dev/xvdf1
Setting up swapspace version 1, size = 1047548 KiB
no label, UUID=5713eae2-de6b-4485-af5d-1c659765cd92

7. Activate the swap space.
[root@localhost dev]# swapon /dev/xvdf1
[root@localhost dev]# free -m
             total       used       free     shared    buffers     cached
Mem:           992        216        776         12          0         79
-/+ buffers/cache:        135        857
Swap:         3046          0       3046

8. Add swap space to the /etc/fstab so that it is a persistent mount.
[root@localhost dev]# blkid
/dev/xvda2: UUID="" TYPE="xfs" PARTUUID="9146b810-9a31-4c10-a206-01b0bbaca807"
/dev/xvdf1: UUID="" TYPE="swap"
Grab the UUID to mount the swap device.
[root@localhost dev]# vim /etc/fstab
#
# /etc/fstab
#
UUID=668dbd02-c201-44bc-be76-f606fc9ab8db /                       xfs     defaults        1 1
UUID=YOUR-UUID swap  swap    defaults 0 0

9. Activate the swap space that is added in the /etc/fstab file.
Since we activated it manually already, this manually deactivates it, then activates it based on the /etc/fstab file.
[root@localhost dev]# swapoff /dev/xvdf1
Now activate it persistently based off the /etc/fstab entry:
[root@localhost dev]# swapon -a
-a activates all swap spaces located in the /etc/fstab.


##################################################
Exercise: Creating Swap Space from a LVM Volume
##################################################
1.  Start the LinuxAcademy.com lab server and mount a new disk; ensure LVM utilities are installed on the system.
2.  Create a partition that uses the entire disk space on /dev/xvdf.
3.  Create a physical volume and a new volume group named "battlestar" out of the /dev/xvdf1 partition.
4.  Create a new LVM volume that is approximately 500M in size (generally, you want it to be 2 to 2.5 times the size of your physical memory; however, this is a lab environment).
5.  Format the new LVM volume with a swap signature.
6.  Add an entry into the /etc/fstab file using the UUID of the LVM device to create a persistent swap mount.
7.  Run the swapon command that enables all swap entires in the /etc/fstab file.
8.  Verify swap space is working.
9.  Reboot and test.


##################################################



1. Start the LinuxAcademy.com lab server and mount a new disk; ensure LVM utilities are installed on the system.
[root@localhost #] yum install lvm2

2. Create a partition that uses the entire disk space on /dev/xvdf.
[root@localhost dev]# fdisk /dev/xvdf
Welcome to fdisk (util-linux 2.23.2).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.
Device does not contain a recognized partition table.
Building a new DOS disklabel with disk identifier 0x0631abd7.
Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended

Select (default p):
Using default response p
Partition number (1-4, default 1):
First sector (2048-2097151, default 2048):
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151):
Using default value 2097151
Partition 1 of type Linux and of size 1023 MiB is set
Command (m for help): t
Selected partition 1
Hex code (type L to list all codes): 8e
Changed type of partition 'Linux' to 'Linux LVM'
Command (m for help): w
The partition table has been altered!
Calling ioctl() to re-read partition table.
Syncing disks.

3. Create a physical volume and a new volume group named "battlestar" out of the /dev/xvdf1 partition.
[root@localhost #] pvcreate /dev/xvdf1
[root@localhost #] vgcreate battlestar /dev/xvdf1

4. Create a new LVM volume that is approximately 500M in size (generally, you want it to be 2 to 2.5 times the size of your physical memory; however, this is a lab environment).
[root@localhost dev]# lvcreate -n swap -L 500M battlestar

5. Format the new LVM volume with a swap signature.
[root@loclhost dev] #  mkswap /dev/battlestar/swap
Setting up swapspace version 1, size = 511996 KiB
no label, UUID=679ea5a2-c652-458a-8726-6e3970d1f58f // (Note use your UUID provded not the one here)

6. Add an entry into the /etc/fstab file using the UUID of the LVM device to create a persistent swap mount.
#
# /etc/fstab
UUID=668dbd02-c201-44bc-be76-f606fc9ab8db /                       xfs     defaults        1 1
UUID=679ea5a2-c652-458a-8726-6e3970d1f58f swap swap defaults 0 0

7. Run the swapon command that enables all swap entires in the /etc/fstab file.
[root@localhost dev]# swapon -a

8. Verify swap space is working.
[root@localhost dev]# free -m
or
[root@localhost dev]# swapon -s
[root@localhost dev]# cat /proc/swaps

9. Reboot and test.
[root@localhost dev]# reboot





##################################################
Quiz: Configure local storage
##################################################

1) Which file on the operating system contains information about which partitions the OS is reading?

Correct

Correct answer
/proc/partitions

2) Swap space can be created out of GPT-, MBR- and LVM-based partitions/volumes.

Correct

Correct answer
True

3) The file system needs to be created on the device after the logical volume is created (lvcreate).

Correct

Correct answer
True

4) You are extending a logical volume. To do this, you have to add the /dev/xvdj device to the volume group "battlestar". Which command would you issue to accomplish this task?

Correct

Correct answer
vgextend battlestar /dev/xvdj

5) Given the volume group "battlestar" and a physical volume in the volume group /dev/xvdf1, which command would accurately create a 19 G logical volume out of /dev/xvdf1 with a volume name of "galactica"?

Correct

Correct answer
lvcreate -n galactica -L 19G battlestar

6) How many primary partitions can a GPT partition table have?

Correct

Correct answer
128

7) Which command displays information about a swap device?

Correct

Correct answer
swapon -s

8) Which tool(s) would you use to mange GPT-based partitions?

Correct

Correct answer
gdisk, parted

9) For an MBR partition, what is the max disk size a partition can be?

Correct

Correct answer
2TiB

10) You've just increased the size of the /dev/battlestar/galactica LVM volume. This volume is mounted in /mnt/mydir; which command would you issue for the operating system and file system to recognize the increase in size on the device?

Correct

Correct answer
xfs_growfs /mnt/mydir

11) Which file system is best used with LVM volumes?

Correct

Correct answer
XFS

12) After adding 50 GB more of physical storage to your existing volume group, you need to extend your /dev/battlestar/galactica volume group to include an additional 20GB of storage. How might you accomplish this task?

Correct

Correct answer
lvextend -L +20G /dev/battlestar/galactica

13) What command is used to inform the OS of partition table changes?

Correct

Correct answer
partprobe

14) You're in the middle of the Red Hat certification test and forget which LVM commands you need to use to perform the specified tasks. What option(s) do you have?

Correct

Correct answer
man lvm, info lvm

15) What is the maximum disk size for a GPT-based partition?

Correct

Correct answer
8 ZiB

16) Select the correct order of tasks for creating an LVM for the first time.

Correct

Correct answer
Create the physical volume (pvcreate), create the volume group (vgcreate), create the logical volume (lvcreate)

17) What is the limit for primary partitions when using the MBR partition type?

Correct

Correct answer
4

18) After making partition changes, the partition changes do not appear in the /proc/partitions. How can you force the kernel to reload the partition tables?

Correct

Correct answer
issue the partprobe command

19) Which command is used to assign a swap signature to a device?

Correct

Correct answer
mkswap

20) What are two ways to find information about swap devices enabled on the system?

Correct

Correct answer
swapon -s, cat /proc/swaps



##################################################
Create and Configure File Systems
##################################################
##################################################
Lecture: Create, Mount, Unmount and Use VFAT, EXT4 and XFS File Systems
##################################################
cd /dev

#create a partition
fdisk xvdf   #we dont have a need to create a file system greater that 2tb or more than 4 partitions
n
p
enter
enter
w

#formate with a file system
#VFAT is an extended version of the FAT file system originally developed by microsoft.
#one reason that we might want to use VFAT is we are formatting a device we intend to use on a windows machine, or we are creating a share on a linux machine and we want a windows machine to be able to connect to that share through samba

#Create the VFAT file system
#if this isnt installed on your system you can do a yum search vfat
mkfs.vfat /dev/xvdf1

#create a new mount
mkdir /mnt/vfat

#mount the device
mount /dev/xvdf1 /mnt/vfat

df -h #to view the mounted device

#make the mount persistant
vim /etc/fstab
/dev/xvdf1 /mnt/vfat vfat defaults 1 2

:wq

#now you cant mount the device, we are going to unmount it to repartition it
umount /mnt/vfat

df -h

fdisk xvdf
m #for help
d #delete
n #new
p
enter
enter
exit

#now we are going to create the ext4 file system
#ext4 is a journaled file system, it is commonly used among linux, it can support a file size of up to 16TB in size, and a file system size of up to 50TB in size
mkfs.ext4 /dev/xvdf1

mkdir /mnt/ext4

mount /dev/xvdf1 /mnt/ext4

df -h

vim /etc/fstab
/dev/xvdf1 /mnt/ext4  ext4   defaults 1 2

:wq


#to check the file system
fsck.vfat /dev/xvdf1

and

fsck /dev/xvdf1  #for a ext4 file system

#fsck can not run checks against a mounted file system
#we would have to unmount the device before we could check the integrity of the file system

umount /mnt/ext4


#to get details about our file system
dumpe2fs /dev/xvdf1

#get the uuid
blkid


#we can label the file system
tune2fs -L ext4_label /dev/xvdf1


#we can verify the label
dumpe2fs /dev/xvdf1


#we can always use the label in /etc/fstab to mount the device by label

#we can use dumpe2fs for disk trouble shooting

#you can run out of disk space by running out of inodes

#lets delete the partition and take a look at xfs
fdisk /dev/xvdf
d
n
p
enter
enter
w

#create the xfs file system
#xfs is known for its parralell processing and high through put when it comes to writing data to the disk, its a journled file system and supports upto 500 TB file size and 500TB in file sytem size

mkfs.xfs -f /dev/xvdf1  #the -f means force to force over writing on any file system


mkdir /mnt/xfs

mount /dev/xvdf1 /mnt/xfs

vim /etc/fstab
/dev/xvdf1 /mnt/xfs xfs defaults 1 2

:wq

#How do you trouble shoot and get information about a xfs file system
xfs_info /dev/xvdf1


xfs_admin -L newxfslabel /dev/xvdf1  #create a new label on a xfs file system, the file system has to be unmounted to create the label

#we also cant check the integrity of the file system with the file system mounted

umount /mnt/xfs

xfs_admin -L newxfslabel /dev/xvdf1

xfs_repair /dev/xvdf1  #this will repair any issues on the file system, xfs can also not be mounted to be repaired



##################################################
Lecture: Mount and Unmount CIFS and NFS Network File Systems
##################################################
#there is a live lab called: mount and unmount cifs and nfs network file systems
#CIFS #common internet file system, cifs allows shares from windows to linux, uses samba

#part of the rhcsa is that we need to learn how to mount machines to these types of file shares

yum install -y samba-client cifs-utils nfs-utils

#in the exam you will have to mount persistently, because they are going to test for that

smbclient -L <fileserverip>
#enter the linuxacademy users password

mkdir /mnt/{sambashare,nfsshare}

mount -t cifs -o username=linuxacademy,password=123456 //<filserverip>/public /mnt/sambashare

#If you receive an error that say incorrect file type, that should be clue to you that you forgot to install the cifs-utils

#note the differnce between the syntax of the cifs and nfs file share mount
df -h

mount -t nfs <fileserverip>:/nfsshare /mnt/nfsshare

df -h #we should see both of our mounts

vim /etc/fstab
//<filserverip>/public /mnt/sambashare cifs user,rw,username=linuxacademy,password=123456 0 0
<fileserverip>:/nfsshare /mnt/nfsshare nfs defaults 0 0

:wq

umount -a
mount -a

df -h


##################################################
Lecture: Extend Existing Logical Volumes
##################################################
#live lab:  Extend existing logical volumes

cd /dev
#we have 3 devices attached to this system

fdisk xvdf
n
p
enter
enter
l
t
8e00 #for linux lvm
w

#Now we need to create a physical volume
pvcreate /dev/xvdf1

pvdisplay #to verify that the physical volume was created

#Now we need to create our volume group
vgcreate batlestar /dev/xvdf1

vgdisplay #to verify that the volume group was created

#Create our logical volume

lvmcreate -n galactica -L 1G battlestar

lvdisplay  #to verify that the logical volume was created

#now we need to create a file system on the disk
mkfs -t xfs /dev/battlestar/galactica

#make a dir to mount the logical volume

mkdir /mnt/myvolume
mount /dev/battlestar/galactica /mnt/myvolume

df -h #we can now see that the volume is created

#Now we start working on modifying our volumes
gdisk xvdg
n
enter
enter
l
8e00  #linux lvm partition
w
y

#add xvdg1 to our current volume group
pvcreate /dev/xvdg1

pvdisplay

vgextend battlestar /dev/xvdg1

#now we need to move the data off xvdf1 to xvdg1
pvmove /dev/xvdf1

#remove the xvdf1 device from out physical volume group
vgreduce battlestar /dev/xvdf1

vgdisplay

cd /mnt/myvolume
ll
we can see that our data has been moved

#how to we extend the size of our logical volume
lvextend -L 5G /dev/battlestar/galactica #make the galactica lv 5G in size  #L means we will be specifying the size, l me we will be specifying the number of physical exents

lvextend -L +5G /dev/battlestar/galactica  #add 5G to the logical volume

df -h #we extended the size of the volume but the size of our file system is still only 1G

xfs_growfs /mnt/myvolume  #this will recalculate the available disk space

#if you are using a ext based file system you will need to use resize3fs /mnt/myvolume

df -h #we can now see that we have the GB

#if we used a ext based file system to recalculate the storage volume we need to use the resize2fs /mnt/myvolume

#Another way to extend
lvextend -l +50%FREE /dev/battlestar/galactica   #this will extend 50% of the current free space of the volume

xfs_growfs /mnt/myvolume



##################################################
Lecture: Create and Configure Set-GID Directories for Collaboration
##################################################
groups <user>  #to see the groups that the user belongs to

mkdir {finance,it}
cd finance
touch doc1

#we want to make it so that all files created in a parent dir, inherit the parents permissions
cd ..
chmod g+s finance  #this sets the gid
ll

###
groupadd finance
chown :finance finance

chmod g+wX -R finance/
cd finance
touch doc2
ll


##################################################
Lecture: Create and Manage Access Control Lists (ACLs)
##################################################
#in this lesson the instructor is logged into the same system as 2 users, root and starbuck
#not all file systems support file system ACLs, xfs and ext4 do natively support file system acls

cd /tmp
useradd starbuck
passwd starbuck

login as the starbuck user
cd /tmp

#as the root user
mkdir {dir1,dir2}; touch {file1,file2}

getfacl file1  #this will show the file acls for the file, these are called the base or minimum file acls

setfacl -m u:<userid or username>:rw file1     #u is for naming a user, replace u for groups.   If we change the users id we will also need to update the setfacl on this file

#####
if we chmod 000 file1, then getfacl file1 we will see that starbuck has the rw permissions but the mask is 000

##
setfacl -m m::r file1  #this sets the mask

#########
groupadd finance
setfacl -m g:finance:rw file1




####################
#Default acl, can be set on a directory, files and directories inside the directory will inherit the default permissions
#as root
setfacl -d -m u:starbuck:rw dir1
getfacl dir1

cd dir1  #you wont be able to cd into the dir as the starbuck user because that user doesnt have execute privileges

setfacl -m u:starbuck:rwx dir1
getfacl dir1

#now the starbuck user will be able to navigate into the directory

cd dir1
touch file1  #file1 was created with rw because thats what the default facl for starbuck are

setfacl --remove-default dir1

getfacl dir1

###
setfacl -x u:starbuck dir1 #to remove for the user

setfacl -x -d u:starbuck dir1  #to remove starbuck default permissions

setfacl --remove-default dir1

#to copy the facl from one file to another
getfacl file1 | setfacl --set-file=- file2

##################################################
Lecture: Diagnose and Correct File Permission Problems
##################################################
we cannot delete a file, does it have the sticky bit enabled, are we operating as the root user or the local user on the system

update a acl on a file or directory, the MASK changes, if the mask changes then our permissions will change

when you add a group acl, on a regular file or directory, it doesnt apply to the acl entry of the groups

directories need to have execute permissions, to cd into

the cp command does not preserve ACL rules

the mv command does preserve acl rules

chmod -R g+rwX /tmp #the X will apply execute changes to the directories under /tmp but not the files

in a directory if you want all new files and directories to be created with the same owner as the group owner of the parent directory use the set-gid bit

default acl permissions are for inheritance, which means all sub directories and files created within the parent directory, inherit the acl permissions of the parent




##################################################
Hands-on Lab: Mounting NFS Network File Systems
##################################################
#install aproprate packages
yum install nfs-utils nfslock rpcbind

#make a file to share
mkdir /nfs_shared

#create a file
touch /nfs_shared/testfile

ifconfig

#go to the second lab server
vim /etc/hosts
#add the ip from server 1

<ip_address> <server_name>

#do the samething for server 1


vim /etc/exports
/nfs_shared  <hostname>(rw,sync,no_root_squash,no_subtree_check)


#go to our second server
yum install nfs_utils nfslock rpcbind -y

mkdir /nfs_shared


#go to server 1
systemctl restart nfs

exportfs -a

#to show whats being shared
exportfs

#go to server 2
mount -t nfs <hostname>:/nfs_shared /nfs_shared

df -h

touch /nfs_shared/test1

umount /nfs_share

vim /etc/fstab
<sourcehostname>:/nfs_shared  nfs  rsize:8192,wsize=8192,timeo=14,intr


mount /nfs_shared



##################################################
Hands-on Lab: Create and Mount SAMBA and CIFS Fileshares
##################################################
#Start with the server
yum install samba samba-client samba-common cifs-utils -y

cd /etc/samba

#we want to look at both
cat smb.conf.example

#The default configuration that is basically ok for implementation
vim smb.conf
[global]
#workgroup is a windows term, if youre going to be working with windows you want to share the workgroup name, it makes the communication easier to discover using netbios
#security is how we are going to determine who has access to what
#passwd backend, tdbsam is the default for all samba dbs, youre rarely if ever going to change it
#load printers, its either yes or no

[homes]
#this give you the ability to share users home directories by default


[printers]
#path, is the path for the cups spool, /var/spool/cups

[print$]
#this gives us the ability to share specific share drivers
#path = /var/lib/samba/drivers

#This next section we are building
[myshare]
  comment = This is our test share
  path = /myshare
  guest ok = no
  writeable = yes

:wq

#just because you have reed/write access to a share the underlying file system permissions are going to apply

mkdir /myshare
chmod 777 /myshare
echo "test file" > /myshare/testfile.txt

#the two commands below are for selinux
setenforce 0
getenforce


cd /etc/samba/smb.conf
#change load printers to no

:wq

testparm  #this will test our configuration items in out smb.conf

systemctl start smb

systemctl start nmb

systemctl status -l smb

systemctl status -l nmb



nmblookup SAMBA





##################################################
Hands-on Lab: Extending Existing Logical Volumes
##################################################

 fdisk /dev/xvdf
n
p
enter
enter
w


pvcreate /dev/xvdf1
pvdisplay


vgcreate battlestar /dev/xvdf1
lvcreate -n galactica -L 1G battlestar


mkfs -t xfs /dev/battlestar/galactica

mkdir -p /mnt/myvolume

mount /dev/battlestar/galactica  /mnt/myvolume

cd /mnt/myvolume; touch {file1,file2}


#adding another disk
gdisk /dev/xvdg
n
enter
enter
enter
8e00
w
y


pvcreate /dev/xvdg1


vgextend battlestar /dev/xvdg1


vgdisplay


#moving physical extents

pvmove /dev/xvdf1


vgreduce battlestar /dev/xvdf1


#extending logical volumes
lvextend -L 5G /dev/battlestar/galactica


df -h

xfs_growfs /mnt/myvolume






##################################################
QUIZ: CREATE AND CONFIGURE FILE SYSTEMS
##################################################

1) In Red Hat 7 EXT4, file systems have support for ACLs but generally need the option specified during mount time.

Incorrect

Correct answer
True

2) Which of the following command(s) can be used to reduce the volume group by removing the /dev/xvdg1 partition from the volume group "battlestar"?

Correct

Correct answer
vgreduce battlestar /dev/xvdg1

3) Which of the following commands would be used to extend an existing logical volume with the name of "galactica" to a total size of 5GiB if the current size is 1GiB using the volume group "battlestar"?

Correct

Correct answer
lvextend -L 5G /dev/battlestar/galactica

4) Some file systems must be mounted with ACL support enabled for ACLs to work on the filesystem.

Correct

Correct answer
True

5) Which file system has built-in ACL support?

Correct

Correct answer
XFS

6) Which command(s) are used when dealing with LVM?

Correct

Correct answer
vgextend, vgcreate

7) After using lvextend to increase the size of a logical volume, how can you modify the file system to reflect the changes? Assume the device is mounted at /mnt/myvolume and the logical volume is /dev/battlestar/galactica.

Correct

Correct answer
xfs_growfs /mnt/myvolume

8) Which command would move the physical extents off of the /dev/xvdg1 physical volume disk onto another physical volume associated with the battlestar volume group?

Correct

Correct answer
pvmove /dev/xvdg1





##################################################
Exercise: Filesystem ACLs
##################################################
1. Create a second user on the system called "starbuck".  Open a second terminal window for the lab server, and connect as the user starbuck. Ensure you're working as a priviledged user (sudo) or root user while perofrming the lab. The starbuck user will be used to test setting the permissions.
2. Navigate into the /tmp directory, create two new directories named "dir1" and "dir2" and two files called "file1" and "file2".
3. Idenity if any of the files currently have extended access control lists associated with them.
4. Set an ACL for the starbuck user to read and write for file1.
5. Set the mask on the file1 to read only, then as the starbuck user, attempt to execute the following command: echo "test" > /tmp/file1. Why does this fail?
6. Set the default permissions on dir1 to read, write and execute for the starbuck user; execute only if it is a directory.
7. Using setfacl, change the "other" permissions to none on file1.
8. Remove the default permissions from dir1.
9. Remove all ACLs on file1.


##################################################


1. Create a second user on the system called "starbuck".  Open a second terminal window for the lab server, and connect as the user starbuck. Ensure you're working as a priviledged user (sudo) or root user while perofrming the lab. The starbuck user will be used to test setting the permissions.
[root@localhost ~]# useradd starbuck; passwd starbuck
Changing password for user starbuck.
New password:
Retype new password:
passwd: all authentication tokens updated successfully.

2. Navigate into the /tmp directory, create two new directories named "dir1" and "dir2" and two files called "file1" and "file2".
[root@localhost tmp]# mkdir {dir1,dir2}; touch {file1,file2}

3. Idenity if any of the files currently have extended access control lists associated with them.
[root@localhost tmp]# ls -l
total 0
drwxr-xr-x. 2 root root 6 May  5 20:00 dir1
drwxr-xr-x. 2 root root 6 May  5 20:00 dir2
-rw-r--r--. 1 root root 0 May  5 20:00 file1
-rw-r--r--. 1 root root 0 May  5 20:00 file2
Note: The files have base ACLs but do not have extended ACLs. We know they do not have extended ACLs because of the lacl of "+" at the end of the permissions listed.

4. Set an ACL for the starbuck user to read and write for file1.
[root@localhost tmp]# setfacl -m u:starbuck:rw file1
[root@localhost tmp]# getfacl file1
# file: file1
# owner: root
# group: root
user::rw-
user:starbuck:rw-
group::r--
mask::rw-
other::r--

5. Set the mask on the file1 to read only, then as the starbuck user, attempt to execute the following command: echo "test" > /tmp/file1. Why does this fail?
[root@localhost tmp]# setfacl -m m::r file1
[root@localhost tmp]# getfacl file1
# file: file1
# owner: root
# group: root
user::rw-
user:starbuck:rw- #effective:r--
group::r--
mask::r--
other::r--
Starbuck's Terminal
[starbuck@localhost tmp]$ echo "test "> /tmp/file1
-bash: /tmp/file1: Permission denied
Summary: Starbuck was unable to write to file1 even though they had an ACL with rw, because the mask was setting the "maximum" permissions to r and was masking w.

6. Set the default permissions on dir1 to read, write and execute for the starbuck user; execute only if it is a directory.
[root@localhost tmp]# setfacl -d -m u:starbuck:rwX dir1
[root@localhost tmp]# getfacl dir1
# file: dir1
# owner: root
# group: root
user::rwx
group::r-x
other::r-x
default:user::rwx
default:user:starbuck:rwx
default:group::r-x
default:mask::rwx
default:other::r-x

7. Using setfacl, change the "other" permissions to none on file1.
[root@localhost tmp]# setfacl -m o::- file1
[root@localhost tmp]# ls -l
total 8
drwxr-xr-x+ 2 root root 6 May  5 20:00 dir1
drwxr-xr-x. 2 root root 6 May  5 20:00 dir2
-rw-rw----+ 1 root root 0 May  5 20:00 file1
-rw-r--r--. 1 root root 0 May  5 20:00 file2
8. Remove the default permissions from dir1.
[root@localhost tmp]# setfacl --remove-default dir1
[root@localhost tmp]# getfacl dir1
# file: dir1
# owner: root
# group: root
user::rwx
group::r-x
other::r-x

9. Remove all ACLs on file1.
[root@localhost tmp]# setfacl --remove-all file1
[root@localhost tmp]# getfacl file1
# file: file1
# owner: root
# group: root
user::rw-
group::r--
other::---


##################################################
Deploy, Configure and Maintain Systems
##################################################
##################################################
Lecture: Configure Networking and Hostname Resolution Statically or Dynamically: Troubleshooting
##################################################
Create 2 vms
ifconfig is being deprecated

man ip
ip addr
ip addr show eth0

ping <ipaddress>
ping -c5 <ipaddress>  #this will ping 5 times then stop

ping6  #this is to ping ipvs addresses

tracepath  #not all routers support tracepath, and its for non privileged users.

traceroute

ss #allows to look at listening ports and established connections

ss -a #show all listening and established connections

ss -at #tcp sockets

ss -au #udp sockets

ss -aun #this will list port numbers


#install httpd
yum install httpd
systemctl start httpd

ss -tan   #this will show ports and connections from connected machines


ip -s link show eth0  #show statistic information RX bytes is the number of bytes received TX bytes are the number of bytes sent


##################################################
Lecture: Configure Networking and Hostname Resolution Statically or Dynamically: Network Manager
##################################################
live lab:  working with network control manager

ls /sys/class/net #a virtual file system like proc

nmcli  #network control manager

nmcli dev status

#for a gui, open a terminal
nm-connection-editor #this will open a gui interface

#back in a terminal
nm-tui #a text based gui, network manager text user interface

nmcil con show #this will show all of our connections, a connection is a configuration, a connection is attached to a device
#our connections are stored in our /etc/sysconfig/network-scripts/


nmcli con add help #to get help

nmcli con add con-name "mycon" autoconnect yes type ethernet ifname eth1  #to add a new connection

nmcli con show

nmcli con show --active  #to show active connections

nmcli dev show #this will show our devices

vim ifcfg-mycon  #because we didnt enter an ipaddress or a gateway its going to create this script, it will create it with dhcp
:wq

#add another connection
ip route

nmcli con add con-name "mycon-static" type ethernet ifname eth1 ip4 10.0.0.16 gw4 10.0.0.1
nmcli con show

cat ifcfg-mycon-static

nmcli con down "mycon-static"
nmcli con up "mycon"
nmcli con show



#How to modify auto connect
nmcli con mod "mycon" connection.autoconnect yes

nmcli con def "mycon-static"
nmcli con show

nmcli con down mycon

nmcli con del "mycon"

nmcli con show


##################################################
Lecture: Configure Networking and Hostname Resolution Statically or Dynamically: Hostname Configuration
##################################################
vim /etc/resolv.conf

search <hostnsmes that end with this>
nameserver <the remote namever to lookup hostnames>

#if we edit our /etc/hosts files it called poisoning dns

vim /etc/hosts
10.0.0.1 linuxacademy.com

vim /etc/nsswitch.conf
hosts files dns myhostname #when resolving ip addresses the server will look at local files first then dns, we can configure this here, and we can switch to look at dns servers forst

:wq

hostname #to display the hostname

hostnamectl set-hostname mydoman.com #to change the hostname, this command updated the /etc/hostname file, this makes the hostname change persistent

exec bash #to update our command line

hostnamectl status #to display hostname information

###How to manage nameservers
nmcli con show

nmcli con mod "System eth0"  ipv4.dsn 8.8.8.8  #we would have to restart the connection or reboot the server to get this change into the /etc/resolv.com

cat sysconfig/network-scripts/ifcfg-eth0  #the 8.8.8.8 nameserver will be added here

nmcli con mod "System eth0"  -ipv4.dsn 8.8.8.8 #we can add the - to remove the entry or add another entry by putting the +

reboot

cat /etc/resolv.conf

getent hosts google.com

getent hosts linuxacademy.com

vim /etc/hosts
10.0.0.0 linuxacdemy.com


##################################################
Lecture: Schedule Tasks Using at and cron
##################################################
yum install at
systemctl enable atd
sysetmctl start atd

#the at utility allows us to schedule the running of a command at a later point in time

at now +5 minutes, hours or days, you can also schedule at regular time intervals

at 12:00am
reboot #ctrl+d

atq #this will list all of the queued jobs waiting to be executed
atrm 1 #this will remove job number 1

at now +1 minute
logger "the sytems current uptime is $(uptime)"
ctrl+d twice #this will end the at prompt and create the job

atq #to see  the queued job

journalctl -xn

man at  #read over the options for this command

####

grep at /etc
at.deny or at.allow  #we can have one or the other we can not have both

at.deny #if a user name in located in at.deny, the user will not be allowed to use the at utility
at.allow #no users will be able to use at unless their names are in the file

ls /etc | grep cron  #we can see that cron also has a cron.deny file

#####
cd /home/user
vim uptime.log
#!/bin/bash
logger "the system current uptime is $(uptime)"

:wq

chmod +x uptime.log

./uptime.log
journalctl -xn

#######
cron tab -e #is a utility that allows us to edit the users cron

ll /etc | grep cron #this is where the system cron files are located

vim crontab #in rhel 7 we dont use the crontab file any more

#the limitation of cron is that if your system is not turned on, if a task was scheduled to take place it completely misses the job  #anacron is the way around this

*/5 * * * * root /home/user/uptime.log  #this will run every 5 min

5 0 * * * root /home/user/uptime.log  #this will run on the 5th min of hour 0

5 0 1 * * root /home/user/uptime.log  #this will run on the 5th min of hour 0 on the first day of the month

5 0 */2 * * root /home/user/uptime.log  #this will run on the 5th min of hour 0 every 2 days starting from the beginning of the month till the end

## if you place a script in the cron.daily #the scripts will execute once per day, using the runparts command

#if you want a custom cron time you would create it in /etc/cron.d

yum install sysstat

#if we need to find a configuration file, rpm -qc sysstat #q for query and c for configuration

##what makes our cron. daily work?  from is integrated with anacron
##anacron is only for privileged users

#anacron is what runs our daily, weekly, monthly cron jobs, the hourly isnt
cd cron.d
#in cron.d you will see the hourly script

vim anacrontab
:wq

#anacron is a utility allows us to run a command after a number of given days if it has not run

anacron -n #this will make jobs run immediately

/var/spool/anacron #this is how anacron know if a job wasnt run in x number of days if your machine was powered off when the job was supposed to run.




##################################################
Lecture: Start and Stop Services and Configure Services to Start Automatically at Boot
##################################################
yum install httpd

#systemd utilizes targets

sysetmctl status httpd  #we can see that its inactive

systemctl start httpd

systemctl status httpd #we can see that its running but disabled

systemctl is-enabled httpd #this will also tell use that it is disabled

systemctl list-unit-files --type=service | grep httpd #this will show all unit files and if they are enabled or disabled on the service

systemctl get-default #this will show us our current target

systemctl list-dependencies | grep httpd #httpd will not show up

systemctl enable httpd #this enables httpd to start at boot time

systemctl status httpd

reboot

systemctl status httpd

##verify that it belongs to the multi user target

cd /etc/systemd/system
cd multi-user.target.wants  #we can see that httpd is listed there

or

sysetmctl list-dependencies multi-user.target | grep httpd

sysetmctl list-dependencies graphical.target  #the multiuser.target is a dependency of the graphical.target

systemctl disable httpd

systemctl is-enabled httpd

systemctl status httpd

##################################################
Lecture: Configure Systems to Boot into a Specific Target Automatically
##################################################
sysetmctl get-default

systemctl set-default graphical.target  #now when we reboot it will boot into the graphical target



##################################################
Lecture: Install Red Hat Enterprise Linux Automatically Using Kickstart
##################################################
vim /root/anaconda-ks.cfg  #this is our kickstart script

#the key to a kick start is knowing where to find your different options
yum install system-config-kickstart  #this will allow us to use a gui based interface to create a kick start

system-config-kickstart #to start the gui

###to find the documentation for pykickstart

rpm -qd pykickstart

#in the pykickstart documentation there are packages, the @ symbol infront of the package means group

#after we have the kick start script we can point a vm or physical machine to that script and deploy a node with it

#we need to put the kickstart on a pxe server

#kvm is going to search the network for a pxe server



##################################################
Lecture: Configure a Physical Machine to Host Virtual Guests
##################################################
#to configure you have to have a physical machine to configure

yum install virt-manager qemu-kvm qemu-img  #virt-manager is gui vm management virsh is command line

yum install libvirt libvirt-python python-virtinst libvirt-client

#if libvirt isnt enabled we cant manage our virtual machines

systemctl enable libvirtd

sysetmctl start libvirtd

#now we can work with virtual machines

#we can also use virsh
virsh

##################################################
Lecture: Install Red Hat Enterprise Linux Systems as Virtual Guests
##################################################
virt-manager
file > new virtual machine > local install media > select your iso > select memory and cpu > select storage > name the vm > finish

ll /sys/class/net  #this will list the available nic cards

nmcli con show

cd /etc/sysconfig/scripts

cat ifcfg-ens3

nmcli con up ens3  #this will bring or networking up

ip addr #to view local network information

nmcli con show

nmcli con mod "ens3" connection.autoconnect yes  #we just made it so that our networking will come up on reboot

cat ifcfg-ens3


##################################################
Lecture: Configure Systems to Launch Virtual Machines at Boot
##################################################
libvirtd needs to be enabled

systemctl status libvirtd  #we can see that its enabled

systemctl enable libvirtd

####we also have to configure auto start for each virtual machine that we want
virsh
list --all
list #only shows active or running machines

autostart <vmname>

reboot the host

#after reboot verify that the vm is running


##################################################
Lecture: Configure Network Services to Start Automatically at Boot
##################################################
sysetmctl list-units | grep networking.target

sysetmctl list-dependencies multi-user.target | grep network


cd /etc/sysconfig/network-scripts
nmcli con show
cat ifcfg-ens3

nmcli con mod "ens3" connection.autoconnect yes

cat ifcfg-ens3


##################################################
Lecture: Configure a System to Use Time Services
##################################################
timedatectl and chronyd #chronyd is a new service and by default what ntp uses as of rhel 7, in previous versions the ntpd daemon was used

timedatectl  #shows use information regarding configured time

man timedatectl

timedatectl set-ntp false

timedatectl list-timezones

tzselect #to help figure out what time zone you are in

timedatectl set-timezone <timezone>

timezonectl

timedatectl set-time 12:32

#####
ntp

systemctl status chronyd

chronyc sources -v

systemctl restart chronyd

chronyc sources -v

the stratum is the number of hops that our server needs to take to get to the source reference of time

stratum of 2 mean that this is a machine that communicates with a ntp server
stratum of 1 mean that it is a ntp server

timedatectl  #this will tell us if we are synchronized

chronyc tracking #this provides more information than timedatectl

vim /etc/chrony.conf  #to change what servers we are looking at for time servers

systemctl restart chronyd


##################################################
Lecture: Install and Update Software Packages from Red Hat Network, a Remote Repository or the Local File System: YUM
##################################################
yum check-update  #this looks for any packages that have an update that have an update thats available

yum search <package>  #this will only search the package details and the desctiption

yum search all <package>  #this will search all of the package fields

yum info httpd  #this will give you information about a package

yum install httpd

yum list installed #this will list all installed packages

yum list installed <package>  #this will check for just the package that you specify

yum provides /var/www  #yum will provide us with what package will create the www directory

yum whatprovides /var/www #this does the same thing as yum provides

yum remove  #to remove a package

yum update <package>  #this will check for update for a specific file

yum clean all #this will clean out all of the caching associated with yum


##################################################
Lecture: Install and Update Software Packages from Red Hat Network, a Remote Repository or the Local File System: RPM
##################################################
yum search nano

yumdownloader nano #this will download the rpm, we will still need to install the package

rpm -i <package> #this will install the package

rpm -U <package> #this will upgrade or install the package

rpm -F <package>  #this will upgrade a package only if its already installed

rpm -ivh namo  #this will install verbosly with a hash, a hash is a progress bar

rpm -qa #query all , this will all install packages

rpm -qa nano #this will list only the package nano

rpm -ql nano #this will list all the files that were unpacked and installed when the package was installed

rpm -qd nano #this will query all the documentation for a package

rpm -e nano #this will remove the package

nano test #we will see that there is no longer the nano binary

rpm -qa nano #we will see that rpm no loger has the nano package

yum localinstall nano.rpm  #this will install the package using the yum package manager, this will also help get dependencies

yum list installed nano

rpm -qa nano #we can see that nano is listed  under rpm, thats because yum actuallly runs rpm commands

yum remove nano #this will remove nano



##################################################
Lecture: Install and Update Software Packages from Red Hat Network, a Remote Repository or the Local File System: Managing Repositories
##################################################
cd /etc/yum.repos.d
vim redhat-rhui-client.repo

#gpgcheck means that before the package is downloaded its verified that the package is allowed to be in the repository
:q

yum repolist #this will show us enabled repos on our system

yum repolist all  #this will show use enabled and disabled repos, there are listed in the redhat-rhui.repo file

#to add a repo
yum-config-manager --add-repo=https://dl.fedoraproject.org/pub/epel/7/x86_64/  #this will create a repo configuration file for this repo

vim dl.fedoraproject.org_pub_epel_7_x86_64_.repo

yum repolist #verify that the repo has been added

#to disable a repo
vim dl.fedoraproject.org_pub_epel_7_x86_64_.repo
#set enabled=0

:wq

yum repolist

yum repolist all

#disable using yum configuration manager
yum-config-manager --disable dl.fedoraproject.org_pub_epel_7_x86_64_.repo

yum repolist all

#to enable a repo using yum configuration manager
yum-config-manager --enable dl.fedoraproject.org_pub_epel_7_x86_64_.repo

##################################################
Lecture: Install and Update Software Packages from Red Hat Network, a Remote Repository or the Local File System: Configuring a Local Repository
##################################################
mkdir -p /repos/local

mount -o loop rhel-server.iso /repos/local  #the loop lets it read the dvd as a block device

cd /etc/yum.repos.d
#disable the repos

vim local-repo.repo
[local-repo]
name=Rat hat Local repo
baseurl=file:///repos/local
enabled=1
gpgcheck=0
:wq

yum reposlist

yum search emacs

yum list installed emacs

yum install emacs

##################################################
Lecture: Install and Update Software Packages from Red Hat Network, a Remote Repository or the Local File System: Configuring a Local Repository: Configure the GPG Key
##################################################
epel repo https://dl.fedoraproject.org/pub/epel/7/x86_64/

yum-config-manager --add-repo https://dl.fedoraproject.org/pub/epel/7/x86_64/    #this will add the repo

#now we need to configure the gpg key
#go to this url and copy the url for the gpgkey https://dl.fedoraproject.org/pub/epel

cd /etc/pki/rpm-gpg
wget <the gpg key>
pwd #you need the gpgksys path
/etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7

cd /etc/yum.repos.d
vim <the fedora project repo>
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7
:wq


yum install python-pip  #we know that this is only in the epel repo

# In stall the epel repo, everything in epel is not supported
yum search epel

yum install epel-release

yum repolist




##################################################
Lecture: Update the Kernel Package Appropriately to Ensure a Bootable System
##################################################
#there is a live lab for this called  Update the Kernel Package Appropriately to Ensure a Bootable System

uname -r #to check the kernel version

yum clean all  #this will clean our repo cache information

yum list kernel  #this will show the installed kernel aswell as any available updates

yumdownloader kernel

rpm -ivh kernel-3.XXXXXXX  #this installs the kernel

yum install linux-firmware  #this is a dependency so you might not have to do this

cd /boot
#we are looking for the vmlinuz, this is the init ramfs file,  if its not there run
dracut #this will regenerate the vmlinuz for the latest kernel

reboot #to verify that the kernel is installed

uname -r #this will tell us the kernel version


##################################################
Lecture: Modifying the System Bootloader
##################################################
yum list kernel  #this will show the installed kernel aswell as any available updates

#modify your bootloader
grub2-set-default 1  #by default 0 is the most recent kernel
reboot

uname -r

yum list kernel

#to set it back to the most recent version
grub2-set-default 0
reboot


##################################################
Exercise: Scheduling Tasks on Red Hat Systems
##################################################
1.  Write a command that issues a statement to the system log with the current uptime information. Schedule this command to run one minute from now.
2.  Wait one minute and check the system log to view the entry.
3.  Create a new at job that runs at teatime but performs the same log entry as step 1.
4.  Turn the uptime script from step one into an executable script file located in /home/user/ called "uptimelog".
5.  Schedule an anacronjob so that the script runs every 5 days if it has not currently been run; make sure the job name is "uptimelog".
6.  Run all anacronjobs regardless of their last run timestamp.
7.  View the anacron timestamps for your "uptimelog" job.
8.  Using the same /home/user/uptimelog script, schedule the script to run once a day using cron.
9.  Create a customly-scheduled cron that runs the uptimelog every 5 minutes.





##################################################
1. Write a command that issues a statement to the system log with the current uptime information. Schedule this command to run one minute from now.
[root@localhost]# at now +1 minute
at> logger "The system current uptime is $(uptime)"

2. Wait one minute and check the system log to view the entry.
[roo@localhost]# journalctl -f

3. Create a new at job that runs at teatime but performs the same log entry as step 1.
[root@localhost]# at teatime
at> logger "The system current uptime is $(uptime)"

4. Turn the uptime script from step one into an executable script file located in /home/user/ called "uptimelog".
[root@localhost]# vim /home/user/uptimelog
logger "The system current uptime is $(uptime)"
[root@localhost]# chmod +x /home/user/uptimelog

5. Schedule an anacronjob so that the script runs every 5 days if it has not currently been run; make sure the job name is "uptimelog".
Note: place the entry at the top of the other entries so it is run first.
[root@localhost]# vim /etc/anacrontab

5       0       uptimelog       /home/user/uptimelog
6. Run all anacronjobs regardless of their last run timestamp.
[root@localhost] anacron -f

7. View the anacron timestamps for your uptimelog job.
[root@localhost]# cat /var/spool/anacron/uptimelog

8. Using the same /home/user/uptimelog script, schedule the script to run once a day using cron.
[root@localhost]# cp /home/user/uptimelog /etc/cron.daily/

9. Create a custom scheduled cron that runs the uptimelog every 5 minutes.
[root@localhost]# vim /etc/cron.d/uptimelog
*/5 * * * * root /home/user/uptimelog


##################################################
Exercise: Working with Time Services
##################################################
1.  Log in to the lab server and determine which timezone should be used based on your location.
2. Update the system's timezone to America/Chicago.
3.  Update the system time to match your current local time. Remember you need to turn off NTP first for this to work.
4.  Display current time and date information.
5.  Update the NTP time services to be 0.pool.ntp.org, 1.pool.ntp.org, 2.pool.ntp.org and 3.pool.ntp.org.
6.  Turn NTP back on and apply the changes to the chronyd service.
7.  Verify the new time servers are properly working with chronyd.




##################################################




1. Log in to the lab server and determine which timezone should be used based on your location.
[root@localhost]# tzselect
or
[root@localhost]# timedatectl list-timezones

2. Update the system's timezone to America/Chicago.
[EXAMPLE]
[root@localhost]# timedatectl set-timezone America/Chicago

3. Update the system time to match your current local time. Remember you need to turn off NTP first for this to work.
[root@localhost]# timedatectl set-ntp false
[root@localhost]# timedatectl set-time 02:00:00

4. Display current time and date information.
[root@localhost]# timedatectl

5. Update the NTP time services to be 0.pool.ntp.org, 1.pool.ntp.org, 2.pool.ntp.org, and 3.pool.ntp.org.
[root@localhost]# vim /etc/chrony.conf
# Use public servers from the pool.ntp.org project.
# Please consider joining the pool (http://www.pool.ntp.org/join.html).
server 0.pool.ntp.org iburst
server 1.pool.ntp.org iburst
server 2.pool.ntp.org iburst
server 3.pool.ntp.org iburst

6. Turn NTP back on and apply the changes to the chronyd service.
[root@localhost]# timedatectl set-ntp true
[root@localhost]# systemctl restart chronyd

7. Verify the new time servers are properly working with chronyd.
[root@localchost] chronyc sources -v


##################################################
Exercise: Working with Yum
##################################################
1.  Updating your system is an important part of being a systems administrator. However, sometimes just blindly performing a "yum update" on your system to update all packages is ill-advised. Issue the proper command to view all packages that have an available update, but do not update all packages.
2.  Search the yum repository for the Apache web server.
3.  View information about the Apache web server package.
4.  Download and install the Apache web server.
5.  List the installed packages and verify the Apache web server is installed.
6.  Issue the proper command to show all packages that provide the /var/www/html directory.
7.  Issue the command to update the Apache web server package.
8.  Remove the Apache web server package.


##################################################

1. Updating your system is an important part of being a systems administrator. However, sometimes just blindly performing a "yum update" on your system to update all packages is ill-advised. Issue the proper command to view all packages that have an available update, but do not update all packages.
[root@localhost ~]# yum check-update

2. Search the yum repository for the Apache web server.
[root@localhost ~]# yum search apache http server

3. View information about the Apache web server package.
[root@localhost ~]# yum info httpd

4. Download and install the Apache web server.
[root@localhost ~]# yum install httpd

5. List the installed packages and verify the Apache web server is in fact installed.
[root@localhost ~]# yum list installed httpd
or
[root@localhost ~]# yum list installed | grep httpd

6. Issue the proper command to show all packages that provide the /var/www/html directory.
[root@localhost ~]# yum provides /var/www
or
[root@localhost ~]# yum whatprovides /var/www

7. Issue the command to update the Apache web server package.
[root@localhost ~]# yum update httpd

8. Remove the Apache web server package.
[root@localhost ~]# yum remove httpd

##################################################
Exercise: Working with yum groups
##################################################
1.  List available groups.
2.  List all packages that belong to the "Security Tools" group. When looking at this, what packages will be installed?
3.  Install the "Security Tools" group.
4.  Undo the install of the "Security Tools" group.



##################################################


1. List available groups.
[root@localhost ~]# yum group list

2. List all packages that belong to the "Security Tools" group. When looking at this, what packages will be installed?
[root@localhost ~]# yum group info "Security Tools"

3. Install the "Security Tools" group.
[root@localhost ~]# yum group install "Security Tools"

4. Undo the install of the "Security Tools" group.
[root@localhost ~]# yum history
Loaded plugins: amazon-id, rhui-lb
ID     | Login user               | Date and time    | Action(s)      | Altered
-------------------------------------------------------------------------------
    17 |                    | 2015-05-02 11:10 | Install        |    3
    16 |                    | 2015-05-02 10:55 | Erase          |    1
    15 |                    | 2015-05-02 10:51 | Install        |    5

[root@localhost ~]# yum history info 17
Loaded plugins: amazon-id, rhui-lb
Transaction ID : 17
Begin time     : Sat May  2 11:10:49 2015
Begin rpmdb    : 666:2f8b0d9de8e03b35809bb3623696ba61ab589deb
End time       :            11:10:51 2015 (2 seconds)
End rpmdb      : 669:84e7861867838346e3c843a204e1ad2b5a0cc4ba
User           :
Return-Code    : Success
Command Line   : group install Security Tools
[root@localhost ~]# yum history undo 17


##################################################
Exercise: Working with RPM
##################################################
1. Download the "nano" RPM package using yumdownloader and change the package name to nano.rpm for this exercise.

2. Install the nano program.

3. Query to see if nano is in fact installed.

4. List all files installed as part of nano.

5. List all documentation parts of the RPM package and it's location.

6. Remove the nano package.

7. Query to see if the package is installed.



##################################################



1. Download the "nano" RPM package using yumdownloader and change the package name to nano.rpm for this exercise.
[root@localhost ~]# yumdownloader nano
[root@localhost ~]# mv nano-2.3.xxxxx.rpm nano.rpm

2. Install the nano program.
[root@localhost ~]# rpm -ivh nano.rpm

3. Query to see if nano is in fact installed.
[root@localhost ~]# rpm -qa nano

4. List all files installed as part of nano.
[root@localhost ~]# rpm -ql nano

5. List all documentation parts of the RPM package and it's location.
[root@localhost ~]# rpm -qd nano

6. Remove the nano package.
[root@localhost ~]# rpm -e nano

7. Query to see if the package is installed.
[root@localhost ~]# rpm -qa | grep nano

##################################################
Exercise: Managing Third Party Repositories
##################################################
Repository: http://dl.fedoraproject.org/pub/epel/7/x86_64/

1. Using the yum config manager, enable the epel repository without gpg.

2. View and verify that the repository is in fact enabled on the system.

3. Using yum config manager, disable the epel repository.

4. Verify the repository is disabled.

5. Using yum config manager, delete the repository from the system.

6. Instead of using config manager, manually create the repo config file and enable the repository with the repo name "fedora-epel.repo".

7. View and verify that the repository is in fact enabled on the system.

8. Download the GPG key from the epel repository and configure the .repo file to use the GPG key

9. Disable the repository on the system and verify that it is disabled.

10. Remove the repository from the system.





##################################################


1. Using the yum config manager, enable the epel repository without gpg.
yum-config-manager --add-repo=http://dl.fedoraproject.org/pub/epel/7/x86_64/
[root@anthony1 ~]# yum-config-manager --add-repo=http://dl.fedoraproject.org/pub/epel/7/x86_64/

2. View and verify that the repository is in fact enabled on the system.
[root@anthony1 ~]# yum repolist
Loaded plugins: amazon-id, rhui-lb
repo id                                                          repo name                                                                  status
dl.fedoraproject.org_pub_epel_7_x86_64_                          added from: http://dl.fedoraproject.org/pub/epel/7/x86_64/                 7,753
rhui-REGION-rhel-server-rh-common/7Server/x86_64                 Red Hat Enterprise Linux Server 7 RH Common (RPMs)                           131
repolist: 7,884

3. Using yum config manager, disable the epel repository.
[root@anthony1 ~]# yum-config-manager --disable dl.fedoraproject.org_pub_epel_7_x86_64_

4. Verify the repository is disabled.
[root@anthony1 ~]# yum repolist

5. Using yum config manager, delete the repository from the system.
There is not a command for removing the repository only disabling.
[root@anthony1 yum.repos.d]# rm -rf /etc/yum.repos.d/dl.fedoraproject.org_pub_epel_7_x86_64_.repo

6. Instead of using config manager, manually create the repo config file and enable the repository with the repo name "fedora-epel.repo".
[root@anthony1 yum.repos.d]# vim /etc/yum.repos.d/fedora-epel.repo
[EPEL]
name=Fedora EPEL 7
baseurl=http://dl.fedoraproject.org/pub/epel/7/x86_64/
enable=1
gpgcheck=0

7. View and verify that the repository is in fact enabled on the system.
[root@anthony1 yum.repos.d]# yum repolist
Loaded plugins: amazon-id, rhui-lb
EPEL                                                                                                                       | 4.4 kB  00:00:00
(1/2): EPEL/group_gz                                                                                                       | 257 kB  00:00:00
(2/2): EPEL/primary_db                                                                                                     | 4.2 MB  00:00:01
(1/2): EPEL/updateinfo                                                                                                     | 370 kB  00:00:00
(2/2): EPEL/pkgtags                                                                                                        | 1.4 MB  00:00:00
repo id                                                              repo name                                                              status
EPEL                                                                 Fedora EPEL 7                                                          7,753
rhui-REGION-rhel

8. Download the GPG key from the epel repository and configure the .repo file to use the GPG key
[root@localhost]# cd /etc/pki/rpm-gpg; wget https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7
[root@localhost]# vim /etc/yum.repos.d/dl.fedoraproject.org_pub_epel_7_x86_64_.repo
[dl.fedoraproject.org_pub_epel_7_x86_64_]
name=added from: http://dl.fedoraproject.org/pub/epel/7/x86_64/
baseurl=http://dl.fedoraproject.org/pub/epel/7/x86_64/
enabled=1
gpgcheck=1

gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7
Note: You can also take the URL of the gpg key and import it with the rpm command [root@localhost]# rpm --import https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7

9. Disable the repository on the system and verify that it is disabled.
[EPEL]
name=Fedora EPEL 7
baseurl=http://dl.fedoraproject.org/pub/epel/7/x86_64/
enable=0
gpgcheck=0
[root@anthony1 yum.repos.d]# yum repolist

10. Remove the repository from the system.
[root@anthony1 yum.repos.d]# rm -rf /etc/yum.repos.d/dl.fedoraproject.org_pub_epel_7_x86_64_.repo


##################################################
Exercise: Creating a local repository
##################################################
1. Mount the rhel-server-7.1-x86_64-dvd.iso located in /root home directory to /repos/local (be sure to create /repos/local).

2. Manually create the repo configuration file in the proper location with the proper information, assume no GPG.

3. For testing, disable or delete all other repos execpt the local repo. Please note, if you delete them you will need to rebuild your lab server.

4. Clean previous yum repo information (clean the cache).

5. View all enabled repos.

6. Download and install emacs and, on the install screen, verify it is being installed from the local-repo.

7. Remove emacs.

8. Configure the local.repo to use GPG to verify that the packages are legitimate. (This is most commonly used for remote repositories. However, for the exercise it will be easier since it's all included as part of the iso and local machine.)


##################################################


1. Mount the rhel-server-7.1-x86_64-dvd.iso located in /root home directory to /repos/local (be sure to create /repos/local).
[root@localhost ~]# mkdir -p /repos/local
[root@localhost ~]# mount -o loop rhel-server-7.1-x86_64-dvd.iso /repos/local
mount: /dev/loop0 is write-protected, mounting read-only

2. Manually create the repo configuration file in the proper location with the proper information, assume no GPG.
[root@localhost ~]# vim /etc/yum.repos.d/local.repo
[local-repo]
name=Red Hat Linux Local Repo
baseurl=file:///repos/local
enabled=1
gpgcheck=0

3. For testing, disable or delete all other repos except the local repo. Please note, if you delete them you will need to rebuild your lab server.

4. Clean previous yum repo information (clean the cache)
[root@localhost ~]# yum clean all

5. View all enabled repos.
[root@localhost ~]# yum repolist

6. Download and install emacs and, on the install screen, verify it is being installed from the local-repo.
[root@localhost ~]# yum install emacs

7. Remove emacs.
[root@localhost ~]# yum remove emacs

8. Configure the local.repo to use GPG to verify that the packages are legitimate. (This is most commonly used for remote repositories. However, for the exercise it will be easier since it's all included as part of the iso and local machine.)
[local-repo]
name=Red Hat Linux Local Repo
baseurl=file:///repos/local
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release


##################################################
Exercise: Networking
##################################################
1. View the current hostname.

2. Set temporary hostname in the shell to "myserver.domain.com".

3. For the "System eth0" connection, add the following DNS for the resolv.conf file 8.8.8.8. Ensure the changes are persistent after a reboot.

4. Modify your hostname to ensure it is a permanent change on the system (persistent and will survive reboots).

5. Add a file based host entry so the domain linuxacademy.com points to 10.0.0.1.

6. Open the correct file that determines the lookup order of DNS (file based vs external).

7. View TCP ports on the system that are listening for connections and view ports that have established connections.



##################################################


1. View the current hostname.
[root@anthony1 ~]# hostname

2. Set temporary hostname in the shell to "myserver.domain.com".
[root@anthony1 ~]# hostname myserver.domain.com; exec bash

3. For the "System eth0" connection, add the following DNS for the resolv.conf file 8.8.8.8. Ensure the changes are persistent after a reboot.
[root@anthony1 ~]# nmcli con mod "System eth0" +ipv4.dns 8.8.8.8

4. Modify your hostname to ensure it is a permanent change on the system (persistent and will survive reboots).
Note: You can edit the /etc/hostname file or perform the following command.
[root@anthony1 ~]# hostnamectl set-hostname myserver.domain.com

5. Add a file based host entry so the domain linuxacademy.com points to 10.0.0.1
[root@anthony1 ~]# echo "10.0.0.1 linuxacademy.com" >> /etc/hosts
[root@anthony1 ~]# getent hosts linuxacademy.com
10.0.0.1        linuxacademy.com

6. Open the correct file that determines the lookup order of DNS (file based vs external).
[root@anthony1 ~]# vim /etc/nsswitch.conf

7. View TCP ports on the system that are listening for connections and view ports that have established connections.
[root@anthony1 ~]# ss -tan


##################################################
Hands-on Lab: Initializing Network Connectivity
##################################################
virt-manager

click start

nmcli connection show eth0 | less

nmcli con mod eth0connection.autoconnect yes

nmcli connection up eth0

ping 192.168.122.1  #that is our host

yum -y install httpd   #lets try installing a web server, we can see that we can not download the packages

curl google.com  #we can see that we can not resolve the host, we need to add a name server to our resolv.conf

vim /etc/resolv.conf
nameserver 192.168.122.1

:wq

curl google.com  #we can see that its now resolving google.com

yum -y install httpd


##################################################
Hands-on Lab: Network Manager Sandbox
##################################################
SCENARIOS
One of the servers in your environment needs to have its network configuration verified.
You will need to check the existing interfaces, verify the location and content of appropriate configuration files and list the interface details and configuration to be sure it is correct.

s /sys/class/net #a virtual file system like proc

nmcli  #network control manager

nmcli dev status

#for a gui, open a terminal
nm-connection-editor #this will open a gui interface

#back in a terminal
nm-tui #a text based gui, network manager text user interface

nmcil con show #this will show all of our connections, a connection is a configuration, a connection is attached to a device
#out connections are stored in out /etc/sysconfig/network-scripts/


nmcli con add help #to get help

nmcli con add con-name "mycon" autoconnect yes type ethernet ifname eth1  #to add a new connection

nmcli con show

nmcli con show --active  #to show active connections

nmcli dev show #this will show our devices

vim ifcfg-mycon  #because we didnt enter an ipaddress or a gateway its going to create this script, it will create it with dhcp
:wq





##################################################
Hands-on Lab: Update the Kernel Package to Ensure a Bootable System
##################################################
SCENARIOS
One of the systems in your inventory needs to have a kernel update applied. However, it cannot use the YUM package management systems to apply the update.
You will need to manually download the RPM file for the appropriate kernel update and then apply it at the command line.

While in most instances, you can update your Red Hat system’s kernel with yum, downloading and installing the latest kernel using RPM is an alternative method for keeping your kernel up-to-date.
yum -y update kernel  #this is not how we are going to be updating

#Obtaining a new kernel
yum clean all
yum list kernel

#Download the kernel
yumdownloader kernel

#Install the kernel
rpm -ivh kernel-3.10.0-693.21.1.el7.x86_64.rpm

##We ran into a issue with dependencies
yum localinstall kernel-3.10.0-693.21.1.el7.x86_64.rpm

##Or
yum install linux-firmware dracut

#Verify that the vmlinux for the kernel is in /boot  , if its not you can create it with the dracut command

reboot

uname -r  #to get the kernel version

#to designate what kernel to boot from


yum list kernel

grub-set-default 1  #0 denotes the first kernel in the list

reboot

uname -r



##################################################
Hands-on Lab: Installing and Updating Software
##################################################
SCENARIOS
You have been given responsibility for a new server. This server needs to have some packages installed for use as well as maintenance done on the available repositories for system installation.

This server will be used for local development of websites and should have a local text-only web browser (elinks) as well as the Apache web server. Verify the Apache installation once complete by starting the appropriate service and using the 'elinks' browser to display the default site on 'localhost'.

Additional software not available in the standard repositories is needed. The repository is called 'epel' and will need to be created in a file called 'epel.repo' in the appropriate repository directory on your system (see the repository configuration text in the description for this lab). Once you have the repository created, you will need to import the repository keyfile to verify packages with when you install them (see the repository key file command in the description above).

After updating your system to verify the new repository, search for a package called 'audacity' and display information about that package and verify the repository it is available from.

Overview
This lab covers how to find and install a new package onto a server, how to check that a package installed correctly, and how to add and delete packages from a server. For this lab, we will be extracting the packages Apache and Audacity, as well as deleting and then re-creating an EPEL package.


Repository Configuration:


[epel]
name=Extra Packages for Enterprise Linux 7 - $basearch
baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch
failovermethod=priority
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7

Repository Key File Command:


wget -O /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7 https://getfedora.org/static/352C64E5.txt


###### Installing and Updating Software

yum -y update

yum install elinks

yum install httpd

yum provides /etc/hosts  #to see that packages provides the hosts file

#check to see if apache has been installed
ll /var/www

systemctl httpd #start the apache server

elinks http://localhost  #we can verify that its running

#verify that the epel repo is installed
ll /etc/yum.repos.d

#we are going to delete the repo to recreate it
rm /etc/yum.repos.d/epel*

#recreate the repo
vim /etc/yum.repos.d/epel.repo
[epel]
name=Extra Packages for Enterprise Linux 7 - $basearch

baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch
metalink=https://mirrors.fedoraproject.org/metalink?repo=epel-7&arch=$basearch
failovermethod=priority
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7


:wq

#the gpg key is located here
/etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7

#delete the key
rm /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7

#add the key

sudo rpm --import http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7

#clean out the cache
yum clean all

yum search audacity

#lets check and see what repo audacity is coming from
yum info audacity

#remove apache
yum remove httpd





##################################################
Quiz: Deploy, configure, and maintain systems
##################################################
1) The /var/www/html directory has mysteriously shown up on your system. What command could you issue to determine what software package created it? Please note: This does not search your system but instead searches a repository for files that are created by the package.

Correct

Correct answer
yum provides /var/www/html

2) Repos listed in the /etc/yum.repos.d/ must end in .repo for them to be recognized.

Correct

Correct answer
True

3) By default, chronyd is the default ntp deamon on a Red Hat Enterprise 7 install.

Correct

Correct answer
True

4) Given the following group info, what packages were installed as part of the group? Group: Security Tools Group-Id: security-tools Description: Security tools for integrity and trust verification. Default Packages: =scap-security-guide +openscap -hmaccalc openscap-utils

Correct

Correct answer
scap-security-guide

5) Yum packages cannot be removed without having the package dependencies removed when the package was originally installed.

Correct

Correct answer
True

6) The "at" utility wasn't installed on your Red Hat distribution by default. After running yum install at, you notice that the at service is not running. Which command(s) could you issue to start the service?

Correct

Correct answer
systemctl start atd, systemctl restart atd

7) The command systemctl set-default multi-user.target changes the system so that your default target at boot time is the multi-user.target.

Correct

Correct answer
True

8) Which yum command, when provided the proper argument, displays all packages on the system installed by yum?

Correct

Correct answer
yum list

9) Where are anacron jobs configured?

Correct

Correct answer
/etc/anacrontab

10) A script located in the /etc/cron.daily directory runs how often?

Correct

Correct answer
Once a day

11) You've just updated the server sources in the /etc/chrony.conf configuration file. How do you apply the changes so NTP is not looking at those sources?

Correct

Correct answer
systemctl restart chronyd

12) If you forget yum commands on the exam, which are ways to get help?

Correct

Correct answer
yum help, man yum, info yum

13) Which command(s) displays all documentation files associated with the pykickstart package?

Correct

Correct answer
rpm -qd pykickstart

14) What is the best method for setting the timezone?

Correct

Correct answer
Use timedatectl set-timezone

15) You've successfully modified the /etc/chronyd.conf configuration file to reflect a new ntp server. How do you view and make sure the changes applied correctly?

Correct

Correct answer
chronyc sources

16) Select the true statement(s) given symbols as they relate to packages and groups.

Correct

Correct answer
- means the package is not installed and will not be installed if the group is installed or updated, = Means the package is installed and was installed as part of the group

17) List all enabled and disabled repos on your Red Hat machine.

Correct

Correct answer
yum repolist all

18) If a package installed on the system needs a required cron job scheduled, where is the cron config file for the package located when the package is downloaded and installed?

Correct

Correct answer
/etc/cron.d/

19) The user "anthony" is located in the /etc/deny.cron file. This means that all users on the system except anthony are denied access to use the cron utility.

Correct

Correct answer
False

20) Which command and option would be used to display the current kernel version?

Correct

Correct answer
uname -r

21) Non-privileged users on the Linux system can schedule anacron jobs.

Correct

Correct answer
False

22) How do you view the status of time synchronization?

Correct

Correct answer
timedatectl

23) You've installed the httpd package on your Red Hat Linux system. How might you view all available or associated documentation locations that were installed with the package?

Correct

Correct answer
rpm -qd httpd

24) The tzselect command is a tool used to help "guide" you through choosing which timezone you should configure your server for.

Correct

Correct answer
True

25) How can you determine if the httpd package is installed on a system?

Correct

Correct answer
yum list installed httpd, yum list installed | grep httpd

26) Which yum command(s) shows all currently installed kernels and all available kernels for a system?

Correct

Correct answer
yum info kernel, yum list kernel

27) The "at" utility wasn't installed on your Red Hat distribution by default. After running yum install at, you notice that the at service is not running. After starting the service you want to be sure that the atd service is enabled to start when the system boots. Which command(s) should you issue to enable this?

Correct

Correct answer
systemctl enable atd

28) Which command(s) allows you to list all available time zones?

Correct

Correct answer
timedatectl list-timezones

29) Kickstart documentation files can be found where?

Correct

Correct answer
/usr/share/doc









##################################################
Manage users and groups
##################################################
##################################################
Lecture: Create, Delete, and Modify Local User Accounts
##################################################
id #this will show use items about the user

#the root user always has an id of 0

#users that have an id of 1-200, there are users for specific redhat processes

#201-999 those are persistent users that dont own files on the system, for example, if we installed apache

#what is the /etc/passwd file, it list all of the user accounts on the system, and information associated with those users
#/sbin/nologin  #this telss the system not to let this user login and cant access a shell

each user can have only 1 primary group, but they can belong to any number of supllemntart groups

groups root #we can see the root users groups

groups user #we can see the user user groups

the /etc/shadow file #this is where the password hashes are stored

/etc/groups

useradd --help  #useradd - create a new user or update default new user information

vim /etc/login.defs  #this is where the defaults for the useradd command are located

vim /etc/defaults/useradd  #this is where the default attribute values are stored

#create a new user
useradd joe

#change a users password
passwd joe #passwd - update user's authentication tokens

#modify a users account
usermod #usermod - modify a user account

usermod -L joe  #this will lock the users account #if we look in the /etc/shadow file we will see that the user has a ! after their name, what it actually does is changes the users password so they cant login to the system

usermod -U joe  #this unlocks the users account

usermod -u 1010 joe #this will modify the users id

useradd -u 1050 -d /home/mary1 mary

usermod -G wheel mary  #this will add the mary to the wheel group

#delete a user
userdel

userdel -r #remove the users home dir and mail spool


##################################################
Lecture: Change Passwords and Adjust Password Aging for Local User Accounts
##################################################
vim /etc/login.defs #set parameters for login password aging, there is where the defaults are set

#set password aging for a specific user password policy enforcement

chage #chage - change user password expiry information.  Used to enforce password policy

#there are no privileges on the shadow file and should never have them, thats because you do not want any user to be able to access it only the root user

useradd user1
usermod -s /sbin/nologin user1  #the user wont have a active shell but will still have a user name and password

chage -l user1 #to see this users password policy information

date -d '+40days' +%F  #

chage -E 2015-06-05

chage -l user1

chage -M 90 user1  #this make the password to expire in 90 days

chage -E -1 user1 #this remove the account experation

usermod -s /bin/bash user1 #we set this as nologin earlier

chage -d 0 user1 #this will expire everything, you will have to change your password on next login

chage -I 5 user1 #this will make it so that the password becomes inactive and they will have to contact a sysadmin to unlock the account


##################################################
Lecture: Create, Delete, and Modify Local Groups and Group Memberships
##################################################
getent group <username>

#create a new group
groupadd

getent group #will list all groups

useradd student

groups student #to get the user students groups

passwd student

usermod -g class1 student #this will change your primary group

newgrp #newgrp - log in to a new group.  The newgrp command is used to change the current group ID during a login session.

goupdel #to delete groups


##################################################
Lecture: Using set-GID On Directories
##################################################
#setting the guid on a directory, when you set this and you create files in that directory the new files will inherit the group ownership of the parent dorectory

cd /home
mkdir groups
cd groups
mkdir {galactica,colonial-one}
groupadd galactica
groupadd colonial-one

chown :colonial-one colonial-one  #nothing in front of the : means that we are not going to change the owner of the file
chown :galactica galactica
ll

useradd viper
passwd viper

groups viper
id viper

usermod -aG colonial-one viper
usermod -aG galactica viper

groups viper
id viper

chmod g+w galactica
chmod g+w colonial-one

#open another terminal with the viperuser
cd /home/users/groups/galactica
touch file1
ll

#go back to the first terminal
chmod g+s galactica

#go to the second terminal
touch file2
ll
#we can see the the second file created inherited the group ownership permissions of the parent directory

#go back to the first terminal
chmod g+s colonial-one


##################################################
Lecture: Configure a System to Use an Existing Authentication Service for User and Group Information: Using Realmd
##################################################
ping ad.linuxacademy.com  #this is our AD server

#required for us to discover our AD realm
yum install -y realmd

realm discover ad.linuxacademy.com

yum upgrade -y  #yumupdate and upgrade do the samething

realm discover ad.linuxacademy.com

yum install -y odd-job oddjob-mkhomedir sssd adcli samba-common

realm join ad.linuxacademy.com
#enter the pw for the admin

realm discover ad.linuxacademy.com

vim /etc/ssh/sshd_config
#uncomment all Kerberos options and set to yes


:wq

systemctl restart sshd

logout and try to login with the test user

ssh -l test@ad.linuxacademy.com <ipaddress>

#you can also use authconfig-gtk #this is a gui way to configure a system to communicate to ldap


##################################################
Hands-on Lab: User Groups and Accounts Tasks
##################################################
You must adjust the aging for profiles. 60 days before a password change, 10 days notice. min 10 characters for password. We dont want to have the users profiles become inactive. Just force a password change.

1. Change the system to enable password aging as specified above.
vim /etc/login.defs

2. Create these users. Add their full name as part of the comment field for the user.
Sam Browne, username sbrow
Caius Marco, username cmarc
Usko Stylianos, username ustyl
Duane Aleksandro, username dalek

useradd -c "Sam Brown" sbow
useradd -c "Caius Marco" cmarc
useradd -c "Usko Stylianos" ustyl
useradd -c "Duane Aleksandro" dalek


3. Change the passwords for the new users to be 10 characters. The passwords may be anything that complies with the rules that are set.
passwd sbow
passwd cmarc
passwd ustyl
passwd dalek

tail /etc/shadow


4. Create the following groups.
marketing
sales
creative

groupadd marketing
groupadd sales
groupadd creative

tail /etc/groups

5. Create the following folders.
Create a folder called /groups
under groups will be the following folders that are owned by the relevant group.
marketing
sales
creative

mkdir /groups
mkdir /groups/{marketing,sales,creative}

6. Set the folders so that any files created under them are owned by the relevant group.
chgrp -R creative creative
chgrp -R marketing marketing
chgrp -R sales sales

chmod g+srw creative
chmod g+srw marketing
chmod g+srw sales

7. Add sam and caius to marketing
usermd -G marketing cmark
usermd -G marketing sbrow


8. Add Usko to sales.
usermod -G sales ustyl


9. Add duane to creative.
usermod -G creative dalek

tail groups

10. Make your current user usko.
su - ustyl

11. As Usko. You should not be able to create files under with marketing or creative.
cd /groups/sales
touch testfile

cd ../marketing
touch testfile

exit

userdel -r ustyl

12. As Usko. You should be able to create files under sales.
su -

13. Delete the user usko and delete his home folder.

14. Check to see if usko's home folder has been deleted.






##################################################
Hands-on Lab: Using an Existing Authentication Service
##################################################
SCENARIOS
One of the servers in your environment needs to be connected to an existing AD LDAP Domain (see the description above or the Lab Guide for details).

You will configure the user to authenticate via Kerberos and for the home directory of the domain user to mount via NFS dynamically on sign in.

Once you have verified the user(s) are able to sign in, you will display the remote filesystem mounts and verify they are from the anticipate LDAP server.

##################################################
#testin the environment
yum upgrade

ping ad.linuxacademy.com

#Binding the AD domain
yum install realmd

realm discover ad.linuxacademy.com

#install required packages
yum install oddjob oddjob-mkhomedir sssd adcli samba-common-tools

#join the domain
realm join ad.linuxacademy.com
Password:

#Run the discover command agin to verify that the domain has been discovered
realm discover ad.linuxacademy.com

#allow AD users to access
realm permit --realm ad.linuxacademy.com --all

#Now we need to edit the kerberos config in /etc/ssh/sshd_config
# Kerberos options
KerberosAuthentication yes
KerberosOrLocalPasswd yes
KerberosTicketCleanup yes
KerberosGetAFSToken yes
KerberosUseKuserok yes

:wq

#Restart the sshd daemon
systemctl restart sshd

#Testing
#open a new terminal and login as the test user
ssh -l test@ad.linuxacademy.com <ip_address>


LinuxAcademy123
##################################################
Hands-on Lab: Use Existing LDAP Credentials For Single Sign-On
##################################################
#connect to the test server

#test connectivity
ping ldap.linuxacademy.com/


#bind the member to the ldap server
yum install -y authconfig-gtk

yum install -y nss-pam-ldapd

yum install -y pam_krb5

With the LDAP dependencies installed, we can now enter our LDAP information under the Identity & Authentication tab.
The LDAP Search Base DN is dc=linuxacademy,dc=com, and the LDAP Server is ldap://ldap.linuxacademy.com.
Check the box for Use TLS to encrypt connections.

Press Download CA Certi cate.... The URL for the certi cate is http://ldap.linuxacademy.com/pub/cert.pem

Leave Authentication Method as Kerberos password.

Move to the Advanced Options tab. Check Create home directories on the  rst login. Apply the changes.



#Auto mount a home directory
yum install -y autofs nfs-utils openldap-clients

vim /etc/auto.master.d/ldap.autofs
/home/guests /etc/auto.ldap

:wq


vim /etc/auto.ldap
* -rw ldap.linuxacademy.com:/home/guests/&

:wq

#we need to enable LDAP credentials
vim /etc/pam.d/sshd
auth sufficient pam_ldap.so

auth sufficient pam_permit.so

:wq

systemctl start autofs &&  systemctl enable autofs
systemctl restart sshd


#login to the server and test

ldapuser1@54.165.137.73
L1nUxAcaD3meee



##################################################
Exercise: Managing Users And Groups
##################################################
1. Create two new users called starbuck and apollo. For each user, assign the password "student" without quotes.
useradd starbuck
passwd starbuck

useradd apollo
passwd apollo


2. Modify starbuck's GECOS to say "pilot".
usermod -c pilot starbuck


3. View apollo's user id and group id information.
id apollo

4. Create a third account as a system account named "viper".
useradd viper

5. Create a new group called "galactica" and a folder named galactica in /home/groups/.
groupadd galactica
mkdir -p /home/group/galactica

6. Create a second new group called "colonial-one" and a folder named colonial-one in /home/groups/.
groupadd colonial-one
mkdir -p /home/groups/colonial-one

7. Modify starbuck's account so her primary group is "galactica".
usermodd -g galactica starbuck

8. Modify viper's account so that its primary group is "viper" and it belongs to both the "galactica" and "colonial-one" supplementary groups.
usermod -aG galactica,colonial-one viper


9. Modify directory permissions for each group directory so that the respective group name owns the group and has read/write/execute permissions on the directory.
chown :galactica /home/group/galactica
chown :colonial-one /home/groups/colonial-one
chmod g+rwX galactica/
chmod g+rwX colonial-one/

10. Apply special permission bits to the "galactica" folder so that, regardless of the user's primary group, any directories or files created in the "galactica" folder are owned by the "galactica" group.
chmod g+s galactica/


11. Change the "viper" user password and login to the system as the viper user. Notice viper's primary group is "viper". Navigate into the /home/groups/galactica directory and touch file1 then view permissions.
passwd viper
cd /home/groupsd/galactica

12. Modify the user apollo so that the user has authentication but cannot login to a shell terminal
usermod -s /sbin/nologin apollo


##################################################
1. Create two new users called starbuck and apollo. For each user, assign the password "student" without quotes.
[root@localhost user]# useradd starbuck
[root@localhost user]# passwd starbuck
Changing password for user starbuck.
New password:
Retype new password:
passwd: all authentication tokens updated successfully.
[root@localhost user]# useradd apollo
[root@localhost user]# passwd apollo
Changing password for user apollo.
New password:
Retype new password:
passwd: all authentication tokens updated successfully.
[root@localhost user]#

2. Modify starbuck's GECOS to say "pilot".
[root@localhost user]# usermod -c pilot starbuck

3. View apollo's user id and group id information.
[root@localhost user]# id apollo
uid=1003(apollo) gid=1003(apollo) groups=1003(apollo)
Note: Your gid/uid might not match that of what is displayed in this lab. You can modify that using the usermod command and groupmod command.

4. Create a third account as a system account named "viper".
[root@localhost user]# useradd -r viper

5. Create a new group called "galactica" and a folder named galactica in /home/groups/.
[root@localhost user]# groupadd galactica; mkdir -p /home/groups/galactica

6. Create a second new group called "colonial-one" and a folder named colonial-one in /home/groups/.
[root@localhost user]# groupadd colonial-one; mkdir -p /home/groups/colonial-one

7. Modify starbuck's account so her primary group is "galactica".
[root@localhost user]# usermod -g galactica starbuck
[root@localhost user]# usermod -g galactica starbuck
[root@localhost user]# groups starbuck
starbuck : galactica
[root@localhost user]# id starbuck
uid=1002(starbuck) gid=1005(galactica) groups=1005(Galactica)
[root@localhost user]#

8. Modify viper's account so that its primary group is "viper" and it belongs to both the "galactica" and "colonial-one" supplementary groups.
Note: when we created the viper user, it created a group called viper and assigned it as the viper user's primary group.
[root@localhost user]# usermod -aG galactica,colonial-one viper
[root@localhost user]# id viper
uid=1004(viper) gid=1004(viper) groups=1004(viper),1005(galactica),1006(colonial-one)
[root@localhost user]#

9. Modify directory permissions for each group directory so that the respective group name owns the group and has read/write/execute permissions on the directory.
[root@localhost groups]# chown :colonial-one -R colonial-one
[root@localhost groups]# chown :galactica -R galactica
[root@localhost groups]# chmod g+rwX colonial-one/
[root@localhost groups]# chmod g+rwX galactica/

10. Apply special permission bits to the "galactica" folder so that, regardless of the user's primary group, any directories or files created in the "galactica" folder are owned by the "galactica" group.
[root@localhost groups]# chmod g+s galactica/

11. Change the "viper" user password and login to the system as the viper user. Notice viper's primary group is "viper". Navigate into the /home/groups/galactica directory and touch file1 then view permissions.
[viper@localhost galactica]$ touch file1
[viper@localhost galactica]$ ls -al
total 0
drwxrwsr-x. 2 root     galactica 29 Apr 28 11:36 .
drwxr-xr-x. 4 root     root      41 Apr 28 11:12 ..
-rw-rw-r--. 1 viper    galactica  0 Apr 28 11:36 file1
[viper@localhost galactica]$
You will notice that even though vipers current logged in/primary group is "viper", when the file was created it was created with the permissions of the "parent" directory since the SGID bit was set.

12. Modify the user apollo so that the user has authentication but cannot login to a shell terminal
[root@localhost ~]# usermod -s /sbin/nologin apollo



##################################################
Quiz: Manage Users And Groups
##################################################
1) Which command would be used to add a supplementary group called developers to the user jeff? Note: Jeff already has supplementary groups and he needs to stay a member of those groups.

Correct

Correct answer
usermod -aG developers jeff

2) Given the domain "ad.linuxacademy.com", which command will discovery if the domain exists and return the packages needed to be installed?

Correct

Correct answer
realm discover ad.linuxacademy.com

3) What would you edit in order to ensure that all new users have a password expiration of 30 days?

Correct

Correct answer
/etc/login.defs file and the PASS_MAX_DAYS to 30

4) Which UID ranges are reserved for system users? Or users used by the system for processes that do not own files on the file system?

Incorrect

Correct answer
201-999

5) Which package is required for using the realm command when joining/discovering available SSSO domains?

Correct

Correct answer
yum install -y realmd

6) Which command will set the expire date for the user jeff to be 90 days from today?

Correct

Correct answer
chage -E $(date -d "+90days" +%F) jeff

7) What UID ranges are reserved for regular users?

Correct

Correct answer
1000+

8) Which command would you use to set the maximum amount of time between password changes for the user jeff to 60 days?

Correct

Correct answer
chage -M 60 jeff

9) The UID range for Red Hat assigned system users is:

Correct

Correct answer
1-200

10) Red Hat 7 UID for the root account is:

Correct

11) Which flag (argument), when passed to the chage command, will force a user to change their password every 30 days?

Incorrect

Correct answer
-M

12) Which flag (argument), when passed to the useradd command, will set the supplemental group for a user?

Correct

Correct answer
-G





##################################################
Manage security
##################################################
##################################################
Lecture: Configure Firewall Settings Using firewall-config, firewall-cmd, or iptables
##################################################
#For the redhat sys admin cert we have 2 options that we can use, both of these options integrate with the netfilter linux kernel, net filter is what really does the magic and allows filtering of specific ports in and out of the linux system
#to control netfilter we have 2 different services, which allow us to do that, iptables and firewalld, firewalld is the default
#firewalld is a lot easier to use than iptables

yum install firewalld firewall-config  #firewalld is installed by default on a base install of RDEL 7 not on a minimumm install

systemctl start firewalld
systemctl enable firewalld

#firewalld has 2 modes
#runtime change, the change only lives for as long as the system service is running

#you can make a runlevel change but when you reload the service your change is gone
#but when you make a permanent change it doesnt apply until you reload the service

firewall-cmd  -get-zones  #firewalld groups all of your rules into zones

firewall-cmd --get-default-zone #this will show us our default zone

firewall-cmd --help

#look at the current rules in place
firewall-cmd --list-all

#list a specific zones rules
firewall-cmd --zone=home --list-all


firewall-cmd --zone=home --add-source=192.168.1.0/24  #this adds a ip range to be affected by the rules

#to reload our rules
firewall-cmd --reload

#to make your changes persistent
firewall-cmd --zone=home --permanent --add-source=192.168.1.0/24

firewall-cmd --reload

###
yum install httpd
systemctl start httpd

curl -k <ipaddress>
#it will fail because we dont have port 80 open

firewall-cmd --zone=public --add-port=80/tcp  #this is just a runtime change because we didnt add permanent

firewall-cmd --zone-public --list-all
#we can see that we have port 80 listed

curl -k <ipaddress>

firewall-cmd --reload
firewall-cmd --zone-public --list-all
#we can see that we nolonger have port 80 listed

firewall-cmd --zone=public --add-port=80/tcp --permanent  #this will make the change permanent

firewall-cmd --reload #now the rule will survive a reboot

firewall-config #this will open a gui based interface

firewall-cmd --query-panic

firewall-cmd --panic-on  #this locks down all ports


##################################################
Lecture: Configure Key-Based Authentication for SSH
##################################################
#you can give your private key to anyone, it can live in the wild
#your private key however is our authentication method, we need to make sure that its kept private

#Generate signed ssh-keys
#the default encryption type on a redhat os is rsa
ssh-keygen
enter
enter

cd /home/user/.ssh
id_rsa #this is your private key
id_rsa.pub #this is your public key

#copy the key to your remote server, you could just copy it over but use the command
ssh-copy-id user@<ipadddress>

#now you can use your keys to access the server

ssh user@<ipaddress> ls   #you can also pass commands

#how to not have to keep entering the passphrase
ssh-agent bash
ssh-add
#enter the passphrase and it will keep it in a cache for this session

permissions on a public key need to be 644

permissions on a private key need to be 600

##################################################
Lecture: Introduction to SELinux
##################################################
#selinux was originally started by the NSA

#selinux is enabled by default

-if a service as httpd is compromised then the attacker could potentially have access to open all the files on your system.
essentially, SELinux defines a set of rules that determine what process can access specific files and locations on a file system
-A context is assigned to every process, directory, and port which is used to determine if a process can access that specific resource.
-in this course we will focus on the "type" context.
-SELinx has 3 modes
--enabled
--passive
--disabled
---disabled must be configured in /etc/selinux/config and a reboot must occur in order to enter into disabled mode.  This is not suggested.

-Boolean: is a conditional rule that allows runtime modification of the security policy without having to load a new policy.
For example, to allow the cgi scripts to be executed then you can enable httpd_enable_cgi boolean.
The opposite is true if the administrator wants to just disable all cgi scripts on a system

-Man pages
--Booleans
--SELinux
--Getsebool

##################################################
Lecture: Set enforcing and permissive modes for SELinux
##################################################
getenforce  #that means selinus is currently enforcing boolean rules

setenforce 0 #to put selinux into permissive mode

#when in permissive mode selinux will still monitor and report, but it wont enforce

setenforce 1 #this will set enforment to active

cd /etc/selinux
vim config
#if you change
SELINUX=permissive #and reboot, selinux will then be in permissive more, there isnt a service for us to reboot to pull the config change
#if you change this to
SELINUX=disabled #this will disable selinux, nothing will belogged or enforced

:wq

##################################################
Lecture: List and identify SELinux file and process context
##################################################
#selinux is basically an application level firewall
#files are created with the context of the parent dirctory
#if we have selinux enable every file or directory has a whats called a lable or context
ls -Z

yum install httpd
systemctl start httd

cd /var
ls -Z  #the Z lists the context

#How to view all available contexts and files associated with them
semanage fcontext -l

#anything after (/.*)? falls under that context

semanage fcontext -l | grep /var/www

vim /home/user/index.html

ls -Z /home/user

mv /home/user/index.html /var/www/html/  #inxed will retain the same context as when it was created

cd /var/www/html
ls -Z
#we can see that index.heml doesnt have the correct context for the apache server to access the file

ps -auxZ  | grep httpd #we can see the context of the httpd process

restorecon index.html  #this will apply the proper context to the file

#force a relable for all our files and directories on next reboot
touch /.autorelable
cd /
ls -a #we will see that the .autorelable file is in root

#now when the system reboots it will relable verything on our file system

##################################################
Lecture: Restore Default File Contexts
##################################################
semanage fcontect -l

vim /etc/httpd/conf/httpd.conf
#change the home directory for the default web content
DocumentRoot "/content"

#and
<Directory "/content">

<Directory "/content">

:wq

mkdir /content
systenctl restart httpd

chown apache:apache -R /content
vim index.html
This is my html content
:wq

ls -Z

#to verify that its selinux thats stopping apache from accessing the index.html
setenforce 0
getenforce

semanage fcontext -a -t httpd_sys_content_t '/content(/.*)?'

restorecon -Rv /content  #its going to show changes for files labels, persistent

####We want to remove a context
semanage fcontext -l | grep /content

semanage fcontext -d "/content(/.*)?"  #the /content dir will still retain the context until we restorcon

restorecon -Rv /content



##################################################
Lecture: Use Boolean Settings to Modify System SELinux Settings
##################################################
#setting a boolean value doesnt not make that value persistent.  we must specify a persistent change.

getsebool -a  #list all boolean values and their current setting

semanage boolean -l  #this will list all of our boolean values, the default column is what that valuse is supposed to be when our system boots

yum install httpd
sysetmctl start httpd
sysetmctl enable httpd

cd /etc/httpd/conf.d
cat userdir.conf

sed -i 's/disabled/public_html/' userdir.conf

systemctl restart httpd

cd /home
chmod 711 user
cd user
mkdir public_html

echo "this is my web page" > public_html/index.html

chown user:user  -R public_html

chmod 755 -R public_html/

<ipaddress>/~user

#is this a selinux issue?

setenforce 0  #turn selinux off

setenforce 1  #turn selinux off

semanage boolean -l | grep httpd_enable_homedirs
setsebool httpd_enable_homedirs on

semanage boolean -l | grep httpd_enable_homedirs #we can see that its currently on but the default is off, if you reboot you will not be able to access the web page

setsebool -P httpd_enable_homedirs on  #this makes the bool persistent

semanage boolean -l | grep httpd_enable_homedirs  #now the default is set to on, it will remain enabled after reboot

##################################################
Lecture: Diagnose and Address Routine SELinux Policy Violations
##################################################
yum install setroubleshoot-server  #this will install a command called sealert

sealert #is used to diagnose selinux denies, sealert is the user interface compnant of setroubleshoot-server

setsebool httpd_enable_homedirs off

cd /var/log/audit  #this is not user friendly, because of that we have the sealert command
tail audit.log

man sealert

sealert -a /var/log/audit/audit.log

vim /etc/httpd/httpd.conf
#change the home directory for the default web content
DocumentRoot "/content"

#and
<Directory "/content">

<Directory "/content">

:wq

mkdir /content
systenctl restart httpd
echo "this is my website content" > /content/index.html
chown apache:apache -R /content


sealert -a /var/log/audit/audit.log

#the adit log will show use that we need to change the label on or index.html file

##################################################
Hands-on Lab: Red Hat Security With FirewallD
##################################################
yum install -y firewalld httpd

#lets check if iptables it setup
systemctl status iptables

#Check firewalld
systemctl status firewalld

#Start apache
systemctl start httpd

yum install elinks

elinks http://localhost  #we can see that its running


#lets take a look at the services
firewall-cmd --list-services

#verify the zone that you are in, the default zone should be public
firewall-cmd --get-default-zone

#list the rules that are setup for the public zone
firewall-cmd --zone=public --list-all

#go to the second server and see if we can connect to the first server
yum install -y elinks

elinks http://<1st_server_ip>  #we cant connect, lets test if its firewalld thats stopping us by going to the first server and stopping the firewalld service

#back on the first server
systemctl stop firewalld

#go back to the second node and check again
elinks http://<1st_server_ip>  #we can now connect, so firewalld is what is stopping us

#back on the first server
systemctl start firewalld


#now lets add the post 80tcp for the rules

firewall-cmd --zone=public --add-port=80/tcp  #but the rule is not persistant

#list the rules that are setup for the public zone
firewall-cmd --zone=public --list-all


#go back to the second node and check again
elinks http://<1st_server_ip>  #we can now connect


#make the rule permanent, the rule will now be saved

firewall-cmd --zone=public --add-port=80/tcp --permanent

#lets verify that the rule is persistent by doing a reload
firewall-cmd --reload

#test the webpage again
elinks http://<1st_server_ip>  #we can now connect


#Remove the port
firewall-cmd --remove-port=80/tcp

#to make the change permanent
firewall-cmd --permanent --remove-port=80/tcp

firewall-cmd --reload

firewall-cmd --list-all


##################################################
Hands-on Lab: Regaining Access to a System
##################################################
One of the systems in your inventory needs to be accessed, but the root password was changed and is no longer known. You have access to the console however and can regain access by booting to a special mode.

Change the boot parameters for the kernel and gain access to the command prompt. Change the root password and notify the system to reapply security contexts on the subsequent system boot to allow the changed password to apply.


#connect to the node using vnc
#open a terminal

#open the virtual machine manager
virt-manager

#click start to start the guest os

#press the up or down arrow in the grub menu to stop the countdown and press E to edit

#Scroll down till you see linux16 line

#press ctrl+e to goto the end of the line
#remove the console information and the rhgb section
#add to the end of the line where rhgb was
rd.break

crtl+x #to continue intramfs


#mount the file sytem
mount -o remount,rw /sysroot

chroot /sysroot

#now we need to change the root password
passwd root
#enter the new password

#now we need to instruct the system to update out selinux
touch /.autorelabel

exit
exit

#Once the system finishes booting we can login with the new password





##################################################
Hands-on Lab: Configure SELinux and Add - Restore Security Contexts
##################################################
#verify that selinux is enforcing
getenforce

#We can see that it is enforcing
#if it wasnt
setenforce 1
Or
vim /etc/selinux/config
#set to enforcing
:wq

systemctl reboot


ls -Z /root

yum install https elinks -y

systemctl start httpd

systemctl enable httpd

elinks http://localhost  #we can see that its working

#lets look at the security contexts in /var
cd /var
ls -Z

cd

vim echo 'this is my web page' > index.html

ls -Z index.html

mv index.html /var/www/html

chown apache:apache /var/www/html/index.html

chmod 775 /var/www/html/index.html


elinks http://localhost/index.html  #we will see that we do not have permission to access it, this is because of the security context that the file is in

restorecon index.html

ls -Z

elinks http://localhost/index.html   #now we can access it

#Now we want to create a file that contains our security context in /root

ls -Z index.html > /root/context.txt



##################################################
Hands-on Lab: Allowing Programs Through the Firewall
##################################################
#login with VNC
#Open a terminal
virt-manager

#start the virtual machine

#open the terminal

#login
root
#pw is linuxacademy

#verify that we do have a webpage to serve
curl localhost

#now try to access the vm from the main lab servers web browser

#go back to the vim, lets add a rule

firewall-cmd --state

firewall-cmd --add-service=http --permanent

firewall-cdm --reload

#go back to the main lab server and test with the browser again





##################################################
Hands-on Lab: Accessing Systems and Working With Files
##################################################
ssh-keygen

cd .ssh
#we can see the public and private keys here

#now we need to copy the key to the server we want to connect to
#the easy way
ssh-copy-id <user>@<server_ip>

#the hard way
#go to the second server
cd .ssh

cat authorized_keys  #the file permissions have to be 600

#Working with files and folders
#back on server 1
sudo su

mkdir marketing

chown -R user:user /marketing

ll

exit

mkdir /marketing/2015


#create a tar with the date
tar -czf backup-`date +%Y%m%d`.tar.gz /backup


#send the backup to the other server
scp backup-.tar.gz user@<ip>:/


#Now extract the achive
tar -xvf backup.tar.gz







##################################################
Exercise: Configure key-based authentication for SSH
##################################################
The goal of this lab is to setup secure authentication to remote servers using SSH keys and to issue commands to remote servers.

1. Start two LinuxAcademy.com lab servers. This exercise will refer to the servers as server1 and server2.

2. Working as the user "user", on server1 generate a new RSA public and private key with a pass phrase of your choosing.

3. Copy the SSH key to server2.

4. Remotely connect to server2 from server1 using the SSH keys.

5. On server1, issue the correct commands to temporarily store the pass phrase in your current shell session. This will prevent you from having to enter the pass phrase each time you connect to server2.

6. Issue a remote command to create a directory named "test" on server2.


##################################################


1. Start two LinuxAcademy.com lab servers. This exercise will refer to the servers as server1 and server2.

2. Working as the user "user", on server1 generate a new RSA public and private key with a pass phrase of your choosing.
[root@server1 ~]# ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/user/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /user/.ssh/id_rsa.
Your public key has been saved in /user/.ssh/id_rsa.pub.
The key fingerprint is:
43:eb:29:50:45:57:78:64:58:03:d3:e3:e2:52:dc:0b root@server1.mylabserver.com
The key's randomart image is:
+--[ RSA 2048]----+
|       .o +O*    |
|       . .oo+.   |
|      . .. + .   |
|     . . .E o    |
|    .   So o .   |
|     . ..o. .    |
|      . o.       |
|       .         |
|                 |

+-----------------+

3. Copy the SSH key to server2.
[root@server1 ~]# ssh-copy-id user@52.25.4.176

4. Remotely connect to server2 from server1 using the SSH keys.
[root@server1 ~]# ssh user@52.25.4.176
Enter passphrase for key '/user/.ssh/id_rsa':

5. On server1, issue the correct commands to temporarily store the pass phrase in your current shell session. This will prevent you from having to enter the pass phrase each time you connect to server2.
[root@server1 ~]# ssh-agent bash
[root@server1 ~]# ssh-add
Enter passphrase for /user/.ssh/id_rsa:
Identity added: /root/.ssh/id_rsa (/user/.ssh/id_rsa)
[root@server1 ~]# ssh user@52.25.4.176

6. Issue a remote command to create a directory named "test" on server2.
[root@server1 ~]# ssh user@52.25.4.176 mkdir test

##################################################
Exercise: Working With SELinux Context, Booleans, and Troubleshooting
##################################################
1. Download and install the apache web server.

2. Modify the /etc/httpd/conf/httpd.conf configuration file and replace /var/www/html with /content. Create the /content directory and then create a static index.html file in the /content directory that says "this is my website".

3. Modify the /etc/httpd/conf.d/userdir.conf directory and replace UserDir disabled with UserDir public_html.

4. Create the public_html directory in the /home/user directory. Echo a simple html file with the text "this is my website" into the /home/user/public_html/index.html file.

5. Set the user owner and group owner of the /home/user directory to "user". Set permissions to 711 /home/user and 755 recursively on /home/user/public_html.

6. Restart the httpd service.

7.  Install the correct packages for troubleshooting SELinux policy denials and violations.

8. Copy your IP address and attempt to open the index.html file in your browser. Troubleshoot using the proper SELinux troubleshooting package what may be causing the issue. Once you have determined the issue, implement a solution to fix the policy violation.

 9. Attempt to open the user "user"'s homedir via the web browser (Example: http://tcox1.mylabserver.com/~user/). If permission is denied, troubleshoot the issue using the proper SELinux troubleshooting tools. Once the issue is discovered, implement a persistent fix and try again.



##################################################



1. Download and install the apache web server.
[root@localhost ~]# yum install httpd

2. Modify the /etc/httpd/conf/httpd.conf configuration file and replace /var/www/html with /content. Create the /content directory and then create a static index.html file in the /content directory that says "this is my website".
[root@localhost ~]# sed -i 's/\/var\/www\/html/\/content/' /etc/httpd/conf/httpd.conf
[root@localhost ~]# vim /etc/httpd/conf/httpd.conf then find and replace /var/www/html with /content
[root@localhost ~]# mkdir /content
[root@localhost ~]# echo "this is my website" > /content/index.html

3. Modify the /etc/httpd/conf.d/userdir.conf directory and replace UserDir disabled with UserDir public_html.
[root@localhost ~]# sed -i 's/disabled/public_html/' /etc/httpd/conf.d/userdir.conf
or
Manually modify the /etc/httpd/conf.d/userdir.conf

4. Create the public_html directory in the /home/user directory. Echo a simple html file with the text "this is my website" into the /home/user/public_html/index.html file.
 [root@localhost ~]# mkdir /home/user/public_html
[root@localhost ~]# echo "this is my website" > /home/user/public_html/index.html

5. Set the user owner and group owner of the /home/user directory to "user". Set permissions to 711 /home/user and 755 recursively on /home/user/public_html.
[root@localhost ~]# chmod 711 /home/user
[root@localhost ~]# chmod 755 -R /home/user/public_html
[root@localhost ~]# chown user:user -R /home/user/public_html

6. Restart the httpd service.
[root@localhost ~]# systemctl restart httpd

7.  Install the correct packages for troubleshooting SELinux policy denials and violations.
[root@localhost ~]# yum install -y setroubleshoot-server

8. Copy your IP address and attempt to open the index.html file in your browser. Troubleshoot using the proper SELinux troubleshooting package what may be causing the issue. Once you have determined the issue, implement a solution to fix the policy violation.
[root@localhost ~]# sealert -a /var/log/audit/audit.log
[root@localhost ~]# semanage fcontext -a -t httpd_sys_content_t '/content(/.*)?'
[root@localhost ~]# restorecon -Rv /content
restorecon reset /content context unconfined_u:object_r:default_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /content/index.html context unconfined_u:object_r:default_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0

9. Attempt to open the user "user"'s homedir via the web browser (Example: http://tcox1.mylabserver.com/~user/). If permission is denied, troubleshoot the issue using the proper SELinux troubleshooting tools. Once the issue is discovered, implement a persistent fix and try again.
[root@localhost ~]# sealert -a /var/log/audit/audit.log
[root@localhost ~]# setsebool -P httpd_enable_homedirs on




##################################################
Exercise: Working With SELinux Context, Booleans, and Troubleshooting
##################################################
1. Download and install the apache web server.

2. Modify the /etc/httpd/conf/httpd.conf configuration file and replace /var/www/html with /content. Create the /content directory and then create a static index.html file in the /content directory that says "this is my website".

3. Modify the /etc/httpd/conf.d/userdir.conf directory and replace UserDir disabled with UserDir public_html.

4. Create the public_html directory in the /home/user directory. Echo a simple html file with the text "this is my website" into the /home/user/public_html/index.html file.

5. Set the user owner and group owner of the /home/user directory to "user". Set permissions to 711 /home/user and 755 recursively on /home/user/public_html.

6. Restart the httpd service.

7.  Install the correct packages for troubleshooting SELinux policy denials and violations.

8. Copy your IP address and attempt to open the index.html file in your browser. Troubleshoot using the proper SELinux troubleshooting package what may be causing the issue. Once you have determined the issue, implement a solution to fix the policy violation.

9. Attempt to open the user "user"'s homedir via the web browser (Example: http://tcox1.mylabserver.com/~user/). If permission is denied, troubleshoot the issue using the proper SELinux troubleshooting tools. Once the issue is discovered, implement a persistent fix and try again.


##################################################
1. Download and install the apache web server.

[root@localhost ~]# yum install httpd

2. Modify the /etc/httpd/conf/httpd.conf configuration file and replace /var/www/html with /content. Create the /content directory and then create a static index.html file in the /content directory that says "this is my website".

[root@localhost ~]# sed -i 's/\/var\/www\/html/\/content/' /etc/httpd/conf/httpd.conf

[root@localhost ~]# vim /etc/httpd/conf/httpd.conf then find and replace /var/www/html with /content

[root@localhost ~]# mkdir /content

[root@localhost ~]# echo "this is my website" > /content/index.html

3. Modify the /etc/httpd/conf.d/userdir.conf directory and replace UserDir disabled with UserDir public_html.

[root@localhost ~]# sed -i 's/disabled/public_html/' /etc/httpd/conf.d/userdir.conf

or

Manually modify the /etc/httpd/conf.d/userdir.conf

4. Create the public_html directory in the /home/user directory. Echo a simple html file with the text "this is my website" into the /home/user/public_html/index.html file.

 [root@localhost ~]# mkdir /home/user/public_html

[root@localhost ~]# echo "this is my website" > /home/user/public_html/index.html

5. Set the user owner and group owner of the /home/user directory to "user". Set permissions to 711 /home/user and 755 recursively on /home/user/public_html.

[root@localhost ~]# chmod 711 /home/user

[root@localhost ~]# chmod 755 -R /home/user/public_html

[root@localhost ~]# chown user:user -R /home/user/public_html

6. Restart the httpd service.

[root@localhost ~]# systemctl restart httpd

7.  Install the correct packages for troubleshooting SELinux policy denials and violations.

[root@localhost ~]# yum install -y setroubleshoot-server

8. Copy your IP address and attempt to open the index.html file in your browser. Troubleshoot using the proper SELinux troubleshooting package what may be causing the issue. Once you have determined the issue, implement a solution to fix the policy violation.

[root@localhost ~]# sealert -a /var/log/audit/audit.log

[root@localhost ~]# semanage fcontext -a -t httpd_sys_content_t '/content(/.*)?'

[root@localhost ~]# restorecon -Rv /content

restorecon reset /content context unconfined_u:object_r:default_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0

restorecon reset /content/index.html context unconfined_u:object_r:default_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0

9. Attempt to open the user "user"'s homedir via the web browser (Example: http://tcox1.mylabserver.com/~user/). If permission is denied, troubleshoot the issue using the proper SELinux troubleshooting tools. Once the issue is discovered, implement a persistent fix and try again.

[root@localhost ~]# sealert -a /var/log/audit/audit.log

[root@localhost ~]# setsebool -P httpd_enable_homedirs on









##################################################
Quiz: Finding help or documentation while in the exam
##################################################

1) The key to being successful in the exam is to practice the material and know how to find help while in the exam, NOT to simply memorize it.

Correct

Correct answer
True

2) Which package has additional SELinux man pages that can be downloaded from yum?

Correct

Correct answer
selinux-policy-devel

3) If you cannot remember the command or utility your needing to use, what steps might you take to find the utility?

Correct

Correct answer
Browse to the bottom of a "related" man page to look for related utilities under "see also section"

4) What commands might you issue to find Kickstart format documentation?

Correct

Correct answer
rpm -qd pykickstart, rpm -ql pykickstart





















##################################################

##################################################
